[
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html",
    "href": "02-llms/08-shakespeare-example-colab/index.html",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "",
    "text": "‚úçÔ∏è\nSam Foreman ([ALCF](https://alcf.anl.gov/about/people/sam-foreman))\n2025-07-22\nWe will be using the Shakespeare dataset to train a (~ small) 10M param LLM from scratch.\nImage generated from stabilityai/stable-diffusion on ü§ó Spaces.",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html#install-setup",
    "href": "02-llms/08-shakespeare-example-colab/index.html#install-setup",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "Install / Setup",
    "text": "Install / Setup\nWarning!\nIF YOU ARE EXECUTING ON GOOGLE COLAB:\nYou will need to restart your runtime (Runtime \\rightarrow\\, Restart runtime)\nafter executing the following cell:\n\n%%bash\n\npython3 -c 'import wordplay; print(wordplay.__file__)' 2&gt; '/dev/null'\n\nif [[ $? -eq 0 ]]; then\n    echo \"Has wordplay installed. Nothing to do.\"\nelse\n    echo \"Does not have wordplay installed. Installing...\"\n    git clone 'https://github.com/saforem2/wordplay'\n    python3 wordplay/data/shakespeare_char/prepare.py\n    python3 wordplay/data/shakespeare/prepare.py\n    python3 -m pip install deepspeed\n    python3 -m pip install -e wordplay\nfi\n\n/content/wordplay/src/wordplay/__init__.py\nHas wordplay installed. Nothing to do.",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html#post-install",
    "href": "02-llms/08-shakespeare-example-colab/index.html#post-install",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "Post Install",
    "text": "Post Install\nIf installed correctly, you should be able to:\n&gt;&gt;&gt; import wordplay\n&gt;&gt;&gt; wordplay.__file__\n'/path/to/wordplay/src/wordplay/__init__.py'\n\n%load_ext autoreload\n%autoreload 2\nimport os\nimport sys\nimport ezpz\n\nos.environ['COLORTERM'] = 'truecolor'\nif sys.platform == 'darwin':\n    # If running on MacOS:\n    # os.environ['PYTORCH_ENABLE_MPS_FALLBACK'] = '1'\n    os.environ['TORCH_DEVICE'] = 'cpu'\n# -----------------------------------------------\n\nlogger = ezpz.get_logger()\n\nimport wordplay\nlogger.info(wordplay.__file__)\n\n[2025-07-23 17:07:07,066155][I][ezpz/__init__:265:ezpz] Setting logging level to 'INFO' on 'RANK == 0'\n\n\n\n[2025-07-23 17:07:07,072771][I][ezpz/__init__:266:ezpz] Setting logging level to 'CRITICAL' on all others 'RANK != 0'\n\n\n\n[2025-07-23 17:07:07,079375][I][tmp/ipython-input-2-2338663768:17:ezpz.log] /content/wordplay/src/wordplay/__init__.py",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html#build-trainer",
    "href": "02-llms/08-shakespeare-example-colab/index.html#build-trainer",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "Build Trainer",
    "text": "Build Trainer\nExplicitly, we:\n\nsetup_torch(...)\nBuild cfg: DictConfig = get_config(...)\nInstnatiate config: ExperimentConfig = instantiate(cfg)\nBuild trainer = Trainer(config)\n\n\nimport wordplay\nprint(wordplay.__file__)\n\n/content/wordplay/src/wordplay/__init__.py\n\n\n\nimport os\nimport numpy as np\nfrom ezpz import setup\nfrom hydra.utils import instantiate\nfrom wordplay.configs import get_config, PROJECT_ROOT\nfrom wordplay.trainer import Trainer\n\nHF_DATASETS_CACHE = PROJECT_ROOT.joinpath('.cache', 'huggingface')\nHF_DATASETS_CACHE.mkdir(exist_ok=True, parents=True)\n\nos.environ['HF_DATASETS_CACHE'] = HF_DATASETS_CACHE.as_posix()\n\nBACKEND = 'DDP'\n\nrank = setup(\n    framework='pytorch',\n    backend=BACKEND,\n    seed=1234,\n)\n\ncfg = get_config(\n    [\n        'data=shakespeare',\n        'model=shakespeare',\n        'model.batch_size=8',\n        'model.block_size=1024',\n        'optimizer=shakespeare',\n        'train=shakespeare',\n        f'train.backend={BACKEND}',\n        'train.compile=false',\n        'train.dtype=bfloat16',\n        'train.max_iters=1000',\n        'train.log_interval=10',\n        'train.eval_interval=100',\n    ]\n)\nconfig = instantiate(cfg)\n\n[2025-07-23 17:07:07,409437][I][wordplay/configs:81] Setting HF_DATASETS_CACHE to /content/wordplay/.cache/huggingface/datasets\n\n\n\n[2025-07-23 17:07:07,435593][I][ezpz/dist:1159] Using fw='ddp' with torch_{device,backend}= {cuda, nccl}\n\n\n\n[2025-07-23 17:07:07,438150][I][ezpz/dist:1026] Caught MASTER_PORT=41765 from environment!\n\n\n\n[2025-07-23 17:07:07,440989][I][ezpz/dist:1042] Using torch.distributed.init_process_group with\n- master_addr='588b3fb1cb70'\n- master_port='41765'\n- world_size=1\n- rank=0\n- local_rank=0\n- timeout=datetime.timedelta(seconds=3600)\n- backend='nccl'\n\n\n\n[2025-07-23 17:07:07,447590][I][ezpz/dist:759] Calling torch.distributed.init_process_group_with: rank=0 world_size=1 backend=nccl\n\n\n\n[2025-07-23 17:07:07,462711][I][ezpz/dist:1377] Using device='cuda' with backend='nccl' + 'nccl' for distributed training.\n\n\n\n[2025-07-23 17:07:07,465933][I][ezpz/dist:1422] ['588b3fb1cb70'][0/0] \n\n\n\n[2025-07-23 17:07:08,215788][I][wordplay/configs:317] Loading val from /content/wordplay/data/shakespeare_char/val.bin\n\n\n\n[2025-07-23 17:07:08,221368][I][wordplay/configs:317] Loading train from /content/wordplay/data/shakespeare_char/train.bin\n\n\n\n[2025-07-23 17:07:08,226696][I][wordplay/configs:442] Tokens per iteration: 8,192\n\n\n\n[2025-07-23 17:07:08,231221][I][wordplay/configs:465] Using self.ptdtype=torch.bfloat16 on self.device_type='cuda'\n\n\n\n[2025-07-23 17:07:08,234866][I][wordplay/configs:471] Initializing a new model from scratch\n\n\n\n\nBuild Trainer object\n\ntrainer = Trainer(config)\n\n[2025-07-23 17:07:08,315621][I][wordplay/trainer:248] Initializing a new model from scratch\n\n\n\n[2025-07-23 17:07:08,654618][I][wordplay/model:255] number of parameters: 10.65M\n\n\n\n[2025-07-23 17:07:08,675995][I][wordplay/trainer:266] Model size: num_params=10646784\n\n\n\n[2025-07-23 17:07:08,686453][I][wordplay/model:445] num decayed parameter tensors: 26, with 11,035,008 parameters\n\n\n\n[2025-07-23 17:07:08,690282][I][wordplay/model:449] num non-decayed parameter tensors: 13, with 4,992 parameters\n\n\n\n[2025-07-23 17:07:08,696244][I][wordplay/model:465] using fused AdamW: True\n\n\n\n[2025-07-23 17:07:08,699647][C][wordplay/trainer:318] \"devid='cuda:0'\"\n\n\n\n[2025-07-23 17:07:08,703940][I][wordplay/trainer:358] ‚Ä¢ self.model=GPT(\n  (transformer): ModuleDict(\n    (wte): Embedding(65, 384)\n    (wpe): Embedding(1024, 384)\n    (drop): Dropout(p=0.2, inplace=False)\n    (h): ModuleList(\n      (0-5): 6 x Block(\n        (ln_1): LayerNorm()\n        (attn): CausalSelfAttention(\n          (c_attn): Linear(in_features=384, out_features=1152, bias=False)\n          (c_proj): Linear(in_features=384, out_features=384, bias=False)\n          (attn_dropout): Dropout(p=0.2, inplace=False)\n          (resid_dropout): Dropout(p=0.2, inplace=False)\n        )\n        (ln_2): LayerNorm()\n        (mlp): MLP(\n          (c_fc): Linear(in_features=384, out_features=1536, bias=False)\n          (act_fn): GELU(approximate='none')\n          (c_proj): Linear(in_features=1536, out_features=384, bias=False)\n          (dropout): Dropout(p=0.2, inplace=False)\n        )\n      )\n    )\n    (ln_f): LayerNorm()\n  )\n  (lm_head): Linear(in_features=384, out_features=65, bias=False)\n)\n\n\n\n[2025-07-23 17:07:08,731597][I][wordplay/trainer:359] ‚Ä¢ self.grad_scaler=&lt;torch.cuda.amp.grad_scaler.GradScaler object at 0x7cbd3c9a85d0&gt;\n\n\n\n[2025-07-23 17:07:08,737375][I][wordplay/trainer:360] ‚Ä¢ self.model_engine=GPT(\n  (transformer): ModuleDict(\n    (wte): Embedding(65, 384)\n    (wpe): Embedding(1024, 384)\n    (drop): Dropout(p=0.2, inplace=False)\n    (h): ModuleList(\n      (0-5): 6 x Block(\n        (ln_1): LayerNorm()\n        (attn): CausalSelfAttention(\n          (c_attn): Linear(in_features=384, out_features=1152, bias=False)\n          (c_proj): Linear(in_features=384, out_features=384, bias=False)\n          (attn_dropout): Dropout(p=0.2, inplace=False)\n          (resid_dropout): Dropout(p=0.2, inplace=False)\n        )\n        (ln_2): LayerNorm()\n        (mlp): MLP(\n          (c_fc): Linear(in_features=384, out_features=1536, bias=False)\n          (act_fn): GELU(approximate='none')\n          (c_proj): Linear(in_features=1536, out_features=384, bias=False)\n          (dropout): Dropout(p=0.2, inplace=False)\n        )\n      )\n    )\n    (ln_f): LayerNorm()\n  )\n  (lm_head): Linear(in_features=384, out_features=65, bias=False)\n)\n\n\n\n[2025-07-23 17:07:08,760469][I][wordplay/trainer:361] ‚Ä¢ self.optimizer=AdamW (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.99)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: True\n    lr: 0.001\n    maximize: False\n    weight_decay: 0.1\n\nParameter Group 1\n    amsgrad: False\n    betas: (0.9, 0.99)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: True\n    lr: 0.001\n    maximize: False\n    weight_decay: 0.0\n)",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html#prompt-prior-to-training",
    "href": "02-llms/08-shakespeare-example-colab/index.html#prompt-prior-to-training",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "Prompt (prior to training)",
    "text": "Prompt (prior to training)\n\nquery = \"What is an LLM?\"\noutputs = trainer.evaluate(\n    query,\n    num_samples=1,\n    max_new_tokens=256,\n    top_k=16,\n    display=False\n)\nlogger.info(f\"['prompt']: '{query}'\")\nlogger.info(\"['response']:\\n\\n\" + fr\"{outputs['0']['raw']}\")\n\n[2025-07-23 17:07:10,765047][I][tmp/ipython-input-6-3496000222:9:ezpz.log] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:07:10,767795][I][tmp/ipython-input-6-3496000222:10:ezpz.log] ['response']:\n\nWhat is an LLM?ouuu'fU?UUUU-LLlVmoYY;?U$IMwwYDjMYYXSSdIss;I''DPOjHhooooMZtmkoGXjZ\nBDDddZkydVPcM'MAWILMDDP'''!A'Vzl;R\ndtA$ttoXttJJffobJJ;b-vkwwJJOHHwQFccddlobAGGnM'''$kW;kzZlSwZkAoR;wmooo$J-fffoYDd'UBooXYB;JSf?P'MJ..t'hPffID;R.XXo'''SPZkXXXe'VS.JoMdkXSffo''RHQklK''UUUSoMn",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html#train-model",
    "href": "02-llms/08-shakespeare-example-colab/index.html#train-model",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "Train Model",
    "text": "Train Model\n\n\n\nname\ndescription\n\n\n\n\nstep\nCurrent training step\n\n\nloss\nLoss value\n\n\ndt\nTime per step (in ms)\n\n\nsps\nSamples per second\n\n\nmtps\n(million) Tokens per sec\n\n\nmfu\nModel Flops utilization[1]\n\n\n\n^legend: #tbl-legend\n[1] in units of A100 bfloat16 peak FLOPS\n\ntrainer.config.device_type\n\n'cuda'\n\n\n\nfrom rich import print\n\nprint(trainer.model)\n\nGPT(\n  (transformer): ModuleDict(\n    (wte): Embedding(65, 384)\n    (wpe): Embedding(1024, 384)\n    (drop): Dropout(p=0.2, inplace=False)\n    (h): ModuleList(\n      (0-5): 6 x Block(\n        (ln_1): LayerNorm()\n        (attn): CausalSelfAttention(\n          (c_attn): Linear(in_features=384, out_features=1152, bias=False)\n          (c_proj): Linear(in_features=384, out_features=384, bias=False)\n          (attn_dropout): Dropout(p=0.2, inplace=False)\n          (resid_dropout): Dropout(p=0.2, inplace=False)\n        )\n        (ln_2): LayerNorm()\n        (mlp): MLP(\n          (c_fc): Linear(in_features=384, out_features=1536, bias=False)\n          (act_fn): GELU(approximate='none')\n          (c_proj): Linear(in_features=1536, out_features=384, bias=False)\n          (dropout): Dropout(p=0.2, inplace=False)\n        )\n      )\n    )\n    (ln_f): LayerNorm()\n  )\n  (lm_head): Linear(in_features=384, out_features=65, bias=False)\n)",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html#partial-training",
    "href": "02-llms/08-shakespeare-example-colab/index.html#partial-training",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "(partial) Training:",
    "text": "(partial) Training:\nWe‚Äôll first train for 500 iterations and then evaluate the models performance on the same prompt:\n\nWhat is an LLM?\n\n\ntrainer.train(train_iters=500)\n\n                Training Legend                 \n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ        abbr ‚îÉ desc                           ‚îÉ\n‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©\n‚îÇ        step ‚îÇ Current training iteration     ‚îÇ\n‚îÇ        loss ‚îÇ Loss value                     ‚îÇ\n‚îÇ          dt ‚îÇ Elapsed time per training step ‚îÇ\n‚îÇ         dtf ‚îÇ Elapsed time per forward step  ‚îÇ\n‚îÇ         dtb ‚îÇ Elapsed time per backward step ‚îÇ\n‚îÇ         sps ‚îÇ Samples per second             ‚îÇ\n‚îÇ sps_per_gpu ‚îÇ Samples per second (per GPU)   ‚îÇ\n‚îÇ         tps ‚îÇ Tokens per second              ‚îÇ\n‚îÇ tps_per_gpu ‚îÇ Tokens per second (per GPU)    ‚îÇ\n‚îÇ         mfu ‚îÇ Model flops utilization        ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n\n\n[2025-07-23 17:07:12,567707][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:07:12,572514][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?ZIoZo-om';-'MAhB,RcOVP!JJhhkkJnnUzI''&D&jH!ddWJJhfUUVkRhZoZ:MoJRtDjkkhhdMM'Sdd-dbUoXXLSfyXXXRb3ZOS''$!o&&jnVJ3MMkjJ'Mffe-cm..J3Oa;'$hooJ3z!jUSDn\n'DqBJtHH;!ozZIZokzoooYlMKLJm.DDmkkXRX'NnhMSccJsH;Ude.tRzDoUtm'JmCd;Jd&j'Qo&'$$DAJTPPVv&j'jjtmmtdls;wNNoooJ3$DDJ\n\n\n\n[2025-07-23 17:08:14,213943][I][wordplay/trainer:894] step=10 loss=3.28901 dt=0.388647 dtf=0.0077605 dtb=0.0102481 sps=2.57303 sps_per_gpu=2.57303 tps=21078.3 tps_per_gpu=21078.3 mfu=0.622837\n\n\n\n[2025-07-23 17:08:18,050755][I][wordplay/trainer:894] step=20 loss=2.82665 dt=0.392386 dtf=0.0123749 dtb=0.0163346 sps=2.54851 sps_per_gpu=2.54851 tps=20877.4 tps_per_gpu=20877.4 mfu=0.622244\n\n\n\n[2025-07-23 17:08:21,869708][I][wordplay/trainer:894] step=30 loss=2.64874 dt=0.379033 dtf=0.00770909 dtb=0.0103789 sps=2.6383 sps_per_gpu=2.6383 tps=21612.9 tps_per_gpu=21612.9 mfu=0.623883\n\n\n\n[2025-07-23 17:08:25,681515][I][wordplay/trainer:894] step=40 loss=2.58119 dt=0.375823 dtf=0.00982569 dtb=0.0116637 sps=2.66083 sps_per_gpu=2.66083 tps=21797.5 tps_per_gpu=21797.5 mfu=0.625904\n\n\n\n[2025-07-23 17:08:29,489842][I][wordplay/trainer:894] step=50 loss=2.5564 dt=0.381329 dtf=0.00818184 dtb=0.0101487 sps=2.6224 sps_per_gpu=2.6224 tps=21482.7 tps_per_gpu=21482.7 mfu=0.626792\n\n\n\n[2025-07-23 17:08:33,295135][I][wordplay/trainer:894] step=60 loss=2.55377 dt=0.37768 dtf=0.00809329 dtb=0.00990252 sps=2.64775 sps_per_gpu=2.64775 tps=21690.3 tps_per_gpu=21690.3 mfu=0.628205\n\n\n\n[2025-07-23 17:08:37,094848][I][wordplay/trainer:894] step=70 loss=2.53792 dt=0.37185 dtf=0.00804143 dtb=0.010255 sps=2.68926 sps_per_gpu=2.68926 tps=22030.4 tps_per_gpu=22030.4 mfu=0.630482\n\n\n\n[2025-07-23 17:08:40,894946][I][wordplay/trainer:894] step=80 loss=2.56441 dt=0.380709 dtf=0.00861202 dtb=0.0100984 sps=2.62668 sps_per_gpu=2.62668 tps=21517.8 tps_per_gpu=21517.8 mfu=0.631016\n\n\n\n[2025-07-23 17:08:44,697477][I][wordplay/trainer:894] step=90 loss=2.5338 dt=0.368932 dtf=0.00809296 dtb=0.00962644 sps=2.71053 sps_per_gpu=2.71053 tps=22204.6 tps_per_gpu=22204.6 mfu=0.633527\n\n\n\n[2025-07-23 17:08:48,500289][I][wordplay/trainer:894] step=100 loss=2.53127 dt=0.376976 dtf=0.00801782 dtb=0.0100192 sps=2.65269 sps_per_gpu=2.65269 tps=21730.8 tps_per_gpu=21730.8 mfu=0.634386\n\n\n\n[2025-07-23 17:08:49,332883][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:08:49,334601][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\nAREThe he anghangatr ho misen fave by the t fe wh w onk pe wns w s did s fithe s.\n\nCHather s, t be angenont ofous sts se mathan se.\n\n\nAn s tr be the acice pllll is s anontharanonte as wakar s sthe toore sthe towar thag, tin toullon llly my makndheacove t \n\n\n\n[2025-07-23 17:09:47,060965][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:09:47,063008][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:09:47,414828][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:09:51,240684][I][wordplay/trainer:894] step=110 loss=2.50749 dt=0.380784 dtf=0.00766138 dtb=0.0102359 sps=2.62616 sps_per_gpu=2.62616 tps=21513.5 tps_per_gpu=21513.5 mfu=0.634517\n\n\n\n[2025-07-23 17:09:55,063291][I][wordplay/trainer:894] step=120 loss=2.5274 dt=0.379459 dtf=0.00809937 dtb=0.010612 sps=2.63533 sps_per_gpu=2.63533 tps=21588.7 tps_per_gpu=21588.7 mfu=0.634857\n\n\n\n[2025-07-23 17:09:58,886616][I][wordplay/trainer:894] step=130 loss=2.54362 dt=0.380395 dtf=0.00779761 dtb=0.00998153 sps=2.62885 sps_per_gpu=2.62885 tps=21535.5 tps_per_gpu=21535.5 mfu=0.635006\n\n\n\n[2025-07-23 17:10:02,708605][I][wordplay/trainer:894] step=140 loss=2.50172 dt=0.381295 dtf=0.00778436 dtb=0.0100367 sps=2.62264 sps_per_gpu=2.62264 tps=21484.7 tps_per_gpu=21484.7 mfu=0.63499\n\n\n\n[2025-07-23 17:10:06,528915][I][wordplay/trainer:894] step=150 loss=2.50335 dt=0.373231 dtf=0.0079468 dtb=0.0108304 sps=2.67931 sps_per_gpu=2.67931 tps=21948.9 tps_per_gpu=21948.9 mfu=0.636348\n\n\n\n[2025-07-23 17:10:10,344712][I][wordplay/trainer:894] step=160 loss=2.48674 dt=0.372652 dtf=0.0117069 dtb=0.0104974 sps=2.68347 sps_per_gpu=2.68347 tps=21983 tps_per_gpu=21983 mfu=0.63767\n\n\n\n[2025-07-23 17:10:14,168118][I][wordplay/trainer:894] step=170 loss=2.47736 dt=0.380656 dtf=0.00807191 dtb=0.0106655 sps=2.62705 sps_per_gpu=2.62705 tps=21520.8 tps_per_gpu=21520.8 mfu=0.637494\n\n\n\n[2025-07-23 17:10:17,988492][I][wordplay/trainer:894] step=180 loss=2.46811 dt=0.380603 dtf=0.0078251 dtb=0.0103172 sps=2.62741 sps_per_gpu=2.62741 tps=21523.8 tps_per_gpu=21523.8 mfu=0.637345\n\n\n\n[2025-07-23 17:10:21,810169][I][wordplay/trainer:894] step=190 loss=2.45376 dt=0.381434 dtf=0.013805 dtb=0.0137897 sps=2.62169 sps_per_gpu=2.62169 tps=21476.9 tps_per_gpu=21476.9 mfu=0.637072\n\n\n\n[2025-07-23 17:10:25,634107][I][wordplay/trainer:894] step=200 loss=2.47938 dt=0.383512 dtf=0.00936293 dtb=0.0101239 sps=2.60748 sps_per_gpu=2.60748 tps=21360.5 tps_per_gpu=21360.5 mfu=0.636483\n\n\n\n[2025-07-23 17:10:26,457547][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:10:26,459401][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\nHLUS:\nLII hethin.\nTE: hast seatisurindo wiretyo benin tige, manens, br athetir hyors, blireriarond te me and, f llfes thes thor ists a m thives me windou,\n\n\n\nHA oulince s muce oll sse s avelo the rurd p as aver themes l neas:\nHeratho w ts the o w. thane r\n\n\n\n[2025-07-23 17:11:24,182085][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:11:24,184071][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:11:24,514195][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:11:28,333182][I][wordplay/trainer:894] step=210 loss=2.45724 dt=0.380321 dtf=0.00789146 dtb=0.00988756 sps=2.62936 sps_per_gpu=2.62936 tps=21539.7 tps_per_gpu=21539.7 mfu=0.636482\n\n\n\n[2025-07-23 17:11:32,159664][I][wordplay/trainer:894] step=220 loss=2.48242 dt=0.383149 dtf=0.00807603 dtb=0.0101043 sps=2.60995 sps_per_gpu=2.60995 tps=21380.7 tps_per_gpu=21380.7 mfu=0.636011\n\n\n\n[2025-07-23 17:11:35,989095][I][wordplay/trainer:894] step=230 loss=2.48992 dt=0.381508 dtf=0.00775943 dtb=0.00976974 sps=2.62117 sps_per_gpu=2.62117 tps=21472.7 tps_per_gpu=21472.7 mfu=0.635859\n\n\n\n[2025-07-23 17:11:39,818287][I][wordplay/trainer:894] step=240 loss=2.45306 dt=0.382383 dtf=0.00783342 dtb=0.0103981 sps=2.61518 sps_per_gpu=2.61518 tps=21423.5 tps_per_gpu=21423.5 mfu=0.635577\n\n\n\n[2025-07-23 17:11:43,651793][I][wordplay/trainer:894] step=250 loss=2.48512 dt=0.381244 dtf=0.00790653 dtb=0.00995927 sps=2.623 sps_per_gpu=2.623 tps=21487.6 tps_per_gpu=21487.6 mfu=0.635512\n\n\n\n[2025-07-23 17:11:47,488905][I][wordplay/trainer:894] step=260 loss=2.45921 dt=0.375016 dtf=0.0110469 dtb=0.0137554 sps=2.66655 sps_per_gpu=2.66655 tps=21844.4 tps_per_gpu=21844.4 mfu=0.636509\n\n\n\n[2025-07-23 17:11:51,323856][I][wordplay/trainer:894] step=270 loss=2.46985 dt=0.38433 dtf=0.00785675 dtb=0.0111291 sps=2.60193 sps_per_gpu=2.60193 tps=21315 tps_per_gpu=21315 mfu=0.635841\n\n\n\n[2025-07-23 17:11:55,157805][I][wordplay/trainer:894] step=280 loss=2.47304 dt=0.38265 dtf=0.00785524 dtb=0.010542 sps=2.61336 sps_per_gpu=2.61336 tps=21408.6 tps_per_gpu=21408.6 mfu=0.635517\n\n\n\n[2025-07-23 17:11:58,985311][I][wordplay/trainer:894] step=290 loss=2.4519 dt=0.38073 dtf=0.0100743 dtb=0.0128665 sps=2.62653 sps_per_gpu=2.62653 tps=21516.5 tps_per_gpu=21516.5 mfu=0.635544\n\n\n\n[2025-07-23 17:12:02,814627][I][wordplay/trainer:894] step=300 loss=2.44979 dt=0.383147 dtf=0.00804455 dtb=0.0103887 sps=2.60996 sps_per_gpu=2.60996 tps=21380.8 tps_per_gpu=21380.8 mfu=0.635167\n\n\n\n[2025-07-23 17:12:03,628924][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:12:03,630654][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM? muroursee aril icalis\n\nWe lal pl mal.\nCIO:\n\nLESTerthe coprideve, y wingrenget mir bue powin ithe an w\nAN:\nINI heshas be, intaly ws avevethay aiourofourthelin wous ans ay ber IUS:\nWh f y have s n t.\nIOLONThaventer the t at tho, I win thounepancke and find \n\n\n\n[2025-07-23 17:13:01,480227][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:13:01,482159][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:13:01,816991][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:13:05,641415][I][wordplay/trainer:894] step=310 loss=2.45647 dt=0.383054 dtf=0.00785093 dtb=0.00992947 sps=2.6106 sps_per_gpu=2.6106 tps=21386 tps_per_gpu=21386 mfu=0.634844\n\n\n\n[2025-07-23 17:13:09,467371][I][wordplay/trainer:894] step=320 loss=2.45905 dt=0.382875 dtf=0.0081 dtb=0.010746 sps=2.61182 sps_per_gpu=2.61182 tps=21396 tps_per_gpu=21396 mfu=0.634582\n\n\n\n[2025-07-23 17:13:13,297667][I][wordplay/trainer:894] step=330 loss=2.4555 dt=0.38572 dtf=0.0108775 dtb=0.0128777 sps=2.59256 sps_per_gpu=2.59256 tps=21238.2 tps_per_gpu=21238.2 mfu=0.63388\n\n\n\n[2025-07-23 17:13:17,131895][I][wordplay/trainer:894] step=340 loss=2.4634 dt=0.384959 dtf=0.00957926 dtb=0.010189 sps=2.59768 sps_per_gpu=2.59768 tps=21280.2 tps_per_gpu=21280.2 mfu=0.633373\n\n\n\n[2025-07-23 17:13:20,957109][I][wordplay/trainer:894] step=350 loss=2.49212 dt=0.38072 dtf=0.00796532 dtb=0.0103618 sps=2.6266 sps_per_gpu=2.6266 tps=21517.1 tps_per_gpu=21517.1 mfu=0.633616\n\n\n\n[2025-07-23 17:13:24,791303][I][wordplay/trainer:894] step=360 loss=2.42521 dt=0.380351 dtf=0.00941999 dtb=0.0131558 sps=2.62915 sps_per_gpu=2.62915 tps=21538 tps_per_gpu=21538 mfu=0.633897\n\n\n\n[2025-07-23 17:13:28,625122][I][wordplay/trainer:894] step=370 loss=2.46779 dt=0.383116 dtf=0.00759078 dtb=0.0105659 sps=2.61017 sps_per_gpu=2.61017 tps=21382.5 tps_per_gpu=21382.5 mfu=0.63369\n\n\n\n[2025-07-23 17:13:32,456066][I][wordplay/trainer:894] step=380 loss=2.46751 dt=0.384732 dtf=0.00849637 dtb=0.0100098 sps=2.59921 sps_per_gpu=2.59921 tps=21292.8 tps_per_gpu=21292.8 mfu=0.633238\n\n\n\n[2025-07-23 17:13:36,284446][I][wordplay/trainer:894] step=390 loss=2.47132 dt=0.390981 dtf=0.0104592 dtb=0.0141359 sps=2.55767 sps_per_gpu=2.55767 tps=20952.4 tps_per_gpu=20952.4 mfu=0.631826\n\n\n\n[2025-07-23 17:13:40,120231][I][wordplay/trainer:894] step=400 loss=2.50043 dt=0.382461 dtf=0.00788739 dtb=0.011582 sps=2.61465 sps_per_gpu=2.61465 tps=21419.2 tps_per_gpu=21419.2 mfu=0.631935\n\n\n\n[2025-07-23 17:13:40,955053][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:13:40,956742][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\nHUSUS:\nWingens thent ndd the se thof heare oupeed s te ase harot anes hant wisthe het clor m at t somy th br his s he, thanononoun heco he bong were asesonor t wearesp\n\n\n\nNUS: th ber d, ay sh thout wo pavavond ay touch the hastrd omer hes ias may perengor\n\n\n\n[2025-07-23 17:14:38,666483][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:14:38,673966][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:14:39,050214][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:14:42,870655][I][wordplay/trainer:894] step=410 loss=2.48579 dt=0.380458 dtf=0.00763788 dtb=0.00967759 sps=2.62841 sps_per_gpu=2.62841 tps=21531.9 tps_per_gpu=21531.9 mfu=0.632366\n\n\n\n[2025-07-23 17:14:46,696620][I][wordplay/trainer:894] step=420 loss=2.44756 dt=0.389089 dtf=0.0143081 dtb=0.0108978 sps=2.57011 sps_per_gpu=2.57011 tps=21054.3 tps_per_gpu=21054.3 mfu=0.631342\n\n\n\n[2025-07-23 17:14:50,528406][I][wordplay/trainer:894] step=430 loss=2.46498 dt=0.383404 dtf=0.0097532 dtb=0.0132017 sps=2.60821 sps_per_gpu=2.60821 tps=21366.5 tps_per_gpu=21366.5 mfu=0.631343\n\n\n\n[2025-07-23 17:14:54,360775][I][wordplay/trainer:894] step=440 loss=2.46993 dt=0.384899 dtf=0.00866323 dtb=0.0128457 sps=2.59808 sps_per_gpu=2.59808 tps=21283.5 tps_per_gpu=21283.5 mfu=0.631099\n\n\n\n[2025-07-23 17:14:58,197581][I][wordplay/trainer:894] step=450 loss=2.45371 dt=0.383754 dtf=0.00799181 dtb=0.0108706 sps=2.60584 sps_per_gpu=2.60584 tps=21347 tps_per_gpu=21347 mfu=0.631067\n\n\n\n[2025-07-23 17:15:02,033033][I][wordplay/trainer:894] step=460 loss=2.43378 dt=0.379863 dtf=0.0110734 dtb=0.0147297 sps=2.63253 sps_per_gpu=2.63253 tps=21565.6 tps_per_gpu=21565.6 mfu=0.631684\n\n\n\n[2025-07-23 17:15:05,868916][I][wordplay/trainer:894] step=470 loss=2.41934 dt=0.378727 dtf=0.00844342 dtb=0.0111405 sps=2.64043 sps_per_gpu=2.64043 tps=21630.4 tps_per_gpu=21630.4 mfu=0.632431\n\n\n\n[2025-07-23 17:15:09,703796][I][wordplay/trainer:894] step=480 loss=2.45929 dt=0.382927 dtf=0.00844033 dtb=0.0114589 sps=2.61146 sps_per_gpu=2.61146 tps=21393.1 tps_per_gpu=21393.1 mfu=0.632402\n\n\n\n[2025-07-23 17:15:13,538234][I][wordplay/trainer:894] step=490 loss=2.4835 dt=0.383195 dtf=0.0079397 dtb=0.0104966 sps=2.60964 sps_per_gpu=2.60964 tps=21378.1 tps_per_gpu=21378.1 mfu=0.632332\n\n\n\n[2025-07-23 17:15:17,374316][I][wordplay/trainer:894] step=500 loss=2.43789 dt=0.382541 dtf=0.00727845 dtb=0.0100782 sps=2.6141 sps_per_gpu=2.6141 tps=21414.7 tps_per_gpu=21414.7 mfu=0.632376\n\n\n\n\nimport time\n\nquery = \"What is an LLM?\"\nt0 = time.perf_counter()\noutputs = trainer.evaluate(\n    query,\n    num_samples=1,\n    max_new_tokens=256,\n    top_k=16,\n    display=False\n)\nlogger.info(f'took: {time.perf_counter() - t0:.4f}s')\nlogger.info(f\"['prompt']: '{query}'\")\nlogger.info(\"['response']:\\n\\n\" + fr\"{outputs['0']['raw']}\")\n\n[2025-07-23 17:15:18,240721][I][tmp/ipython-input-10-1425179755:12:ezpz.log] took: 0.8133s\n\n\n\n[2025-07-23 17:15:18,242822][I][tmp/ipython-input-10-1425179755:13:ezpz.log] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:15:18,245933][I][tmp/ipython-input-10-1425179755:14:ezpz.log] ['response']:\n\nWhat is an LLM? burthilio s in o th twiser mbalilis ar sis alincore tt t mes mpresofo m whe hary ht ourighothast omy pomithe d?\n\n\n\n\nBu le wie IUTore ll ishath tes d fr irme nco s f maksere,\nIAn he ise wicouss s, areatath meangre the, my hare wis pay toth laut athe s,\nAno",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html#resume-training",
    "href": "02-llms/08-shakespeare-example-colab/index.html#resume-training",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "Resume Training‚Ä¶",
    "text": "Resume Training‚Ä¶\n\ntrainer.train()\n\n[2025-07-23 17:15:19,128023][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:15:19,129812][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\nPOOSTOLENETES:\nINIONEO: oft ffan yo pe hous tor ce me s here serste buthe he ase he\n\n\nNENIO:\nWhe arallin hatithofoull the, fousencay yont paris.\nPENTER:\nAn o, that s f lllle ishan be be acer se war tha pe iopre is ore nckat, me my?\n\nWI tofifre he llly po\n\n\n\n[2025-07-23 17:16:16,858986][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:16:16,861272][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:16:17,190207][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:16:21,016363][I][wordplay/trainer:894] step=510 loss=2.46165 dt=0.380989 dtf=0.00765307 dtb=0.0102919 sps=2.62475 sps_per_gpu=2.62475 tps=21502 tps_per_gpu=21502 mfu=0.635357\n\n\n\n[2025-07-23 17:16:24,851610][I][wordplay/trainer:894] step=520 loss=2.44981 dt=0.383659 dtf=0.00791765 dtb=0.0103253 sps=2.60648 sps_per_gpu=2.60648 tps=21352.3 tps_per_gpu=21352.3 mfu=0.634915\n\n\n\n[2025-07-23 17:16:28,687465][I][wordplay/trainer:894] step=530 loss=2.45632 dt=0.388874 dtf=0.01204 dtb=0.0159266 sps=2.57153 sps_per_gpu=2.57153 tps=21066 tps_per_gpu=21066 mfu=0.633671\n\n\n\n[2025-07-23 17:16:32,526883][I][wordplay/trainer:894] step=540 loss=2.45869 dt=0.38549 dtf=0.00823117 dtb=0.0103854 sps=2.5941 sps_per_gpu=2.5941 tps=21250.9 tps_per_gpu=21250.9 mfu=0.633098\n\n\n\n[2025-07-23 17:16:36,360809][I][wordplay/trainer:894] step=550 loss=2.44677 dt=0.385398 dtf=0.00789234 dtb=0.0121862 sps=2.59472 sps_per_gpu=2.59472 tps=21256 tps_per_gpu=21256 mfu=0.632597\n\n\n\n[2025-07-23 17:16:40,195560][I][wordplay/trainer:894] step=560 loss=2.43464 dt=0.385434 dtf=0.0106042 dtb=0.0129227 sps=2.59448 sps_per_gpu=2.59448 tps=21254 tps_per_gpu=21254 mfu=0.63214\n\n\n\n[2025-07-23 17:16:44,032374][I][wordplay/trainer:894] step=570 loss=2.45685 dt=0.382214 dtf=0.00815606 dtb=0.0103625 sps=2.61633 sps_per_gpu=2.61633 tps=21433 tps_per_gpu=21433 mfu=0.632258\n\n\n\n[2025-07-23 17:16:47,866282][I][wordplay/trainer:894] step=580 loss=2.42042 dt=0.383891 dtf=0.00803656 dtb=0.010343 sps=2.60491 sps_per_gpu=2.60491 tps=21339.4 tps_per_gpu=21339.4 mfu=0.632087\n\n\n\n[2025-07-23 17:16:51,705365][I][wordplay/trainer:894] step=590 loss=2.45867 dt=0.381508 dtf=0.0139744 dtb=0.0143725 sps=2.62118 sps_per_gpu=2.62118 tps=21472.7 tps_per_gpu=21472.7 mfu=0.632328\n\n\n\n[2025-07-23 17:16:55,543539][I][wordplay/trainer:894] step=600 loss=2.42416 dt=0.391623 dtf=0.0130454 dtb=0.0146926 sps=2.55347 sps_per_gpu=2.55347 tps=20918.1 tps_per_gpu=20918.1 mfu=0.630905\n\n\n\n[2025-07-23 17:16:56,372045][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:16:56,373698][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\n\n\nKILINGSBRK:\nYe oinot ath lord nous cke, iat ckin and;\nYor te, wad caco aver h\nTow, tom harrds, wer ow coon nalilllll th m thol s s heree, an sus alleris malatetoung ty nd mimarssin myeayelof f my bungrentind's bee and oulodo oter hendin ndind at\nIfowar\n\n\n\n[2025-07-23 17:17:54,112942][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:17:54,116645][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:17:54,560498][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:17:58,382321][I][wordplay/trainer:894] step=610 loss=2.40125 dt=0.380516 dtf=0.00768699 dtb=0.0103504 sps=2.62801 sps_per_gpu=2.62801 tps=21528.7 tps_per_gpu=21528.7 mfu=0.63143\n\n\n\n[2025-07-23 17:18:02,217685][I][wordplay/trainer:894] step=620 loss=2.38897 dt=0.382149 dtf=0.00761661 dtb=0.00966352 sps=2.61678 sps_per_gpu=2.61678 tps=21436.7 tps_per_gpu=21436.7 mfu=0.631629\n\n\n\n[2025-07-23 17:18:06,047977][I][wordplay/trainer:894] step=630 loss=2.38868 dt=0.378137 dtf=0.00969834 dtb=0.0128937 sps=2.64454 sps_per_gpu=2.64454 tps=21664.1 tps_per_gpu=21664.1 mfu=0.632481\n\n\n\n[2025-07-23 17:18:09,883308][I][wordplay/trainer:894] step=640 loss=2.4127 dt=0.382373 dtf=0.00796208 dtb=0.0101229 sps=2.61525 sps_per_gpu=2.61525 tps=21424.1 tps_per_gpu=21424.1 mfu=0.632539\n\n\n\n[2025-07-23 17:18:13,722090][I][wordplay/trainer:894] step=650 loss=2.41445 dt=0.385077 dtf=0.00783048 dtb=0.0110297 sps=2.59688 sps_per_gpu=2.59688 tps=21273.7 tps_per_gpu=21273.7 mfu=0.632146\n\n\n\n[2025-07-23 17:18:17,557001][I][wordplay/trainer:894] step=660 loss=2.38916 dt=0.397191 dtf=0.0126378 dtb=0.0280523 sps=2.51768 sps_per_gpu=2.51768 tps=20624.8 tps_per_gpu=20624.8 mfu=0.629875\n\n\n\n[2025-07-23 17:18:21,395377][I][wordplay/trainer:894] step=670 loss=2.40125 dt=0.37982 dtf=0.00799165 dtb=0.0102509 sps=2.63282 sps_per_gpu=2.63282 tps=21568.1 tps_per_gpu=21568.1 mfu=0.630619\n\n\n\n[2025-07-23 17:18:25,229485][I][wordplay/trainer:894] step=680 loss=2.36815 dt=0.367467 dtf=0.00798743 dtb=0.0101859 sps=2.72133 sps_per_gpu=2.72133 tps=22293.2 tps_per_gpu=22293.2 mfu=0.633431\n\n\n\n[2025-07-23 17:18:29,069577][I][wordplay/trainer:894] step=690 loss=2.40319 dt=0.379338 dtf=0.00789747 dtb=0.0107017 sps=2.63617 sps_per_gpu=2.63617 tps=21595.5 tps_per_gpu=21595.5 mfu=0.6339\n\n\n\n[2025-07-23 17:18:32,902179][I][wordplay/trainer:894] step=700 loss=2.4019 dt=0.382542 dtf=0.00746426 dtb=0.0101071 sps=2.61409 sps_per_gpu=2.61409 tps=21414.6 tps_per_gpu=21414.6 mfu=0.633787\n\n\n\n[2025-07-23 17:18:33,732336][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:18:33,734156][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\nThile than bat ton dor nong mur,\nNO belll lit lop gereing ichth ts heas fopoo l s fowis the\n\nWofores pis wiceris chithith d concofabththesthis t me t t of sis meagoury.\n\nARO:\nWhe my m bo ar f s yourel s f ther thindusolofe s m s le iserangofothin thesith\n\n\n\n[2025-07-23 17:19:31,494673][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:19:31,499399][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:19:31,956960][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:19:35,780584][I][wordplay/trainer:894] step=710 loss=2.41346 dt=0.378216 dtf=0.00835439 dtb=0.0104115 sps=2.64399 sps_per_gpu=2.64399 tps=21659.6 tps_per_gpu=21659.6 mfu=0.63441\n\n\n\n[2025-07-23 17:19:39,611784][I][wordplay/trainer:894] step=720 loss=2.39009 dt=0.383217 dtf=0.00772173 dtb=0.010444 sps=2.60949 sps_per_gpu=2.60949 tps=21376.9 tps_per_gpu=21376.9 mfu=0.634135\n\n\n\n[2025-07-23 17:19:43,450301][I][wordplay/trainer:894] step=730 loss=2.38395 dt=0.38477 dtf=0.0103028 dtb=0.0132564 sps=2.59896 sps_per_gpu=2.59896 tps=21290.6 tps_per_gpu=21290.6 mfu=0.633633\n\n\n\n[2025-07-23 17:19:47,286173][I][wordplay/trainer:894] step=740 loss=2.35507 dt=0.382978 dtf=0.00775962 dtb=0.00999175 sps=2.61112 sps_per_gpu=2.61112 tps=21390.3 tps_per_gpu=21390.3 mfu=0.633475\n\n\n\n[2025-07-23 17:19:51,122311][I][wordplay/trainer:894] step=750 loss=2.34116 dt=0.385881 dtf=0.00818335 dtb=0.0122375 sps=2.59147 sps_per_gpu=2.59147 tps=21229.3 tps_per_gpu=21229.3 mfu=0.632858\n\n\n\n[2025-07-23 17:19:54,958706][I][wordplay/trainer:894] step=760 loss=2.35229 dt=0.395003 dtf=0.0133316 dtb=0.0176366 sps=2.53163 sps_per_gpu=2.53163 tps=20739.1 tps_per_gpu=20739.1 mfu=0.630854\n\n\n\n[2025-07-23 17:19:58,793260][I][wordplay/trainer:894] step=770 loss=2.34521 dt=0.381653 dtf=0.00799117 dtb=0.0100162 sps=2.62018 sps_per_gpu=2.62018 tps=21464.5 tps_per_gpu=21464.5 mfu=0.631194\n\n\n\n[2025-07-23 17:20:02,627603][I][wordplay/trainer:894] step=780 loss=2.31829 dt=0.384113 dtf=0.00808119 dtb=0.0106393 sps=2.6034 sps_per_gpu=2.6034 tps=21327.1 tps_per_gpu=21327.1 mfu=0.631093\n\n\n\n[2025-07-23 17:20:06,463581][I][wordplay/trainer:894] step=790 loss=2.31021 dt=0.383535 dtf=0.00812252 dtb=0.0103508 sps=2.60732 sps_per_gpu=2.60732 tps=21359.2 tps_per_gpu=21359.2 mfu=0.631098\n\n\n\n[2025-07-23 17:20:10,293805][I][wordplay/trainer:894] step=800 loss=2.30534 dt=0.376394 dtf=0.00790557 dtb=0.0103412 sps=2.65679 sps_per_gpu=2.65679 tps=21764.4 tps_per_gpu=21764.4 mfu=0.632299\n\n\n\n[2025-07-23 17:20:11,127431][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:20:11,129261][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\nHESSTY OMy MONN:\nThe as a thestop skin cof or we or bines best busplo cothe.\n\nFORCAMPHY:\nANaracapat there t cathe dyou toraron\n\nAnd ndinis aca t t dis tir.\n\n\nSTRENIO:\nNo ano or, where my sint stthe bllos t ho sow the the,\nTise sigan t.\n\nYCLES:\nMatacou f \n\n\n\n[2025-07-23 17:21:08,807775][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:21:08,810267][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:21:09,289617][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:21:13,120320][I][wordplay/trainer:894] step=810 loss=2.31587 dt=0.381621 dtf=0.00781348 dtb=0.0120922 sps=2.6204 sps_per_gpu=2.6204 tps=21466.3 tps_per_gpu=21466.3 mfu=0.6325\n\n\n\n[2025-07-23 17:21:16,950119][I][wordplay/trainer:894] step=820 loss=2.32552 dt=0.378177 dtf=0.00779952 dtb=0.0102359 sps=2.64426 sps_per_gpu=2.64426 tps=21661.8 tps_per_gpu=21661.8 mfu=0.633258\n\n\n\n[2025-07-23 17:21:20,780635][I][wordplay/trainer:894] step=830 loss=2.27354 dt=0.387149 dtf=0.0106936 dtb=0.0140346 sps=2.58298 sps_per_gpu=2.58298 tps=21159.8 tps_per_gpu=21159.8 mfu=0.632457\n\n\n\n[2025-07-23 17:21:24,610506][I][wordplay/trainer:894] step=840 loss=2.26241 dt=0.383837 dtf=0.00787966 dtb=0.0108706 sps=2.60527 sps_per_gpu=2.60527 tps=21342.4 tps_per_gpu=21342.4 mfu=0.632275\n\n\n\n[2025-07-23 17:21:28,446417][I][wordplay/trainer:894] step=850 loss=2.26027 dt=0.383713 dtf=0.00800034 dtb=0.0100456 sps=2.60611 sps_per_gpu=2.60611 tps=21349.3 tps_per_gpu=21349.3 mfu=0.632132\n\n\n\n[2025-07-23 17:21:32,273517][I][wordplay/trainer:894] step=860 loss=2.25673 dt=0.382741 dtf=0.0083715 dtb=0.0101342 sps=2.61273 sps_per_gpu=2.61273 tps=21403.5 tps_per_gpu=21403.5 mfu=0.632164\n\n\n\n[2025-07-23 17:21:36,109224][I][wordplay/trainer:894] step=870 loss=2.21383 dt=0.381168 dtf=0.00781913 dtb=0.0098429 sps=2.62351 sps_per_gpu=2.62351 tps=21491.8 tps_per_gpu=21491.8 mfu=0.632453\n\n\n\n[2025-07-23 17:21:39,941412][I][wordplay/trainer:894] step=880 loss=2.21413 dt=0.380526 dtf=0.00772047 dtb=0.00999847 sps=2.62794 sps_per_gpu=2.62794 tps=21528.1 tps_per_gpu=21528.1 mfu=0.632821\n\n\n\n[2025-07-23 17:21:43,768114][I][wordplay/trainer:894] step=890 loss=2.21783 dt=0.370921 dtf=0.00774233 dtb=0.0108925 sps=2.69599 sps_per_gpu=2.69599 tps=22085.6 tps_per_gpu=22085.6 mfu=0.634799\n\n\n\n[2025-07-23 17:21:47,604118][I][wordplay/trainer:894] step=900 loss=2.20972 dt=0.389311 dtf=0.0136295 dtb=0.0109 sps=2.56864 sps_per_gpu=2.56864 tps=21042.3 tps_per_gpu=21042.3 mfu=0.633497\n\n\n\n[2025-07-23 17:21:48,462679][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:21:48,464365][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\nDURENCK:\nMe so my nou, hou ward thes ler noms he he,\nOxt my the my de is by beperd.\n\nHARY ORK:\nWhe tho su win th ars at herd pedis.\n\nKING RICHARD II:\nThat we sco arre,\nThade so frener sheran may or tot tremedonght oness.\nGLUCER:\nHe le inest soul mok, son\n\n\n\n[2025-07-23 17:22:46,157466][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:22:46,159878][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:22:46,625786][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:22:50,449927][I][wordplay/trainer:894] step=910 loss=2.17491 dt=0.379023 dtf=0.00754135 dtb=0.0100832 sps=2.63836 sps_per_gpu=2.63836 tps=21613.5 tps_per_gpu=21613.5 mfu=0.634012\n\n\n\n[2025-07-23 17:22:54,284268][I][wordplay/trainer:894] step=920 loss=2.1536 dt=0.383239 dtf=0.0075398 dtb=0.00996356 sps=2.60934 sps_per_gpu=2.60934 tps=21375.7 tps_per_gpu=21375.7 mfu=0.633773\n\n\n\n[2025-07-23 17:22:58,116915][I][wordplay/trainer:894] step=930 loss=2.15065 dt=0.381936 dtf=0.00785014 dtb=0.0114434 sps=2.61824 sps_per_gpu=2.61824 tps=21448.6 tps_per_gpu=21448.6 mfu=0.633774\n\n\n\n[2025-07-23 17:23:01,953658][I][wordplay/trainer:894] step=940 loss=2.12782 dt=0.38311 dtf=0.00824185 dtb=0.0105607 sps=2.61022 sps_per_gpu=2.61022 tps=21382.9 tps_per_gpu=21382.9 mfu=0.633581\n\n\n\n[2025-07-23 17:23:05,787479][I][wordplay/trainer:894] step=950 loss=2.18616 dt=0.38379 dtf=0.00788715 dtb=0.0103477 sps=2.60559 sps_per_gpu=2.60559 tps=21345 tps_per_gpu=21345 mfu=0.633295\n\n\n\n[2025-07-23 17:23:09,621436][I][wordplay/trainer:894] step=960 loss=2.11422 dt=0.384061 dtf=0.00771515 dtb=0.00979936 sps=2.60376 sps_per_gpu=2.60376 tps=21330 tps_per_gpu=21330 mfu=0.632993\n\n\n\n[2025-07-23 17:23:13,455949][I][wordplay/trainer:894] step=970 loss=2.05699 dt=0.383695 dtf=0.00807108 dtb=0.0107169 sps=2.60624 sps_per_gpu=2.60624 tps=21350.3 tps_per_gpu=21350.3 mfu=0.632781\n\n\n\n[2025-07-23 17:23:17,284032][I][wordplay/trainer:894] step=980 loss=2.15509 dt=0.376189 dtf=0.00803431 dtb=0.0109163 sps=2.65824 sps_per_gpu=2.65824 tps=21776.3 tps_per_gpu=21776.3 mfu=0.633849\n\n\n\n[2025-07-23 17:23:21,114368][I][wordplay/trainer:894] step=990 loss=2.1031 dt=0.393959 dtf=0.0123796 dtb=0.0165355 sps=2.53833 sps_per_gpu=2.53833 tps=20794 tps_per_gpu=20794 mfu=0.631908\n\n\n\n[2025-07-23 17:23:24,949152][I][wordplay/trainer:894] step=1000 loss=2.05209 dt=0.371632 dtf=0.00834119 dtb=0.0110242 sps=2.69083 sps_per_gpu=2.69083 tps=22043.3 tps_per_gpu=22043.3 mfu=0.633853\n\n\n\n[2025-07-23 17:23:25,760378][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:23:25,762149][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\n\nWAMILLY:\nAnd I tucke thimbok have doorcent mone,\nWavert mus of me the han hat the deant.\nDEORK:\nFar thall is coors sited not de ind,\nBut theat to ad coftitest fort sthengers,\nThey my thous sor was to yourte mee.\nTARK:\nI leer, men you, wit the by the the\n\n\n\n[2025-07-23 17:24:23,438968][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:24:23,441364][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:24:23,918157][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:24:27,738089][I][wordplay/trainer:894] step=1010 loss=2.07161 dt=0.367348 dtf=0.00773713 dtb=0.0102199 sps=2.72222 sps_per_gpu=2.72222 tps=22300.4 tps_per_gpu=22300.4 mfu=0.636362\n\n\n\n[2025-07-23 17:24:31,569441][I][wordplay/trainer:894] step=1020 loss=2.04552 dt=0.383316 dtf=0.00751949 dtb=0.01008 sps=2.60881 sps_per_gpu=2.60881 tps=21371.4 tps_per_gpu=21371.4 mfu=0.635876\n\n\n\n[2025-07-23 17:24:35,396411][I][wordplay/trainer:894] step=1030 loss=2.03231 dt=0.384257 dtf=0.00816572 dtb=0.0102516 sps=2.60243 sps_per_gpu=2.60243 tps=21319.1 tps_per_gpu=21319.1 mfu=0.635284\n\n\n\n[2025-07-23 17:24:39,228505][I][wordplay/trainer:894] step=1040 loss=2.05762 dt=0.383646 dtf=0.00790242 dtb=0.00997257 sps=2.60657 sps_per_gpu=2.60657 tps=21353 tps_per_gpu=21353 mfu=0.634851\n\n\n\n[2025-07-23 17:24:43,061324][I][wordplay/trainer:894] step=1050 loss=2.03493 dt=0.378067 dtf=0.00783631 dtb=0.00984342 sps=2.64504 sps_per_gpu=2.64504 tps=21668.1 tps_per_gpu=21668.1 mfu=0.635392\n\n\n\n[2025-07-23 17:24:46,898059][I][wordplay/trainer:894] step=1060 loss=1.99328 dt=0.383855 dtf=0.00812065 dtb=0.0102131 sps=2.60515 sps_per_gpu=2.60515 tps=21341.4 tps_per_gpu=21341.4 mfu=0.634914\n\n\n\n[2025-07-23 17:24:50,734315][I][wordplay/trainer:894] step=1070 loss=2.02538 dt=0.38352 dtf=0.00975553 dtb=0.00995462 sps=2.60743 sps_per_gpu=2.60743 tps=21360.1 tps_per_gpu=21360.1 mfu=0.634539\n\n\n\n[2025-07-23 17:24:54,571713][I][wordplay/trainer:894] step=1080 loss=1.98803 dt=0.383255 dtf=0.00790832 dtb=0.0101534 sps=2.60923 sps_per_gpu=2.60923 tps=21374.8 tps_per_gpu=21374.8 mfu=0.634245\n\n\n\n[2025-07-23 17:24:58,396586][I][wordplay/trainer:894] step=1090 loss=2.05368 dt=0.379503 dtf=0.00809327 dtb=0.0106979 sps=2.63503 sps_per_gpu=2.63503 tps=21586.1 tps_per_gpu=21586.1 mfu=0.634605\n\n\n\n[2025-07-23 17:25:02,230324][I][wordplay/trainer:894] step=1100 loss=1.99345 dt=0.386284 dtf=0.0115638 dtb=0.0162085 sps=2.58877 sps_per_gpu=2.58877 tps=21207.2 tps_per_gpu=21207.2 mfu=0.633809\n\n\n\n[2025-07-23 17:25:03,086185][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:25:03,088005][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM? Godeel we ye the live courerd, mare you the sill:\nThis bent the do we shre yeat pert\nSo but yerter the him theely?\n\nKING EDWARD IV:\nYis past whis to is witer gor miny,\nTo the corts a have could heret\nThis the the deears, so your cers tee a be.\n\nCLESTER:\nM\n\n\n\n[2025-07-23 17:26:00,773544][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:26:00,776016][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:26:01,284390][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:26:05,114000][I][wordplay/trainer:894] step=1110 loss=1.95124 dt=0.377492 dtf=0.00786764 dtb=0.0100368 sps=2.64906 sps_per_gpu=2.64906 tps=21701.1 tps_per_gpu=21701.1 mfu=0.634553\n\n\n\n[2025-07-23 17:26:08,948083][I][wordplay/trainer:894] step=1120 loss=1.98738 dt=0.381927 dtf=0.00748538 dtb=0.00989547 sps=2.6183 sps_per_gpu=2.6183 tps=21449.1 tps_per_gpu=21449.1 mfu=0.634477\n\n\n\n[2025-07-23 17:26:12,776837][I][wordplay/trainer:894] step=1130 loss=1.89314 dt=0.374098 dtf=0.008244 dtb=0.0108253 sps=2.67309 sps_per_gpu=2.67309 tps=21898 tps_per_gpu=21898 mfu=0.635735\n\n\n\n[2025-07-23 17:26:16,611706][I][wordplay/trainer:894] step=1140 loss=1.92855 dt=0.393585 dtf=0.0130297 dtb=0.014002 sps=2.54075 sps_per_gpu=2.54075 tps=20813.8 tps_per_gpu=20813.8 mfu=0.633664\n\n\n\n[2025-07-23 17:26:20,447771][I][wordplay/trainer:894] step=1150 loss=1.83626 dt=0.384681 dtf=0.00807674 dtb=0.0107471 sps=2.59955 sps_per_gpu=2.59955 tps=21295.6 tps_per_gpu=21295.6 mfu=0.633223\n\n\n\n[2025-07-23 17:26:24,282285][I][wordplay/trainer:894] step=1160 loss=1.90146 dt=0.383857 dtf=0.0082585 dtb=0.0104392 sps=2.60514 sps_per_gpu=2.60514 tps=21341.3 tps_per_gpu=21341.3 mfu=0.632962\n\n\n\n[2025-07-23 17:26:28,116716][I][wordplay/trainer:894] step=1170 loss=1.88228 dt=0.382931 dtf=0.00886622 dtb=0.0120676 sps=2.61144 sps_per_gpu=2.61144 tps=21392.9 tps_per_gpu=21392.9 mfu=0.632879\n\n\n\n[2025-07-23 17:26:31,951239][I][wordplay/trainer:894] step=1180 loss=1.88628 dt=0.381804 dtf=0.00750252 dtb=0.0100093 sps=2.61914 sps_per_gpu=2.61914 tps=21456 tps_per_gpu=21456 mfu=0.632991\n\n\n\n[2025-07-23 17:26:35,788827][I][wordplay/trainer:894] step=1190 loss=1.91094 dt=0.383424 dtf=0.00741282 dtb=0.0106785 sps=2.60808 sps_per_gpu=2.60808 tps=21365.4 tps_per_gpu=21365.4 mfu=0.632824\n\n\n\n[2025-07-23 17:26:39,625719][I][wordplay/trainer:894] step=1200 loss=1.90239 dt=0.388221 dtf=0.015037 dtb=0.01746 sps=2.57585 sps_per_gpu=2.57585 tps=21101.4 tps_per_gpu=21101.4 mfu=0.631894\n\n\n\n[2025-07-23 17:26:40,480918][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:26:40,482683][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\nLADY GLOUCESTES:\nAnd when there to my liker of mady the:\nIt will the shall contre fature he\nthe day thengery'd one died me meanty:\nWhy, which ime dished your wind the oblod thus hemes,\nI the conte the caition, fortuse whiches faings,\nI her far will there\n\n\n\n[2025-07-23 17:27:38,165528][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:27:38,167913][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:27:38,675275][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:27:42,506973][I][wordplay/trainer:894] step=1210 loss=1.83644 dt=0.379808 dtf=0.00813016 dtb=0.0106532 sps=2.63291 sps_per_gpu=2.63291 tps=21568.8 tps_per_gpu=21568.8 mfu=0.632438\n\n\n\n[2025-07-23 17:27:46,341248][I][wordplay/trainer:894] step=1220 loss=1.85 dt=0.384616 dtf=0.00783149 dtb=0.0105751 sps=2.6  sps_per_gpu=2.6  tps=21299.2 tps_per_gpu=21299.2 mfu=0.63213\n\n\n\n[2025-07-23 17:27:50,174132][I][wordplay/trainer:894] step=1230 loss=1.85794 dt=0.384468 dtf=0.00796023 dtb=0.0101979 sps=2.60099 sps_per_gpu=2.60099 tps=21307.3 tps_per_gpu=21307.3 mfu=0.631878\n\n\n\n[2025-07-23 17:27:53,996352][I][wordplay/trainer:894] step=1240 loss=1.86443 dt=0.381407 dtf=0.00777995 dtb=0.00996514 sps=2.62187 sps_per_gpu=2.62187 tps=21478.3 tps_per_gpu=21478.3 mfu=0.632156\n\n\n\n[2025-07-23 17:27:57,829111][I][wordplay/trainer:894] step=1250 loss=1.76382 dt=0.382476 dtf=0.00785835 dtb=0.0100383 sps=2.61454 sps_per_gpu=2.61454 tps=21418.3 tps_per_gpu=21418.3 mfu=0.632229\n\n\n\n[2025-07-23 17:28:01,663291][I][wordplay/trainer:894] step=1260 loss=1.74205 dt=0.385531 dtf=0.00776372 dtb=0.0138436 sps=2.59382 sps_per_gpu=2.59382 tps=21248.6 tps_per_gpu=21248.6 mfu=0.631793\n\n\n\n[2025-07-23 17:28:05,497559][I][wordplay/trainer:894] step=1270 loss=1.86381 dt=0.395746 dtf=0.0125432 dtb=0.0178912 sps=2.52688 sps_per_gpu=2.52688 tps=20700.2 tps_per_gpu=20700.2 mfu=0.62978\n\n\n\n[2025-07-23 17:28:09,331924][I][wordplay/trainer:894] step=1280 loss=1.85107 dt=0.382921 dtf=0.0081101 dtb=0.00997405 sps=2.61151 sps_per_gpu=2.61151 tps=21393.5 tps_per_gpu=21393.5 mfu=0.630017\n\n\n\n[2025-07-23 17:28:13,161160][I][wordplay/trainer:894] step=1290 loss=1.84071 dt=0.382439 dtf=0.00762057 dtb=0.0106278 sps=2.6148 sps_per_gpu=2.6148 tps=21420.4 tps_per_gpu=21420.4 mfu=0.630311\n\n\n\n[2025-07-23 17:28:16,996729][I][wordplay/trainer:894] step=1300 loss=1.82688 dt=0.383368 dtf=0.0123784 dtb=0.0184451 sps=2.60846 sps_per_gpu=2.60846 tps=21368.5 tps_per_gpu=21368.5 mfu=0.630421\n\n\n\n[2025-07-23 17:28:17,833682][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:28:17,835402][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\nGood my RICHARD III:\nHe you will distent, I may\nIs like pret to fort,\nTo some that fold my part they lok.\nA farther's to consonce which sater,\nAnd fater and him in the shall it them do her this,\nThe a my navin his more the with of haver,\nBut me and the a\n\n\n\n[2025-07-23 17:29:15,475172][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:29:15,477113][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:29:15,945199][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:29:19,772665][I][wordplay/trainer:894] step=1310 loss=1.83877 dt=0.380515 dtf=0.00832942 dtb=0.00994461 sps=2.62802 sps_per_gpu=2.62802 tps=21528.7 tps_per_gpu=21528.7 mfu=0.630994\n\n\n\n[2025-07-23 17:29:23,597414][I][wordplay/trainer:894] step=1320 loss=1.79997 dt=0.380789 dtf=0.00753653 dtb=0.0100344 sps=2.62613 sps_per_gpu=2.62613 tps=21513.2 tps_per_gpu=21513.2 mfu=0.631463\n\n\n\n[2025-07-23 17:29:27,425373][I][wordplay/trainer:894] step=1330 loss=1.84227 dt=0.383599 dtf=0.00811679 dtb=0.0102277 sps=2.60689 sps_per_gpu=2.60689 tps=21355.6 tps_per_gpu=21355.6 mfu=0.63142\n\n\n\n[2025-07-23 17:29:31,259289][I][wordplay/trainer:894] step=1340 loss=1.77032 dt=0.381153 dtf=0.00731168 dtb=0.00972694 sps=2.62362 sps_per_gpu=2.62362 tps=21492.7 tps_per_gpu=21492.7 mfu=0.631787\n\n\n\n[2025-07-23 17:29:35,088601][I][wordplay/trainer:894] step=1350 loss=1.8076 dt=0.384321 dtf=0.00808188 dtb=0.0116733 sps=2.60199 sps_per_gpu=2.60199 tps=21315.5 tps_per_gpu=21315.5 mfu=0.631593\n\n\n\n[2025-07-23 17:29:38,914972][I][wordplay/trainer:894] step=1360 loss=1.79383 dt=0.383019 dtf=0.00830957 dtb=0.0104623 sps=2.61084 sps_per_gpu=2.61084 tps=21388 tps_per_gpu=21388 mfu=0.631632\n\n\n\n[2025-07-23 17:29:42,746913][I][wordplay/trainer:894] step=1370 loss=1.73757 dt=0.377326 dtf=0.009339 dtb=0.0118509 sps=2.65023 sps_per_gpu=2.65023 tps=21710.7 tps_per_gpu=21710.7 mfu=0.632622\n\n\n\n[2025-07-23 17:29:46,582929][I][wordplay/trainer:894] step=1380 loss=1.74524 dt=0.373365 dtf=0.00773357 dtb=0.0100906 sps=2.67835 sps_per_gpu=2.67835 tps=21941 tps_per_gpu=21941 mfu=0.634193\n\n\n\n[2025-07-23 17:29:50,410901][I][wordplay/trainer:894] step=1390 loss=1.75995 dt=0.382166 dtf=0.00797486 dtb=0.0104627 sps=2.61667 sps_per_gpu=2.61667 tps=21435.7 tps_per_gpu=21435.7 mfu=0.634113\n\n\n\n[2025-07-23 17:29:54,241756][I][wordplay/trainer:894] step=1400 loss=1.81278 dt=0.391504 dtf=0.0126958 dtb=0.0182819 sps=2.55425 sps_per_gpu=2.55425 tps=20924.4 tps_per_gpu=20924.4 mfu=0.632531\n\n\n\n[2025-07-23 17:29:55,175194][I][wordplay/trainer:827] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:29:55,177068][I][wordplay/trainer:831] ['response']:\n\nWhat is an LLM?\n\nROHUMERS:\nCitizen:\nThe's no worth bold of I heave is the port art.\n\nSICINIUS:\nAlay, sir, thou away the perfored,\nBelie a hard set the of to your pakial;\nSirt are a a shall in thee.\nYet come, I chould cound thy king will.\n\nBRATUS:\nThe good is heart thou t\n\n\n\n[2025-07-23 17:30:52,849338][I][wordplay/trainer:762] Saving checkpoint to: /content\n\n\n\n[2025-07-23 17:30:52,851168][I][wordplay/trainer:763] Saving model to: /content/model.pth\n\n\n\n[2025-07-23 17:30:53,184812][I][wordplay/configs:141] Appending /content to /content/wordplay/src/ckpts/checkpoints.log\n\n\n\n[2025-07-23 17:30:57,012134][I][wordplay/trainer:894] step=1410 loss=1.79791 dt=0.381525 dtf=0.00881983 dtb=0.0102005 sps=2.62106 sps_per_gpu=2.62106 tps=21471.7 tps_per_gpu=21471.7 mfu=0.632724\n\n\n\n[2025-07-23 17:31:00,841188][I][wordplay/trainer:894] step=1420 loss=1.74375 dt=0.381039 dtf=0.00761951 dtb=0.0101972 sps=2.6244 sps_per_gpu=2.6244 tps=21499.1 tps_per_gpu=21499.1 mfu=0.632979\n\n\n\n[2025-07-23 17:31:04,675786][I][wordplay/trainer:894] step=1430 loss=1.73401 dt=0.388151 dtf=0.00959453 dtb=0.0123491 sps=2.57631 sps_per_gpu=2.57631 tps=21105.2 tps_per_gpu=21105.2 mfu=0.632045\n\n\n\n[2025-07-23 17:31:08,511906][I][wordplay/trainer:894] step=1440 loss=1.72673 dt=0.380442 dtf=0.00765078 dtb=0.00993138 sps=2.62852 sps_per_gpu=2.62852 tps=21532.8 tps_per_gpu=21532.8 mfu=0.632467\n\n\n\n[2025-07-23 17:31:12,350823][I][wordplay/trainer:894] step=1450 loss=1.75055 dt=0.384587 dtf=0.00793686 dtb=0.0107903 sps=2.60019 sps_per_gpu=2.60019 tps=21300.8 tps_per_gpu=21300.8 mfu=0.632162\n\n\n\n[2025-07-23 17:31:16,189335][I][wordplay/trainer:894] step=1460 loss=1.68073 dt=0.381957 dtf=0.00771424 dtb=0.00991214 sps=2.6181 sps_per_gpu=2.6181 tps=21447.4 tps_per_gpu=21447.4 mfu=0.63232\n\n\n\n[2025-07-23 17:31:20,023731][I][wordplay/trainer:894] step=1470 loss=1.71749 dt=0.389038 dtf=0.0123934 dtb=0.016246 sps=2.57045 sps_per_gpu=2.57045 tps=21057.1 tps_per_gpu=21057.1 mfu=0.631309\n\n\n\n[2025-07-23 17:31:23,858642][I][wordplay/trainer:894] step=1480 loss=1.72494 dt=0.380766 dtf=0.00802833 dtb=0.0109163 sps=2.62629 sps_per_gpu=2.62629 tps=21514.5 tps_per_gpu=21514.5 mfu=0.631751\n\n\n\n[2025-07-23 17:31:27,693442][I][wordplay/trainer:894] step=1490 loss=1.72521 dt=0.384513 dtf=0.00979085 dtb=0.0104102 sps=2.60069 sps_per_gpu=2.60069 tps=21304.9 tps_per_gpu=21304.9 mfu=0.631529\n\n\n\n[2025-07-23 17:31:31,528345][I][wordplay/trainer:894] step=1500 loss=1.70409 dt=0.385203 dtf=0.0109562 dtb=0.0163935 sps=2.59604 sps_per_gpu=2.59604 tps=21266.7 tps_per_gpu=21266.7 mfu=0.631217",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/08-shakespeare-example-colab/index.html#evaluate-model",
    "href": "02-llms/08-shakespeare-example-colab/index.html#evaluate-model",
    "title": "wordplay üéÆ üí¨: Shakespeare",
    "section": "Evaluate Model",
    "text": "Evaluate Model\n\nimport time\n\nquery = \"What is an LLM?\"\nt0 = time.perf_counter()\noutputs = trainer.evaluate(\n    query,\n    num_samples=1,\n    max_new_tokens=256,\n    top_k=2,\n    display=False\n)\nlogger.info(f'took: {time.perf_counter() - t0:.4f}s')\nlogger.info(f\"['prompt']: '{query}'\")\nlogger.info(\"['response']:\\n\\n\" + fr\"{outputs['0']['raw']}\")\n\n[2025-07-23 17:31:32,597792][I][tmp/ipython-input-12-582817405:12:ezpz.log] took: 0.9968s\n\n\n\n[2025-07-23 17:31:32,599918][I][tmp/ipython-input-12-582817405:13:ezpz.log] ['prompt']: 'What is an LLM?'\n\n\n\n[2025-07-23 17:31:32,601844][I][tmp/ipython-input-12-582817405:14:ezpz.log] ['response']:\n\nWhat is an LLM? What, that the wild my lord,\nAnd the shal to may so shal that the shall thee.\n\nRICHARD:\nWhat that there thee shal the const the shall so thine.\n\nRICHARD:\nThe wil thee the shal shal that that the should.\n\nRICHARD:\nThen the shal too the show shal to thee.",
    "crumbs": [
      "[02] Large Language Models",
      "[8] Shakespeare Example (Colab)"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#outline",
    "href": "02-llms/01-hands-on-llms/index.html#outline",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Outline",
    "text": "Outline\nAlthough the name ‚Äúlanguage models‚Äù is derived from Natural Language Processing, the models used in these approaches can be applied to diverse scientific applications as illustrated below.\nDuring this session I will cover:\n\nScientific applications for language models\nGeneral overview of Transformers\nTokenization\nModel Architecture\nPipeline using HuggingFace\nModel loading",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#modeling-sequential-data",
    "href": "02-llms/01-hands-on-llms/index.html#modeling-sequential-data",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Modeling Sequential Data",
    "text": "Modeling Sequential Data\nSequences are variable-length lists with data in subsequent iterations that depends on previous iterations (or tokens).\nMathematically:\nA sequence is a list of tokens:\nT = [T_1, T_2, T_3,...,T_N]\nwhere each token within the list depends on the others with a particular probability:\nP(t_N | t_{N-1}, ..., t_3, t_2, t_1)\nThe purpose of sequential modeling is to learn these probabilities for possible tokens in a distribution to perform various tasks including:\n\nSequence generation based on a prompt\nLanguage translation (e.g.¬†English ‚Äì&gt; French)\nProperty prediction (predicting a property based on an entire sequence)\nIdentifying mistakes or missing elements in sequential data",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#scientific-sequential-data-modeling-examples",
    "href": "02-llms/01-hands-on-llms/index.html#scientific-sequential-data-modeling-examples",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Scientific sequential data modeling examples",
    "text": "Scientific sequential data modeling examples\n\nNucleic acid sequences + genomic data\n\n\n\n\n\n\nFigure¬†1: RNA Codons\n\n\n\nNucleic acid sequences can be used to predict translation of proteins, mutations, and gene expression levels.\nHere is an image of GenSLM. This is a language model developed by Argonne researchers that can model genomic information in a single model. It was shown to model the evolution of SARS-COV2 without expensive experiments.\n\n\n\n\n\n\nFigure¬†2: Genomic Scale Language Models (GenSLM) Zvyagin et. al 2022. BioRXiv\n\n\n\n\n\nProtein sequences\nProtein sequences can be used to predict folding structure, protein-protein interactions, chemical/binding properties, protein function and many more properties.\n\n\n\n\n\n\nFigure¬†3: Protein Structure\n\n\n\n\n\n\n\n\n\nFigure¬†4: ESMFold Lin et. al.¬†2023. Science\n\n\n\n\n\nOther applications\n\nBiomedical text\nSMILES strings\nWeather predictions\nInterfacing with simulations such as molecular dynamics simulation",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#overview-of-language-models",
    "href": "02-llms/01-hands-on-llms/index.html#overview-of-language-models",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Overview of Language models",
    "text": "Overview of Language models\nWe will now briefly talk about the progression of language models.\n\nTransformers\nThe most common LMs base their design on the Transformer architecture that was introduced in 2017 in the ‚ÄúAttention is all you need‚Äù paper.\n\n\n\n\n\n\nFigure¬†5: Attention is all you need Vaswani 2017. Advances in Neural Information Processing Systems\n\n\n\nSince then a multitude of LLM architectures have been designed.\n\n\n\n\n\n\nFigure¬†6: Transformers, chronologically\n\n\n\nHuggingFace NLP Course",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#coding-example-of-llms-in-action",
    "href": "02-llms/01-hands-on-llms/index.html#coding-example-of-llms-in-action",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Coding example of LLMs in action!",
    "text": "Coding example of LLMs in action!\nLet‚Äôs look at an example of running inference with a LLM as a block box to generate text given a prompt and we will also initiate a training loop for an LLM\nHere, we will use the transformers library which is as part of HuggingFace, a repository of different models, tokenizers and information on how to apply these models\n\n\n\n\n\n\nWarningü¶ú Stochastic Parrots\n\n\n\n\n\nWarning: Large Language Models are only as good as their training data.\nThey have no ethics, judgement, or editing ability.\nWe will be using some pretrained models from Hugging Face which used wide samples of internet hosted text.\nThe datasets have not been strictly filtered to restrict all malign content so the generated text may be surprisingly dark or questionable.\nThey do not reflect our core values and are only used for demonstration purposes.\n\n\n\n\n\n\nüèÉ‚Äç‚ôÇÔ∏è Running @ ALCF\n\n\n\nIf running this notebook on any of the ALCF machines, be sure to:\nimport os\nos.environ[\"HTTP_PROXY\"]=\"proxy.alcf.anl.gov:3128\"\nos.environ[\"HTTPS_PROXY\"]=\"proxy.alcf.anl.gov:3128\"\nos.environ[\"http_proxy\"]=\"proxy.alcf.anl.gov:3128\"\nos.environ[\"https_proxy\"]=\"proxy.alcf.anl.gov:3128\"\nos.environ[\"ftp_proxy\"]=\"proxy.alcf.anl.gov:3128\"",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#hands-on",
    "href": "02-llms/01-hands-on-llms/index.html#hands-on",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "üßë‚Äçüíª Hands On",
    "text": "üßë‚Äçüíª Hands On\n\n#!pip install transformers\n#!pip install pandas\n#!pip install torch\n\n\n%load_ext autoreload\n%autoreload 2\n\n\nimport ezpz\nimport ambivalent\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom rich import print\n\nplt.style.use(ambivalent.STYLES[\"ambivalent\"])\nsns.set_context(\"notebook\")\nplt.rcParams[\"figure.figsize\"] = [6.4, 4.8]\n\n\n[2025-08-01 17:21:08,089521][I][ezpz/__init__:265:ezpz] Setting logging level to 'INFO' onn\n[2025-08-01 17:21:08,092341][I][ezpz/__init__:266:ezpz] Setting logging level to 'CRITICAL' on all othersn\n\n\n\n\nfrom transformers import AutoConfig, AutoModelForCausalLM, AutoTokenizer, pipeline\n\ninput_text = \"What is the ALCF?\"\ngenerator = pipeline(\"text-generation\", model=\"gpt2\")\n\npipe = pipeline(\"text-generation\", model=\"meta-llama/Llama-3.2-3B\")\noutput = generator(input_text, max_length=20, num_return_sequences=2)\n\n\n\n\n\nimport rich\n\nfor i, response in enumerate([i[\"generated_text\"] for i in output]):\n    # print(f\"Response {i}:\\n\\t{' '.join(response.split('\\n'))}\")\n    # rich.print(f\"Response {i}:\\n\\t{' '.join(response.split('\\n'))}\")\n    print(f\"Response {i}:\\n\\t{' '.join(response.split('\\n'))}\")\n# print(\"\\n\".join([f\"Response {i}: {c}\"] for i, c in enumerate(outputs)))\n\nResponse 0:\n        What is the ALCF?  The ALCF is a process to determine the level of calcium contained in the blood. This \nlevel is determined by measuring the amount of calcium present in the blood:  The amount of calcium present in the \nblood is measured in milligrams per deciliter (mg/dL) or milliliters per milliliter.  (mg/dL) or milliliters per \nmilliliter. The number of milliliters per milliliter is determined by calculating the square root of the number of \nmilliliters per milliliter.  is determined by calculating the square root of the number of milliliters per \nmilliliter. The number of milliliters per milliliter is determined by calculating the square root of the number of \nmilliliters per milliliter. The amount of calcium in the blood is measured in milligrams per liter (mg/dL) or \nmilliliters per liter.  is measured in milligrams per liter (mg/dL) or milliliters per liter. The number of \nmilliliters per milliliter is determined by calculating the square root of the number of milliliters per \nmilliliter. The amount of calcium in the blood is measured in milligrams per\n\n\n\nResponse 1:\n        What is the ALCF?  The ALCF is intended to help prevent a car's failure by preventing mechanical failure \nand by preventing excessive power loss.  The ALCF is developed by the ALCF Technology Division of the UCI, and the \nALCF is currently used by the FIA.  How much does the ALCF cost?  The ALCF costs ‚Ç¨90,000.  How much does the ALCF \nservice an entire season?  The ALCF costs ‚Ç¨50,000.  How much does the ALCF run in a race?  The ALCF runs in a race.\nWhat is the ALCF's fuel capacity?  The ALCF's fuel capacity is measured in BTUs.  What is the ALCF's road capacity?\nThe ALCF's road capacity is measured in BTUs.  The ALCF's fuel efficiency will vary depending on the type of car.  \nWhat is the ALCF's fuel economy?  The ALCF's fuel economy will vary depending on the type of car.  What is the \nALCF's fuel efficiency rating?  The ALCF's fuel efficiency",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#whats-going-on-under-the-hood",
    "href": "02-llms/01-hands-on-llms/index.html#whats-going-on-under-the-hood",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "What‚Äôs going on under the hood?",
    "text": "What‚Äôs going on under the hood?\nThere are two components that are ‚Äúblack-boxes‚Äù here:\n\nThe method for tokenization\nThe model that generates novel text.",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#tokenization-and-embedding-of-sequential-data",
    "href": "02-llms/01-hands-on-llms/index.html#tokenization-and-embedding-of-sequential-data",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Tokenization and embedding of sequential data",
    "text": "Tokenization and embedding of sequential data\nHumans can inherently understand language data because they previously learned phonetic sounds.\nMachines don‚Äôt have phonetic knowledge so they need to be told how to break text into standard units to process it.\nThey use a system called ‚Äútokenization‚Äù, where sequences of text are broken into smaller parts, or ‚Äútokens‚Äù, and then fed as input.\n\n\n\n\n\n\nFigure¬†7\n\n\n\nTokenization is a data preprocessing step which transforms the raw text data into a format suitable for machine learning models. Tokenizers break down raw text into smaller units called tokens. These tokens are what is fed into the language models. Based on the type and configuration of the tokenizer, these tokens can be words, subwords, or characters.\nTypes of tokenizers:\n\nCharacter Tokenizers: Split text into individual characters.\nWord Tokenizers: Split text into words based on whitespace or punctuation.\nSubword Tokenizers: Split text into subword units, such as morphemes or character n-grams. Common subword tokenization algorithms include:\n\nByte-Pair Encoding (BPE),\nSentencePiece,\nWordPiece.\n\n\n\n\n\n\n\n\nFigure¬†8\n\n\n\nnlpiation\n\nExample of tokenization\nLet‚Äôs look at an example of tokenization using byte-pair encoding.\n\nfrom transformers import AutoTokenizer\n\ndef tokenization_summary(tokenizer, sequence):\n    # get the vocabulary\n    vocab = tokenizer.vocab\n    # Number of entries to print\n    n = 10\n    # print subset of the vocabulary\n    print(\"Subset of tokenizer.vocab:\")\n    for i, (token, index) in enumerate(tokenizer.vocab.items()):\n        print(f\"{token}: {index}\")\n        if i &gt;= n - 1:\n            break\n    print(f\"Vocab size of the tokenizer = {len(vocab)}\")\n    print(\"------------------------------------------\")\n    # .tokenize chunks the existing sequence into different tokens based on the rules and vocab of the tokenizer.\n    tokens = tokenizer.tokenize(sequence)\n    print(f\"Tokens : {tokens}\")\n    print(\"------------------------------------------\")\n\n    # .convert_tokens_to_ids or .encode or .tokenize converts the tokens to their corresponding numerical representation.\n    #  .convert_tokens_to_ids has a 1-1 mapping between tokens and numerical representation\n    # ids = tokenizer.convert_tokens_to_ids(tokens)\n    # print(\"encoded Ids: \", ids)\n\n    # .encode also adds additional information like Start of sequence tokens and End of sequene\n    print(f\"tokenized sequence : {tokenizer.encode(sequence)}\")\n\n    # .tokenizer has additional information about attention_mask.\n    # encode = tokenizer(sequence)\n    # print(\"Encode sequence : \", encode)\n    # print(\"------------------------------------------\")\n\n    # .decode decodes the ids to raw text\n    ids = tokenizer.convert_tokens_to_ids(tokens)\n    decode = tokenizer.decode(ids)\n    print(f\"Decode sequence {decode}\")\n\n\ntokenizer_1 = AutoTokenizer.from_pretrained(\n    \"gpt2\"\n)  # GPT-2 uses \"Byte-Pair Encoding (BPE)\"\n\nsequence = \"Counselor, please adjust your Zoom filter to appear as a human, rather than as a cat\"\n\ntokenization_summary(tokenizer_1, sequence)\n\nSubset of tokenizer.vocab:\n\n\n\nƒ†Festival: 11117\n\n\n\nƒ†subscribers: 18327\n\n\n\nƒ†unused: 21958\n\n\n\n√ì: 143\n\n\n\nouble: 15270\n\n\n\nAPTER: 29485\n\n\n\nƒ†Mining: 29269\n\n\n\nƒ†Lip: 24701\n\n\n\nƒ†Wrestle: 41137\n\n\n\nƒü: 219\n\n\n\nVocab size of the tokenizer = 50257\n\n\n\n------------------------------------------\n\n\n\nTokens : ['Coun', 'sel', 'or', ',', 'ƒ†please', 'ƒ†adjust', 'ƒ†your', 'ƒ†Zoom', 'ƒ†filter', 'ƒ†to', 'ƒ†appear', 'ƒ†as', \n'ƒ†a', 'ƒ†human', ',', 'ƒ†rather', 'ƒ†than', 'ƒ†as', 'ƒ†a', 'ƒ†cat']\n\n\n\n------------------------------------------\n\n\n\ntokenized sequence : [31053, 741, 273, 11, 3387, 4532, 534, 40305, 8106, 284, 1656, 355, 257, 1692, 11, 2138, 621, \n355, 257, 3797]\n\n\n\nDecode sequence Counselor, please adjust your Zoom filter to appear as a human, rather than as a cat\n\n\n\n\n\nToken embedding:\nWords are turned into vectors based on their location within a vocabulary.\nThe strategy of choice for learning language structure from tokenized text is to find a clever way to map each token into a moderate-dimension vector space, adjusting the mapping so that\nSimilar, or associated tokens take up residence nearby each other, and different regions of the space correspond to different position in the sequence. Such a mapping from token ID to a point in a vector space is called a token embedding. The dimension of the vector space is often high (e.g.¬†1024-dimensional), but much smaller than the vocabulary size (30,000‚Äì500,000).\nVarious approaches have been attempted for generating such embeddings, including static algorithms that operate on a corpus of tokenized data as preprocessors for NLP tasks. Transformers, however, adjust their embeddings during training.",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#transformer-model-architecture",
    "href": "02-llms/01-hands-on-llms/index.html#transformer-model-architecture",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Transformer Model Architecture",
    "text": "Transformer Model Architecture\nNow let‚Äôs look at the base elements that make up a Transformer by dissecting the popular GPT2 model\n\nfrom transformers import GPT2LMHeadModel, GPT2Tokenizer\n\nmodel = GPT2LMHeadModel.from_pretrained(\"gpt2\")\nprint(model)\n\nGPT2LMHeadModel(\n  (transformer): GPT2Model(\n    (wte): Embedding(50257, 768)\n    (wpe): Embedding(1024, 768)\n    (drop): Dropout(p=0.1, inplace=False)\n    (h): ModuleList(\n      (0-11): 12 x GPT2Block(\n        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n        (attn): GPT2Attention(\n          (c_attn): Conv1D(nf=2304, nx=768)\n          (c_proj): Conv1D(nf=768, nx=768)\n          (attn_dropout): Dropout(p=0.1, inplace=False)\n          (resid_dropout): Dropout(p=0.1, inplace=False)\n        )\n        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n        (mlp): GPT2MLP(\n          (c_fc): Conv1D(nf=3072, nx=768)\n          (c_proj): Conv1D(nf=768, nx=3072)\n          (act): NewGELUActivation()\n          (dropout): Dropout(p=0.1, inplace=False)\n        )\n      )\n    )\n    (ln_f): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n  )\n  (lm_head): Linear(in_features=768, out_features=50257, bias=False)\n)\n\n\n\nGPT2 is an example of a Transformer Decoder which is used to generate novel text.\nDecoder models use only the decoder of a Transformer model. At each stage, for a given word the attention layers can only access the words positioned before it in the sentence. These models are often called auto-regressive models. The pretraining of decoder models usually revolves around predicting the next word in the sentence.\nThese models are best suited for tasks involving text generation.\nThe architecture of GPT-2 is inspired by the paper: ‚ÄúGenerating Wikipedia by Summarizing Long Sequences‚Äù which is another arrangement of the transformer block that can do language modeling. This model threw away the encoder and thus is known as the ‚ÄúTransformer-Decoder‚Äù.\n\n\n\nIllustrated GPT2\nKey components of the transformer architecture include:\n\nInput Embeddings: Word embedding or word vectors help us represent words or text as a numeric vector where words with similar meanings have the similar representation.\nPositional Encoding: Injects information about the position of words in a sequence, helping the model understand word order.\nSelf-Attention Mechanism: Allows the model to weigh the importance of different words in a sentence, enabling it to effectively capture contextual information.\nFeedforward Neural Networks: Process information from self-attention layers to generate output for each word/token.\nLayer Normalization and Residual Connections: Aid in stabilizing training and mitigating the vanishing gradient problem.\nTransformer Blocks: Comprised of multiple layers of self-attention and feedforward neural networks, stacked together to form the model.\n\n\nAttention mechanisms\nSince attention mechanisms are arguably the most powerful component of the Transformer, let‚Äôs discuss this in a little more detail.\nSuppose the following sentence is an input sentence we want to translate using an LLM:\n‚ÄùThe animal didn't cross the street because it was too tired‚Äù\nTo understand a full sentence, the model needs to understand what each word means in relation to other words.\nFor example, when we read the sentence: ‚ÄùThe animal didn't cross the street because it was too tired‚Äù we know intuitively that the word \"it\" refers to \"animal\", the state for \"it\" is \"tired\", and the associated action is \"didn't cross\".\nHowever, the model needs a way to learn all of this information in a simple yet generalizable way. What makes Transformers particularly powerful compared to earlier sequential architectures is how it encodes context with the self-attention mechanism.\nAs the model processes each word in the input sequence, attention looks at other positions in the input sequence for clues to a better understanding for this word.\n\n\n\nThe Illustrated Transformer\n\nMulti-head attention\nIn practice, multiple attention heads are used simultaneously.\nThis: * Expands the model‚Äôs ability to focus on different positions. * Prevents the attention to be dominated by the word itself.\n\n\nLet‚Äôs see multi-head attention mechanisms in action!\nWe are going to use the powerful visualization tool bertviz, which allows an interactive experience of the attention mechanisms. Normally these mechanisms are abstracted away but this will allow us to inspect our model in more detail.\n\n# !pip install bertviz\n\nLet‚Äôs load in the model, GPT2 and look at the attention mechanisms.\nHint‚Ä¶ click on the different blocks in the visualization to see the attention\n\nfrom bertviz import model_view\nfrom transformers import AutoModel, AutoModelForCausalLM, AutoTokenizer, utils\n\nutils.logging.set_verbosity_error()  # Suppress standard warnings\n\nmodel_name = \"openai-community/gpt2\"\ninput_text = \"No, I am your father\"\nmodel = AutoModelForCausalLM.from_pretrained(model_name, output_attentions=True)\ntokenizer = AutoTokenizer.from_pretrained(model_name)\ninputs = tokenizer.encode(input_text, return_tensors=\"pt\")  # Tokenize input text\noutputs = model(inputs)  # Run model\nattention = outputs[-1]  # Retrieve attention from model outputs\ntokens = tokenizer.convert_ids_to_tokens(\n    inputs[0]\n)  # Convert input ids to token strings\nmodel_view(attention, tokens)  # Display model view",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#pipeline-using-huggingface",
    "href": "02-llms/01-hands-on-llms/index.html#pipeline-using-huggingface",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Pipeline using HuggingFace",
    "text": "Pipeline using HuggingFace\nNow, let‚Äôs see a practical application of LLMs using a HuggingFace pipeline for classification.\nThis involves a few steps including: 1. Setting up a prompt 2. Loading in a pretrained model 3. Loading in the tokenizer and tokenizing input text 4. Performing model inference 5. Interpreting inference output\n\n# STEP 0 : Installations and imports\nimport torch\nimport torch.nn.functional as F\nfrom transformers import AutoConfig, AutoModelForSequenceClassification, AutoTokenizer\n\n\n1. Setting up a prompt\nA ‚Äúprompt‚Äù refers to a specific input or query provided to a language model. They guide the text processing and generation by providing the context for the model to generate coherent and relevant text based on the given input.\nThe choice and structure of the prompt depends on the specific task, the context and desired output. Prompts can be ‚Äúdiscrete‚Äù or ‚Äúinstructive‚Äù where they are explicit instructions or questions directed to the language model. They can also be more nuanced by more providing suggestions, directions and contexts to the model.\nWe will use very simple prompts in this tutorial section, but we will learn more about prompt engineering and how it helps in optimizing the performance of the model for a given use case in the following tutorials.\n\n# STEP 1 : Set up the prompt\ninput_text = \"The panoramic view of the ocean was breathtaking.\"\n\n\n\n2. Loading Pretrained Models\nThe AutoModelForSequenceClassification from_pretrained() method instantiates a sequence classification model.\nRefer to https://huggingface.co/transformers/v3.0.2/model_doc/auto.html#automodels for the list of model classes supported.\n‚Äúfrom_pretrained‚Äù method downloads the pre-trained weights from the Hugging Face Model Hub or the specified URL if the model is not already cached locally. It then loads the weights into the instantiated model, initializing the model parameters with the pre-trained values.\nThe model cache contains:\n\nmodel configuration (config.json)\npretrained model weights (model.safetensors)\ntokenizer information (tokenizer.json, vocab.json, merges.txt, tokenizer.model)\n\n\n# STEP 2 : Load the pretrained model.\nmodel_name = \"distilbert-base-uncased-finetuned-sst-2-english\"\nmodel = AutoModelForSequenceClassification.from_pretrained(model_name)\nconfig = AutoConfig.from_pretrained(model_name)\nprint(config)\n\nDistilBertConfig {\n  \"activation\": \"gelu\",\n  \"architectures\": [\n    \"DistilBertForSequenceClassification\"\n  ],\n  \"attention_dropout\": 0.1,\n  \"dim\": 768,\n  \"dropout\": 0.1,\n  \"finetuning_task\": \"sst-2\",\n  \"hidden_dim\": 3072,\n  \"id2label\": {\n    \"0\": \"NEGATIVE\",\n    \"1\": \"POSITIVE\"\n  },\n  \"initializer_range\": 0.02,\n  \"label2id\": {\n    \"NEGATIVE\": 0,\n    \"POSITIVE\": 1\n  },\n  \"max_position_embeddings\": 512,\n  \"model_type\": \"distilbert\",\n  \"n_heads\": 12,\n  \"n_layers\": 6,\n  \"output_past\": true,\n  \"pad_token_id\": 0,\n  \"qa_dropout\": 0.1,\n  \"seq_classif_dropout\": 0.2,\n  \"sinusoidal_pos_embds\": false,\n  \"tie_weights_\": true,\n  \"transformers_version\": \"4.53.3\",\n  \"vocab_size\": 30522\n}\n\n\n\n\n\n\n3. Loading in the tokenizer and tokenizing input text\nHere, we load in a pretrained tokenizer associated with this model.\n\n# STEP 3 : Load the tokenizer and tokenize the input text\ntokenizer = AutoTokenizer.from_pretrained(model_name)\ninput_ids = tokenizer(input_text, return_tensors=\"pt\")[\"input_ids\"]\nprint(input_ids)\n\ntensor([[  101,  1996,  6090,  6525,  7712,  3193,  1997,  1996,  4153,  2001,\n          3052, 17904,  1012,   102]])\n\n\n\n\n\n4. Performing inference and interpreting\nHere, we: * load data into the model, * perform inference to obtain logits, * Convert logits into probabilities * According to probabilities assign label\nThe end result is that we can predict whether the input phrase is positive or negative.\n\n# STEP 5 : Perform inference\noutputs = model(input_ids)\nresult = outputs.logits\nprint(result)\n\n# STEP 6 :  Interpret the output.\nprobabilities = F.softmax(result, dim=-1)\nprint(probabilities)\npredicted_class = torch.argmax(probabilities, dim=-1).item()\nlabels = [\"NEGATIVE\", \"POSITIVE\"]\nout_string = (\n    \"[{'label': '\"\n    + str(labels[predicted_class])\n    + \"', 'score': \"\n    + str(probabilities[0][predicted_class].tolist())\n    + \"}]\"\n)\nprint(out_string)\n\ntensor([[-4.2767,  4.5486]], grad_fn=&lt;AddmmBackward0&gt;)\n\n\n\ntensor([[1.4695e-04, 9.9985e-01]], grad_fn=&lt;SoftmaxBackward0&gt;)\n\n\n\n[{'label': 'POSITIVE', 'score': 0.9998530149459839}]\n\n\n\n\n\nSaving and loading models\nModel can be saved and loaded to and from a local model directory.\n\nfrom transformers import AutoModel, AutoModelForCausalLM\n\n# Instantiate and train or fine-tune a model\nmodel = AutoModelForCausalLM.from_pretrained(\"bert-base-uncased\")\n\n# Train or fine-tune the model...\n\n# Save the model to a local directory\ndirectory = \"my_local_model\"\nmodel.save_pretrained(directory)\n\n# Load a pre-trained model from a local directory\nloaded_model = AutoModel.from_pretrained(directory)\n\n[2025-08-01 17:22:13,442] [INFO] [real_accelerator.py:254:get_accelerator] Setting ds_accelerator to mps (auto detect)\n\n\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n    - Avoid using `tokenizers` before the fork if possible\n    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nW0801 17:22:13.658000 89497 torch/distributed/elastic/multiprocessing/redirects.py:29] NOTE: Redirects are currently not supported in Windows or MacOs.\n\n\n[2025-08-01 17:22:14,230] [INFO] [logging.py:107:log_dist] [Rank -1] [TorchCheckpointEngine] Initialized with serialization = False",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#model-hub",
    "href": "02-llms/01-hands-on-llms/index.html#model-hub",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Model Hub",
    "text": "Model Hub\nThe Model Hub is where the members of the Hugging Face community can host all of their model checkpoints for simple storage, discovery, and sharing.\n\nDownload pre-trained models with the huggingface_hub client library, with Transformers for fine-tuning.\nMake use of Inference API to use models in production settings.\nYou can filter for different models for different tasks, frameworks used, datasets used, and many more.\nYou can select any model, that will show the model card.\nModel card contains information of the model, including the description, usage, limitations etc. Some models also have inference API‚Äôs that can be used directly.\n\nModel Hub Link : https://huggingface.co/docs/hub/en/models-the-hub\nExample of a model card : https://huggingface.co/bert-base-uncased/tree/main",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#recommended-reading",
    "href": "02-llms/01-hands-on-llms/index.html#recommended-reading",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Recommended reading",
    "text": "Recommended reading\n\n‚ÄúThe Illustrated Transformer‚Äù by Jay Alammar\n‚ÄúVisualizing A Neural Machine Translation Model (Mechanics of Seq2seq Models With Attention)‚Äù by Jay Alammar\n‚ÄúThe Illustrated GPT-2 (Visualizing Transformer Language Models)‚Äù\n‚ÄúA gentle introduction to positional encoding‚Äù\n‚ÄúLLM Tutorial Workshop (Argonne National Laboratory)‚Äù\n‚ÄúLLM Tutorial Workshop Part 2 (Argonne National Laboratory)‚Äù",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/01-hands-on-llms/index.html#homework",
    "href": "02-llms/01-hands-on-llms/index.html#homework",
    "title": "Hands On: Introduction to Large Language Models (LLMs)",
    "section": "Homework",
    "text": "Homework\n\nLoad in a generative model using the HuggingFace pipeline and generate text using a batch of prompts.\n\n\nPlay with generative parameters such as temperature, max_new_tokens, and the model itself and explain the effect on the legibility of the model response. Try at least 4 different parameter/model combinations.\nModels that can be used include:\n\ngoogle/gemma-2-2b-it\nmicrosoft/Phi-3-mini-4k-instruct\nmeta-llama/Llama-3.2-1B\nAny model from this list: Text-generation models\ngpt2 if having trouble loading these models in\n\nThis guide should help! Text-generation strategies\n\n\nLoad in 2 models of different parameter size (e.g.¬†GPT2, meta-llama/Llama-2-7b-chat-hf, or distilbert/distilgpt2) and analyze the BertViz for each. How does the attention mechanisms change depending on model size?",
    "crumbs": [
      "[02] Large Language Models",
      "[1] Hands-on LLMs"
    ]
  },
  {
    "objectID": "02-llms/index.html#contents",
    "href": "02-llms/index.html#contents",
    "title": "Introduction to Large Language Models (LLMs)",
    "section": "Contents",
    "text": "Contents\n\nüìÇ 02-llms/\n\n00-intro-to-llms\n01-hands-on-llms\n02-prompt-engineering\n05-advanced-llms\n06-parallel-training\n07-shakespeare-example\n08-shakespeare-example-colab\n09-rag-tutorial\n10-evaluating-llms",
    "crumbs": [
      "[02] Large Language Models"
    ]
  },
  {
    "objectID": "02-llms/index.html#overview",
    "href": "02-llms/index.html#overview",
    "title": "Introduction to Large Language Models (LLMs)",
    "section": "Overview",
    "text": "Overview\nInspiration from the blog posts ‚ÄúThe Illustrated Transformer‚Äù and ‚ÄúThe Illustrated GPT2‚Äù by Jay Alammar, highly recommended reading.\nThis tutorial covers the some fundamental concepts necessary to to study of large language models (LLMs).\n\nTopics\n\nScientific applications for language models\nGeneral overview of Transformers\nTokenization\nModel Architecture\nPipeline using HuggingFace\nModel loading",
    "crumbs": [
      "[02] Large Language Models"
    ]
  },
  {
    "objectID": "02-llms/index.html#natural-language-processing-nlp",
    "href": "02-llms/index.html#natural-language-processing-nlp",
    "title": "Introduction to Large Language Models (LLMs)",
    "section": "Natural Language Processing (NLP)",
    "text": "Natural Language Processing (NLP)\nLarge Language Models (LLMs) are a subset of Natural Language Processing (NLP) techniques that focus on understanding and generating human language. NLP is a field of linguistics / artificial intelligence that enables computers to interpret, understand, and respond to human language in a way that is both meaningful and useful.\nThe following is a list of common NLP tasks, with some examples:\n\nClassifying whole sentences: Getting the sentiment of a review, detecting if an email is spam, determining if a sentence is gramatically correct or whether two sentences are logically related or not.\nClassifying each word in a sentence: Identifying the grammatical components of a sentence (noun, verb, adjectvie, ‚Ä¶), or the named entities (person, location, organization, ‚Ä¶).\nGenerating Text: Completing a prompt with auto-generated text, filling in the blanks in a text with masked words\nExtracting an answer from a text: Given a question and a context, extracting the answer to the question based on the information provided in the context.\nGenerating a new sentence from an input text: Translating a text into another language, summarizing a text",
    "crumbs": [
      "[02] Large Language Models"
    ]
  },
  {
    "objectID": "02-llms/index.html#large-language-models-llms",
    "href": "02-llms/index.html#large-language-models-llms",
    "title": "Introduction to Large Language Models (LLMs)",
    "section": "Large Language Models (LLMs)",
    "text": "Large Language Models (LLMs)\n\nA large lanuage model (LLM) is an AI model trained on massive amounts of text data that can understand and generate human-like text, recognize patterns in language, and perform a wide variety of language tasks without task-specific training.\nThey represent a significant advancement in the field of natural language processing (NLP) (Face 2022).\n\n\n\n\n\n\n\nWarningüöß Warning\n\n\n\n\n\nWhile LLMs are are able to generate (what appears to be) human-like text, they are not sentient, and do not have an understanding of the world in the way that humans do. They are trained to predict the next word in a sentence based on the context of the words that come before it, and can generate text that is coherent and relevant to the input they receive. However, they do not have a true understanding of the meaning of the words they generate, and can sometimes produce text that is nonsensical or irrelevant to the input.\n\n\n\nEven with the advances in LLMs, many fundamental challenges remain. These include understanding ambiguity, cultural context, sarcasm and humor. LLMs address these challenges through massive training on diverse datasets, but still often fall short of human-level understanding in many complex scenarios.",
    "crumbs": [
      "[02] Large Language Models"
    ]
  },
  {
    "objectID": "02-llms/index.html#references",
    "href": "02-llms/index.html#references",
    "title": "Introduction to Large Language Models (LLMs)",
    "section": "References",
    "text": "References\nI strongly recommend reading:\n\n‚ÄúThe Illustrated Transformer‚Äù by Jay AlammarAlammar also has a useful post dedicated more generally to Sequence-to-Sequence modeling\nLLM Course by ü§ó HuggingFace\n‚ÄúVisualizing A Neural Machine Translation Model (Mechanics of Seq2seq Models With Attention), which illustrates the attention mechanism in the context of a more generic language translation model.\nGPT in 60 Lines of NumPy",
    "crumbs": [
      "[02] Large Language Models"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#getting-started",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#getting-started",
    "title": "Intro to NNs: MNIST",
    "section": "Getting Started",
    "text": "Getting Started\nThis tutorial will serve as a gentle introduction to neural networks and deep learning through a hands-on classification problem using the MNIST dataset.\nIn particular, we will introduce neural networks and how to train and improve their learning capabilities. We will use the PyTorch Python library.\nThe MNIST dataset contains thousands of examples of handwritten numbers, with each digit labeled 0-9.\n\n\n\n\n\n\nFigure¬†1: MNIST sample\n\n\n\n\n%load_ext autoreload\n%autoreload 2\nimport matplotlib_inline.backend_inline\nmatplotlib_inline.backend_inline.set_matplotlib_formats('retina', 'svg', 'png')\nimport os\nos.environ[\"TRUECOLOR\"] = \"1\"\nimport matplotlib as mpl\n# mpl.rcParams['figure.dpi'] = 400\n\n\nimport ambivalent\nimport ezpz\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# console = ezpz.log.get_console()\n# logger = ezpz.get_logger('mnist')\n\nplt.style.use(ambivalent.STYLES[\"ambivalent\"])\nsns.set_context(\"notebook\")\nplt.rcParams[\"figure.figsize\"] = [6.4, 4.8]\n\n[2025-08-04 23:22:01,582514][I][ezpz/__init__:265:ezpz] Setting logging level to 'INFO' on 'RANK == 0'\n\n\n\n[2025-08-04 23:22:01,584493][I][ezpz/__init__:266:ezpz] Setting logging level to 'CRITICAL' on all others 'RANK != 0'\n\n\n\n\n# %matplotlib inline\n\nimport time\n\nimport matplotlib.pyplot as plt\nimport numpy\nimport torch\nimport torchvision\nfrom torch import nn",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#the-mnist-dataset",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#the-mnist-dataset",
    "title": "Intro to NNs: MNIST",
    "section": "The MNIST dataset",
    "text": "The MNIST dataset\nWe will now download the dataset that contains handwritten digits. MNIST is a popular dataset, so we can download it via the PyTorch library.\nNote:\n\nx is for the inputs (images of handwritten digits)\ny is for the labels or outputs (digits 0-9)\nWe are given ‚Äútraining‚Äù and ‚Äútest‚Äù datasets.\n\nTraining datasets are used to fit the model.\nTest datasets are saved until the end, when we are satisfied with our model, to estimate how well our model generalizes to new data.\n\n\nNote that downloading it the first time might take some time.\nThe data is split as follows:\n\n60,000 training examples, 10,000 test examples\ninputs: 1 x 28 x 28 pixels\noutputs (labels): one integer per example\n\n\ntraining_data = torchvision.datasets.MNIST(\n    root=\"data\", train=True, download=True, transform=torchvision.transforms.ToTensor()\n)\n\ntest_data = torchvision.datasets.MNIST(\n    root=\"data\", train=False, download=True, transform=torchvision.transforms.ToTensor()\n)\n\n\ntrain_size = int(0.8 * len(training_data))  # 80% for training\nval_size = len(training_data) - train_size  # Remaining 20% for validation\ntraining_data, validation_data = torch.utils.data.random_split(\n    training_data, [train_size, val_size], generator=torch.Generator().manual_seed(55)\n)\n\n\nprint(\n    \" \".join(\n        [\n            f\"MNIST data loaded:\",\n            f\"train={len(training_data)} examples\",\n            f\"validation={len(validation_data)} examples\",\n            f\"test={len(test_data)} examples\",\n            f\"input shape={training_data[0][0].shape}\",\n        ]\n    )\n)\n# print(f'Input shape', training_data[0][0].shape)\n\nMNIST data loaded: train=48000 examples validation=12000 examples test=10000 examples input shape=torch.Size([1, 28, 28])\n\n\nLet‚Äôs take a closer look. Here are the first 10 training digits:\n\npltsize = 1\n# plt.figure(figsize=(10*pltsize, pltsize))\n\nfor i in range(10):\n    plt.subplot(1, 10, i + 1)\n    plt.axis(\"off\")\n    # x, y = training_data[i]\n    # plt.imshow(x.reshape(28, 28), cmap=\"gray\")\n    # x[0] is the image, x[1] is the label\n    plt.imshow(numpy.reshape(training_data[i][0], (28, 28)), cmap=\"gray\")\n    plt.title(f\"{training_data[i][1]}\")\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(15, 15))\nsns.heatmap(training_data[30][0].reshape((28, 28)), annot=True, cmap=\"binary\")",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#generalities",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#generalities",
    "title": "Intro to NNs: MNIST",
    "section": "Generalities:",
    "text": "Generalities:\nTo train our classifier, we need (besides the data):\n\nA model that depend on parameters \\mathbf{\\theta}. Here we are going to use neural networks.\nA loss function J(\\mathbf{\\theta}) to measure the capabilities of the model.\nAn optimization method.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#linear-model",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#linear-model",
    "title": "Intro to NNs: MNIST",
    "section": "Linear Model",
    "text": "Linear Model\nLet‚Äôs begin with a simple linear model: linear regression, like last week.\nWe add one complication: each example is a vector (flattened image), so the ‚Äúslope‚Äù multiplication becomes a dot product. If the target output is a vector as well, then the multiplication becomes matrix multiplication.\nNote, like before, we consider multiple examples at once, adding another dimension to the input.\n\n\n\n\n\n\nFigure¬†2: Fully connected linear net\n\n\n\nThe linear layers in PyTorch perform a basic xW + b.\nThese ‚Äúfully connected‚Äù layers connect each input to each output with some weight parameter.\nWe wouldn‚Äôt expect a simple linear model f(x) = xW+b directly outputting the class label and minimizing mean squared error to work well - the model would output labels like 3.55 and 2.11 instead of skipping to integers.\nWe now need:\n\nA loss function J(\\theta) where \\theta is the list of parameters (here W and b). Last week, we used mean squared error (MSE), but this week let‚Äôs make two changes that make more sense for classification:\n\nChange the output to be a length-10 vector of class probabilities (0 to 1, adding to 1).\nCross entropy as the loss function, which is typical for classification. You can read more here.\n\nAn optimization method or optimizer such as the stochastic gradient descent (sgd) method, the Adam optimizer, RMSprop, Adagrad etc. Let‚Äôs start with stochastic gradient descent (sgd), like last week. For far more information about more advanced optimizers than basic SGD, with some cool animations, see https://ruder.io/optimizing-gradient-descent/ or https://distill.pub/2017/momentum/.\nA learning rate. As we learned last week, the learning rate controls how far we move during each step.\n\n\nclass LinearClassifier(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # First, we need to convert the input image to a vector by using\n        # nn.Flatten(). For MNIST, it means the second dimension 28*28 becomes 784.\n        self.flatten = nn.Flatten()\n        # Here, we add a fully connected (\"dense\") layer that has 28 x 28 = 784 input nodes\n        # (one for each pixel in the input image) and 10 output nodes (for probabilities of each class).\n        self.layer_1 = nn.Linear(28 * 28, 10)\n\n    def forward(self, x):\n        x = self.flatten(x)\n        x = self.layer_1(x)\n        return x\n\n\nlinear_model = LinearClassifier()\nprint(linear_model)\n\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(linear_model.parameters(), lr=0.05)\n\nLinearClassifier(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (layer_1): Linear(in_features=784, out_features=10, bias=True)\n)",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#learning",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#learning",
    "title": "Intro to NNs: MNIST",
    "section": "Learning",
    "text": "Learning\nNow we are ready to train our first model.\nA training step is comprised of:\n\nA forward pass: the input is passed through the network\nBackpropagation: A backward pass to compute the gradient \\frac{\\partial J}{\\partial \\mathbf{W}} of the loss function with respect to the parameters of the network.\nWeight updates \\mathbf{W} = \\mathbf{W} - \\alpha \\frac{\\partial J}{\\partial \\mathbf{W}} where \\alpha is the learning rate.\n\nHow many steps do we take?\n\nThe batch size corresponds to the number of training examples in one pass (forward + backward).\n\nA smaller batch size allows the model to learn from individual examples but takes longer to train.\nA larger batch size requires fewer steps but may result in the model not capturing the nuances in the data.\n\nThe higher the batch size, the more memory you will require.\nAn epoch means one pass through the whole training data (looping over the batches). Using few epochs can lead to underfitting and using too many can lead to overfitting.\nThe choice of batch size and learning rate are important for performance, generalization and accuracy in deep learning.\n\n\nbatch_size = 128\n\n# The dataloader makes our dataset iterable\ntrain_dataloader = torch.utils.data.DataLoader(training_data, batch_size=batch_size)\nval_dataloader = torch.utils.data.DataLoader(validation_data, batch_size=batch_size)\n\n\ndef train_one_epoch(dataloader, model, loss_fn, optimizer):\n    model.train()\n    for batch, (X, y) in enumerate(dataloader):\n        # forward pass\n        pred = model(X)\n        loss = loss_fn(pred, y)\n        # backward pass calculates gradients\n        loss.backward()\n        # take one step with these gradients\n        optimizer.step()\n        # resets the gradients\n        optimizer.zero_grad()\n\n\ndef evaluate(dataloader, model, loss_fn):\n    # Set the model to evaluation mode - some NN pieces behave differently during training\n    # Unnecessary in this situation but added for best practices\n    model.eval()\n    size = len(dataloader.dataset)\n    num_batches = len(dataloader)\n    loss, correct = 0, 0\n\n    # We can save computation and memory by not calculating gradients here - we aren't optimizing\n    with torch.no_grad():\n        # loop over all of the batches\n        for X, y in dataloader:\n            pred = model(X)\n            loss += loss_fn(pred, y).item()\n            # how many are correct in this batch? Tracking for accuracy\n            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n\n    loss /= num_batches\n    correct /= size\n\n    accuracy = 100 * correct\n    return accuracy, loss\n\n\n%%time\n\nepochs = 5\ntrain_acc_all = []\nval_acc_all = []\nfor j in range(epochs):\n    train_one_epoch(train_dataloader, linear_model, loss_fn, optimizer)\n\n    # checking on the training loss and accuracy once per epoch\n    acc, loss = evaluate(train_dataloader, linear_model, loss_fn)\n    train_acc_all.append(acc)\n    print(f\"Epoch {j}: training loss: {loss}, accuracy: {acc}\")\n\n    # checking on the validation loss and accuracy once per epoch\n    val_acc, val_loss = evaluate(val_dataloader, linear_model, loss_fn)\n    val_acc_all.append(val_acc)\n    print(f\"Epoch {j}: val. loss: {val_loss}, val. accuracy: {val_acc}\")\n\nEpoch 0: training loss: 0.5018792031606039, accuracy: 87.63333333333333\nEpoch 0: val. loss: 0.49411888864446196, val. accuracy: 87.725\n1: training loss: 0.4217252082824707, accuracy: 89.01875\n\nEpoch 1: val. loss: 0.412469542089929, val. accuracy: 88.94166666666666\n2: training loss: 0.38779040312767027, accuracy: 89.6875666666666\n\nEpoch 2: val. loss: 0.37800481852064743, val. accuracy: 89.525666\n\n\n3: training loss: 0.3678283305168152, accuracy: 90.11458333333333\nEpoch 3: val. loss: 0.3578848899044889, val. accuracy: 89.9533333\n\n4: training loss: 0.3542445518175761, accuracy: 90.43541666666667\nEpoch 4: val. loss: 0.3443203260923954, val. accuracy: 90.28333333333333\nCPU times: user 10.8 s, sys: 868 ms, total: 11.7 s\nWall time: 11.3 s\n\n\n\nplt.figure()\nplt.plot(range(epochs), train_acc_all, label=\"Training Acc.\")\nplt.plot(range(epochs), val_acc_all, label=\"Validation Acc.\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\")\nplt.legend()\n\n\n\n\n\n\n\n\n\n# Visualize how the model is doing on the first 10 examples\npltsize = 1\nplt.figure(figsize=(10 * pltsize, pltsize))\nlinear_model.eval()\nbatch = next(iter(train_dataloader))\npredictions = linear_model(batch[0])\n\nfor i in range(10):\n    plt.subplot(1, 10, i + 1)\n    plt.axis(\"off\")\n    plt.imshow(batch[0][i, 0, :, :], cmap=\"gray\")\n    plt.title(\"%d\" % predictions[i, :].argmax())\n\n\n\n\n\n\n\n\nExercise: How can you improve the accuracy? Some things you might consider: increasing the number of epochs, changing the learning rate, etc.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#prediction",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#prediction",
    "title": "Intro to NNs: MNIST",
    "section": "Prediction",
    "text": "Prediction\nLet‚Äôs see how our model generalizes to the unseen test data.\n\n# For HW: cell to change batch size\n# create dataloader for test data\n# The dataloader makes our dataset iterable\n\nbatch_size_test = 256\ntest_dataloader = torch.utils.data.DataLoader(test_data, batch_size=batch_size_test)\n\n\nacc_test, loss_test = evaluate(test_dataloader, linear_model, loss_fn)\nprint(f\"Test loss: {loss_test}, test accuracy: {acc_test}\")\n# print(\"Test loss: %.4f, test accuracy: %.2f%%\" % (loss_test, acc_test))\n\nTest loss: 0.33246213272213937, test accuracy: 90.86999999999999\n\n\nWe can now take a closer look at the results.\nLet‚Äôs define a helper function to show the failure cases of our classifier.\n\ndef show_failures(model, dataloader, maxtoshow=10):\n    model.eval()\n    batch = next(iter(dataloader))\n    predictions = model(batch[0])\n\n    rounded = predictions.argmax(1)\n    errors = rounded != batch[1]\n    print(f\"Showing max {maxtoshow} first failures.\")\n    print(\"The predicted class is shown first and the correct class in parentheses.\")\n    ii = 0\n    plt.figure(figsize=(maxtoshow, 1))\n    for i in range(batch[0].shape[0]):\n        if ii &gt;= maxtoshow:\n            break\n        if errors[i]:\n            plt.subplot(1, maxtoshow, ii + 1)\n            plt.axis(\"off\")\n            plt.imshow(batch[0][i, 0, :, :], cmap=\"gray\")\n            plt.title(\"%d (%d)\" % (rounded[i], batch[1][i]))\n            ii = ii + 1\n\nHere are the first 10 images from the test data that this small model classified to a wrong class:\n\nshow_failures(linear_model, test_dataloader)\n\nShowing max 10 first failures.\nThe predicted class is shown first and the correct class in parentheses.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#multilayer-model",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#multilayer-model",
    "title": "Intro to NNs: MNIST",
    "section": "Multilayer Model",
    "text": "Multilayer Model\nOur linear model isn‚Äôt enough for high accuracy on this dataset. To improve the model, we often need to add more layers and nonlinearities.\n\n\n\n\n\n\nFigure¬†3: Shallow neural network\n\n\n\nThe output of this NN can be written as\n\n\\begin{equation}\n  \\hat{u}(x) = \\sigma_2(\\sigma_1(\\mathbf{x}\\mathbf{W}_1 + \\mathbf{b}_1)\\mathbf{W}_2 + \\mathbf{b}_2),\n\\end{equation}\n\nwhere \\mathbf{x} is the input, \\mathbf{W}_j are the weights of the neural network, \\sigma_j the (nonlinear) activation functions, and \\mathbf{b}_j its biases. The activation function introduces the nonlinearity and makes it possible to learn more complex tasks. Desirable properties in an activation function include being differentiable, bounded, and monotonic.\nImage source: PragatiBaheti\n\n\n\n\n\n\nFigure¬†4: Activation functions\n\n\n\nAdding more layers to obtain a deep neural network:\n\n\n\n\n\n\nFigure¬†5",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#important-things-to-know",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#important-things-to-know",
    "title": "Intro to NNs: MNIST",
    "section": "Important things to know",
    "text": "Important things to know\nDeep Neural networks can be overly flexible/complicated and ‚Äúoverfit‚Äù your data, just like fitting overly complicated polynomials:\n\n\n\n\n\n\nFigure¬†6: Bias-variance tradeoff\n\n\n\nVizualization wrt to the accuracy and loss (Image source: Baeldung):\n\n\n\n\n\n\nFigure¬†7: Visualization of accuracy and loss\n\n\n\nTo improve the generalization of our model on previously unseen data, we employ a technique known as regularization, which constrains our optimization problem in order to discourage complex models.\n\nDropout is the commonly used regularization technique. The Dropout layer randomly sets input units to 0 with a frequency of rate at each step during training time, which helps prevent overfitting.\nPenalizing the loss function by adding a term such as \\lambda ||\\mathbf{W}||^2 is alsp a commonly used regularization technique. This helps ‚Äúcontrol‚Äù the magnitude of the weights of the network.\n\n\nVanishing gradients\n\nGradients become small as they propagate backward through the layers.\n\n\nSquashing activation functions like sigmoid or tanh could cause this.\n\nExploding gradients\n\nGradients grow exponentially usually due to ‚Äúpoor‚Äù weight initialization.\n\n\nWe can now implement a deep network in PyTorch.\nnn.Dropout() performs the Dropout operation mentioned earlier:\n\n# For HW: cell to change activation\nclass NonlinearClassifier(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.flatten = nn.Flatten()\n        self.layers_stack = nn.Sequential(\n            nn.Linear(28 * 28, 50),\n            nn.ReLU(),\n            nn.Dropout(0.2),\n            nn.Linear(50, 50),\n            nn.ReLU(),\n            # nn.Dropout(0.2),\n            nn.Linear(50, 50),\n            nn.ReLU(),\n            # nn.Dropout(0.2),\n            nn.Linear(50, 10),\n        )\n\n    def forward(self, x):\n        x = self.flatten(x)\n        x = self.layers_stack(x)\n\n        return x\n\n\n#### For HW: cell to change learning rate\nnonlinear_model = NonlinearClassifier()\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(nonlinear_model.parameters(), lr=0.05)\n\n\n%%time\n\nepochs = 5\ntrain_acc_all = []\nval_acc_all = []\nfor j in range(epochs):\n    train_one_epoch(train_dataloader, nonlinear_model, loss_fn, optimizer)\n\n    # checking on the training loss and accuracy once per epoch\n    acc, loss = evaluate(train_dataloader, nonlinear_model, loss_fn)\n    train_acc_all.append(acc)\n    print(f\"Epoch {j}: training loss: {loss}, accuracy: {acc}\")\n\n    # checking on the validation loss and accuracy once per epoch\n    val_acc, val_loss = evaluate(val_dataloader, nonlinear_model, loss_fn)\n    val_acc_all.append(val_acc)\n    print(f\"Epoch {j}: val. loss: {val_loss}, val. accuracy: {val_acc}\")\n\nEpoch 0: training loss: 0.8711661319732666, accuracy: 75.1875\nEpoch 0: val. loss: 0.8697689403878882, val. accuracy: 74.55833333333334\n1: training loss: 0.4198738198677699, accuracy: 88.297916666666674\n\nEpoch 1: val. loss: 0.4143052941307108, val. accuracy: 88.45833333333334\n2: training loss: 0.3039622515439987, accuracy: 91.302083333333334\n\nEpoch 2: val. loss: 0.2973113705186134, val. accuracy: 91.33333334\n\n\n3: training loss: 0.2426262723406156, accuracy: 93.02291666666666\nEpoch 3: val. loss: 0.23850328285009303, val. accuracy: 92.86666666666666\n4: training loss: 0.19915112743775049, accuracy: 94.241666666666676\n\nEpoch 4: val. loss: 0.1988548755328706, val. accuracy: 94.11666666666667\nCPU times: user 11.7 s, sys: 833 ms, total: 12.6 s\nWall time: 12.4 s\n\n\n\n# pltsize=1\n# plt.figure(figsize=(10*pltsize, 10 * pltsize))\nplt.figure()\nplt.plot(range(epochs), train_acc_all, label=\"Training Acc.\")\nplt.plot(range(epochs), val_acc_all, label=\"Validation Acc.\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\")\nplt.legend()\n\n\n\n\n\n\n\n\n\nshow_failures(nonlinear_model, test_dataloader)\n\nShowing max 10 first failures.\nThe predicted class is shown first and the correct class in parentheses.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#recap",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#recap",
    "title": "Intro to NNs: MNIST",
    "section": "Recap",
    "text": "Recap\nTo train and validate a neural network model, you need:\n\nData split into training/validation/test sets,\nA model with parameters to learn\nAn appropriate loss function\nAn optimizer (with tunable parameters such as learning rate, weight decay etc.) used to learn the parameters of the model.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#homework",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#homework",
    "title": "Intro to NNs: MNIST",
    "section": "Homework",
    "text": "Homework\n\nCompare the quality of your model when using different:\n\n\nbatch sizes\nlearning rates\nactivation functions\n\n\nBonus: What is a learning rate scheduler?\n\nIf you have time, experiment with how to improve the model.\nNote: training and validation data can be used to compare models, but test data should be saved until the end as a final check of generalization.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist-ipynb/index.html#homework-solution",
    "href": "01-neural-networks/1-mnist-ipynb/index.html#homework-solution",
    "title": "Intro to NNs: MNIST",
    "section": "Homework solution",
    "text": "Homework solution\nMake the following changes to the cells with the comment ‚Äú#For HW‚Äù\n\n#####################To modify the batch size##########################\nbatch_size = 32  # 64, 128, 256, 512\n\n# The dataloader makes our dataset iterable\ntrain_dataloader = torch.utils.data.DataLoader(training_data, batch_size=batch_size)\nval_dataloader = torch.utils.data.DataLoader(validation_data, batch_size=batch_size)\n##############################################################################\n\n\n##########################To change the learning rate##########################\noptimizer = torch.optim.SGD(\n    nonlinear_model.parameters(), lr=0.01\n)  # modify the value of lr\n##############################################################################\n\n\n##########################To change activation##########################\n###### Go to https://pytorch.org/docs/main/nn.html#non-linear-activations-weighted-sum-nonlinearity for more activations ######\nclass NonlinearClassifier(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.flatten = nn.Flatten()\n        self.layers_stack = nn.Sequential(\n            nn.Linear(28 * 28, 50),\n            nn.Sigmoid(),  # nn.ReLU(),\n            nn.Dropout(0.2),\n            nn.Linear(50, 50),\n            nn.Tanh(),  # nn.ReLU(),\n            # nn.Dropout(0.2),\n            nn.Linear(50, 50),\n            nn.ReLU(),\n            # nn.Dropout(0.2),\n            nn.Linear(50, 10),\n        )\n\n    def forward(self, x):\n        x = self.flatten(x)\n        x = self.layers_stack(x)\n\n        return x\n\n\n##############################################################################\n\nBonus question: A learning rate scheduler is an essential deep learning technique used to dynamically adjust the learning rate during training. This strategic can significantly impact the convergence speed and overall performance of a neural network. See below on how to incorporate it to your training.\n\nnonlinear_model = NonlinearClassifier()\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(nonlinear_model.parameters(), lr=0.1)\n\n# Step learning rate scheduler: reduce by a factor of 0.1 every 2 epochs (only for illustrative purposes)\nscheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=2, gamma=0.1)\n\n\n%%time\n\nepochs = 6\ntrain_acc_all = []\nval_acc_all = []\nfor j in range(epochs):\n    train_one_epoch(train_dataloader, nonlinear_model, loss_fn, optimizer)\n    #step the scheduler\n    scheduler.step()\n\n    # print the current learning rate\n    current_lr = optimizer.param_groups[0]['lr']\n    print(f\"Epoch {j+1}/{epochs}, Learning Rate: {current_lr}\")\n\n    # checking on the training loss and accuracy once per epoch\n    acc, loss = evaluate(train_dataloader, nonlinear_model, loss_fn)\n    train_acc_all.append(acc)\n    print(f\"Epoch {j}: training loss: {loss}, accuracy: {acc}\")\n\n    # checking on the validation loss and accuracy once per epoch\n    val_acc, val_loss = evaluate(val_dataloader, nonlinear_model, loss_fn)\n    val_acc_all.append(val_acc)\n    print(f\"Epoch {j}: val. loss: {val_loss}, val. accuracy: {val_acc}\")\n\nEpoch 1/6, Learning Rate: 0.1\nEpoch 0: training loss: 0.35453774413218103, accuracy: 89.84791666666668\nval. loss: 0.3428567706346512, val. accuracy: 89.88333333333334\n\nEpoch 2/6, Learning Rate: 0.01000000000000000289.88333333333334\n\n\n1: training loss: 0.25014649585510296, accuracy: 92.55624999999999\nEpoch 1: val. loss: 0.24179457187155884, val. accuracy: 92.60000000000001\n3/6, Learning Rate: 0.010000000000000002accuracy: 92.60000000000001\n\nEpoch 2: training loss: 0.23025922616074482, accuracy: 93.25416666666668\nval. loss: 0.22265068178375563, val. accuracy: 93.18333333333332\nEpoch 4/6, Learning Rate: 0.001000000000000000293.18333333333332\n\n3: training loss: 0.223550607226789, accuracy: 93.43125332\n\n\nEpoch 3: val. loss: 0.2162884232501189, val. accuracy: 93.30000000000001\n5/6, Learning Rate: 0.0010000000000000002curacy: 93.30000000000001\n\nEpoch 4: training loss: 0.22177774112671614, accuracy: 93.43125001\n\n\nval. loss: 0.21469855186343192, val. accuracy: 93.45833333333333\nEpoch 6/6, Learning Rate: 0.000100000000000000033.45833333333333\n\n5: training loss: 0.22121808264404536, accuracy: 93.456253\n\n\nEpoch 5: val. loss: 0.2141772210597992, val. accuracy: 93.44166666666666\nCPU times: user 17.7 s, sys: 3.28 s, total: 20.9 s\nWall time: 19.1 s",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example (ipynb)"
    ]
  },
  {
    "objectID": "01-neural-networks/index.html",
    "href": "01-neural-networks/index.html",
    "title": "Introduction to Neural Networks",
    "section": "",
    "text": "üìÇ 01-neural-networks/\n\nüìÑ 0-intro\nüìó 1-mnist\nüìó 2-advanced\nüìó 3-conv-nets\nüìó 4-representation-learning\n\n\n\n\n\n\nCitationBibTeX citation:@online{foreman2025,\n  author = {Foreman, Sam},\n  title = {Introduction to {Neural} {Networks}},\n  date = {2025-07-15},\n  url = {https://saforem2.github.io/hpc-bootcamp-2025/01-neural-networks/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nForeman, Sam. 2025. ‚ÄúIntroduction to Neural Networks.‚Äù July\n15, 2025. https://saforem2.github.io/hpc-bootcamp-2025/01-neural-networks/.",
    "crumbs": [
      "[01] Neural Networks"
    ]
  },
  {
    "objectID": "01-neural-networks/4-representation-learning/index.html#this-notebook-is-not-officially-part-of-the-course.",
    "href": "01-neural-networks/4-representation-learning/index.html#this-notebook-is-not-officially-part-of-the-course.",
    "title": "Representation Learning with Neural Networks",
    "section": "This notebook is not officially part of the course.",
    "text": "This notebook is not officially part of the course.\nBut you are welcome to look through it anyways, you can send questions on slack, and we are happy to talk about it.\nThe previous notebook trained a classifier network which did ok. But what if we didn‚Äôt have a lot of data? In this notebook, we‚Äôll apply that model in a new way with representation learning.\n\nimport os\nimport sys\nif sys.platform == \"darwin\":\n    os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    os.environ['PYTORCH_ENABLE_MPS_FALLBACK'] = \"1\"\n\n\nimport numpy\nimport random\nimport torch\nimport torchvision\nfrom torchvision.transforms import v2\nfrom ezpz.log.config import STYLES\nfrom rich.console import Console\nfrom rich.theme import Theme\n\nconsole = Console(theme=Theme(STYLES))\n\n\n\nimport torch.distributed as dist\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.multiprocessing as mp\n\nfrom torch.nn.parallel import DistributedDataParallel as DDP\n\nbatch_size = 128\n\nHere‚Äôs the Convolutional Neural Network Again:\n\nfrom torch import nn\n\nclass Downsampler(nn.Module):\n    def __init__(self, in_channels, out_channels, stride=2):\n        super(Downsampler, self).__init__()\n        self.norm = nn.InstanceNorm2d(in_channels)\n        self.downsample = nn.Conv2d(\n            in_channels=in_channels, \n            out_channels=out_channels,\n            kernel_size = stride,\n            stride = stride,\n        )\n\n    def forward(self, inputs):\n        return self.downsample(self.norm(inputs))\n\n\nclass ConvNextBlock(nn.Module):\n    def __init__(self, in_channels):\n        super(ConvNextBlock, self).__init__()\n        # Depthwise, seperable convolution with a large number of output filters:\n        self.conv1 = nn.Conv2d(\n            in_channels=in_channels,\n            out_channels=in_channels,\n            groups=in_channels,\n            kernel_size=(7, 7),\n            padding='same'\n        )\n        self.norm = nn.InstanceNorm2d(in_channels)\n        self.conv2 = nn.Conv2d(\n            in_channels=in_channels,\n            out_channels=4*in_channels,\n            kernel_size=1\n        )\n        self.conv3 = nn.Conv2d(\n            in_channels=4*in_channels,\n            out_channels=in_channels,\n            kernel_size=1\n        )\n\n\n    def forward(self, inputs):\n        # x = self.conv1(inputs)\n        # The normalization layer:\n        # x = self.norm(x)\n        # x = self.conv2(x)\n        # The non-linear activation layer:\n        # x = torch.nn.functional.gelu(x)\n        # x = self.conv3(x)\n        # This makes it a residual network:\n        return inputs + self.conv3(\n            torch.nn.functional.gelu(\n                self.conv2(\n                    self.norm(\n                        self.conv1(inputs)\n                    )\n                )\n            )\n        )\n\n\nclass Classifier(nn.Module):\n\n\n    def __init__(self, n_initial_filters, n_stages, blocks_per_stage, n_outputs):\n        super(Classifier, self).__init__()\n        # This is a downsampling convolution that will produce patches of output.\n        # This is similar to what vision transformers do to tokenize the images.\n        self.stem = nn.Conv2d(in_channels=3,\n                                    out_channels=n_initial_filters,\n                                    kernel_size=1,\n                                    stride=1)\n        self.norm1 = nn.InstanceNorm2d(n_initial_filters)\n\n        current_n_filters = n_initial_filters\n        self.layers = nn.Sequential()\n        for n_blocks in range(n_stages):\n            # Add a convnext block series:\n            for _ in range(blocks_per_stage):\n                self.layers.append(ConvNextBlock(in_channels=current_n_filters))\n            # Add a downsampling layer:\n            self.layers.append(Downsampler(in_channels=current_n_filters, out_channels=2*current_n_filters))\n            # Double the number of filters:\n            current_n_filters = 2*current_n_filters\n        self.head = nn.Sequential(\n            nn.Flatten(),\n            nn.LayerNorm(current_n_filters),\n            nn.Linear(current_n_filters, n_outputs)\n        )\n\n    def forward(self, inputs):\n        x = self.stem(inputs)\n        # Apply a normalization after the initial patching:\n        x = self.norm1(x)\n        # Apply the main chunk of the network:\n        x = self.layers(x)\n        # Normalize and readout:\n        x = nn.functional.avg_pool2d(x, x.shape[2:])\n        x = self.head(x)\n        return x\n\n\ndef create_representation_model(n_features, rank, size):\n    model = Classifier(32, 2, 2, n_features)\n    model.to(torch.get_default_device())\n    return model\n\nmodel = create_representation_model(256, 0, 1)\nhead = torch.nn.Sequential(\n    nn.Linear(256,128),\n)\n\nhead.to(torch.get_default_device())\n\nfrom torchinfo import summary\nconsole.log(summary(model, input_size=(batch_size, 3, 32, 32)))\nconsole.log(summary(head, input_size=(batch_size, 256)))\n\nThis will download the data if needed:\nWe‚Äôre going to train this on Polaris nodes which have 4 A100s (But only using one node at a time). So, the following helper functions will automatically distribute the code and model to use all 4 GPUs at once:\n(They are all from the DDP Tutorial )\n\ndef setup(rank, world_size):\n    os.environ['MASTER_ADDR'] = 'localhost'\n    os.environ['MASTER_PORT'] = '12355'\n\n    # initialize the process group\n    dist.init_process_group(\"gloo\", rank=rank, world_size=world_size)\n\ndef cleanup():\n    dist.destroy_process_group()\n\n\nimport ezpz\n\ndef create_data_loaders(transforms, batch_size, rank, seed):\n    # Start up the data loader:\n    # dev = torch.device(\n    #     f\"cuda:{rank}\") if torch.cuda.is_available() else torch.device(\"cpu\")\n    dev = ezpz.get_torch_device_type()\n\n    training_data = torchvision.datasets.CIFAR10(\n        root=\"data\",\n        train=True,\n        download=True,\n        transform=transforms\n    )\n\n    training_data, validation_data = torch.utils.data.random_split(\n        training_data,\n        [0.8, 0.2],\n        generator=torch.Generator().manual_seed(55))\n\n    # The dataloader makes our dataset iterable \n    train_dataloader = torch.utils.data.DataLoader(training_data,\n                                                   batch_size=batch_size,\n                                                   shuffle=True,\n                                                   num_workers=8)\n\n    val_dataloader = torch.utils.data.DataLoader(validation_data,\n                                                 batch_size=batch_size,\n                                                 shuffle=True,\n                                                 num_workers=8)\n\n\n    def preprocess(x, y):\n        # CIFAR-10 is *color* images so 3 layers!\n        return x.view(-1, 3, 32, 32).to(dev), y.to(dev)\n\n\n    class WrappedDataLoader:\n        def __init__(self, dl, func):\n            self.dl = dl\n            self.func = func\n\n        def __len__(self):\n            return len(self.dl)\n\n        def __iter__(self):\n            for b in self.dl:\n                yield (self.func(*b))\n\n\n    train_dataloader = WrappedDataLoader(train_dataloader, preprocess)\n    val_dataloader = WrappedDataLoader(val_dataloader, preprocess)\n\n    return train_dataloader, val_dataloader\n\n\n# def demo_basic(rank, world_size, n_epochs):\n#     console.log(f\"Running basic DDP example on rank {rank}.\")\n#     setup(rank, world_size)\n\n\n#     # create model and move it to GPU with id rank\n#     model = ToyModel().to(rank)\n#     ddp_model = DDP(model, device_ids=[rank])\n\n#     loss_fn = nn.MSELoss()\n#     optimizer = optim.SGD(ddp_model.parameters(), lr=0.001)\n\n#     optimizer.zero_grad()\n#     outputs = ddp_model(torch.randn(20, 10))\n#     labels = torch.randn(20, 5).to(rank)\n#     loss_fn(outputs, labels).backward()\n#     optimizer.step()\n\n#     cleanup()\n\n\n# def run_demo(demo_fn, world_size):\n#     mp.spawn(demo_fn,\n#              args=(world_size,5),\n#              nprocs=world_size,\n#              join=True)\n\n\n# import sys, os\n# from multiprocessing import Pool\n# from multiprocessing.reduction import ForkingPickler\n# from types import FunctionType\n# import cloudpickle\n\n# assert sys.version_info &gt;= (3, 8), 'python3.8 or greater required to use reducer_override'\n\n# def reducer_override(obj):\n#     if type(obj) is FunctionType:\n#         return (cloudpickle.loads, (cloudpickle.dumps(obj),))\n#     else:\n#         return NotImplemented\n\n# # Monkeypatch our function reducer into the pickler for multiprocessing.\n# # Without this line, the main block will not work on windows or macOS.\n# # Alterntively, moving the defintionn of foo outside of the if statement\n# # would make the main block work on windows or macOS (when run from\n# # the command line).\n# ForkingPickler.reducer_override = staticmethod(reducer_override)\n\n\n# This method is from the pytorch implementation of SimCLR:\n# https://github.com/sthalles/SimCLR/blob/master/data_aug/contrastive_learning_dataset.py\n\ndef get_simclr_pipeline_transform(size, s=1):\n    \"\"\"Return a set of data augmentation transformations as described in the SimCLR paper.\"\"\"\n    color_jitter = v2.ColorJitter(0.8 * s, 0.8 * s, 0.8 * s, 0.2 * s)\n    data_transforms = v2.Compose([v2.RandomResizedCrop(size=size, scale=[0.85,1.0]),\n                                          v2.RandomHorizontalFlip(),\n                                          v2.RandomApply([color_jitter], p=0.8),\n                                          v2.RandomGrayscale(p=0.2),\n                                          v2.ToDtype(torch.float32, scale=True),  # Normalize expects float input\n                                          # v2.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n                                          # v2.ToTensor()\n                                        ])\n    return data_transforms\n\n\ntransforms1 = get_simclr_pipeline_transform((32,32))\ntransforms2 = get_simclr_pipeline_transform((32,32))\n\n\ntrain, val = create_data_loaders(v2.ToTensor(), batch_size, 0, seed = 1234)\n\n\nbatch, (X, Y) = next(enumerate(train))\n\n\nX1 = transforms1(X); X2 = transforms2(X)\n\nconsole.log(type(X1))\nconsole.log(type(X2))\n\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\n\nplt.imshow(X[0].cpu().permute((1,2,0))); plt.show()\nplt.imshow(X1[0].cpu().permute((1,2,0))); plt.show()\nplt.imshow(X2[0].cpu().permute((1,2,0))); plt.show()\n\n\ndef contrastive_loss(first_images, second_images, rank, world_size = 1, temperature=0.1):\n        # Each image is represented with k parameters,\n        # Assume the batch size is N, so the\n        # inputs have shape (N, k)\n\n        # These are pre-distributed shapes:\n        N = first_images.shape[0]\n        k = first_images.shape[1]\n\n\n        first_images = first_images / torch.norm(first_images,dim=1).reshape((-1,1))\n        second_images = second_images / torch.norm(second_images,dim=1).reshape((-1,1))\n\n        # Take the two tuples, and concatenate them.\n        # Then, reshape into Y = (1, 2N, k) and Z = (2N, 1, k)\n\n        c = torch.concat([first_images, second_images], dim=0)\n\n        # Gather all the c up if the world size &gt; 1:\n        if world_size &gt; 1:\n            gathered_c = torch.distributed.all_gather(tensor=c)\n            gathered_c = gathered_c.reshape((-1, first_images.shape[-1]))\n        else:\n            gathered_c = c\n\n        # Each rank computes only a slice of the global loss matrix, or\n        # the memory usage gets out of control.\n\n        # We calculate the dot product between the local and global tensors:\n        local_reps = c.reshape((c.shape[0], 1, c.shape[1]))\n        all_reps   = gathered_c.reshape((1, gathered_c.shape[0], gathered_c.shape[1]))\n\n\n        # Assume we have n images per rank, for N global images with N = n * world_size\n        # Compute the product of these tensors, which gives shape\n        # (2n, 2N, k)\n        mat =  local_reps*all_reps\n\n        # We need to compute the function (sim(x,y)) for each element in the 2N sequent.\n        # Since the are normalized, we're computing x^T . Y / (||x||*||y||),\n        # but the norms are equal to 1.\n        # So, summing the matrix over the dim = 0 and dim = 1 computes this for each pair.\n\n        sim = torch.sum(mat, dim=-1) / temperature\n\n\n\n        # Now, sim is of shape [2*n, 2*N]\n\n        # This yields a symmetric matrix, diagonal entries equal 1.  Off diagonal are symmetrics and &lt; 1.\n\n        # sim = torch.exp(sim / temperature)\n        # Now, for every entry i in C (concat of both batches), the sum of sim[i] - sim[i][i] is the denominator\n\n        device = sim.device\n\n        # Since we have a non-symmetric matrix, need to build a non-symmetric index:\n        positive = torch.zeros(sim.shape, device=device)\n\n        # We concatenated all the local examples, and compute symmetric positive pairs\n        # So for the first N entries, the index of the positive pair is i + N  (locally)\n        # For the second N entries, the index of the positive pair is i - N (locally)\n        # with a distributed run, we've squashed all the similarity scores together.\n        # to a shape of [2*N, 2*N*Size]\n        # Each 2*N by 2*N block is the local positive indexes, all others are negative.\n        # That means that the index is shifted by global_rank*2*N\n\n        access_index_x = torch.arange(2*N)\n        # For the first N, the y-index is equal to x + 2*N\n        # For the second N\n        access_index_y = torch.arange(2*N)\n        # Shift by +/- N:\n        access_index_y[0:N] = access_index_y[0:N] + N\n        access_index_y[N:]  = access_index_y[N:] - N\n\n        access_index_y +=  rank * 2*N\n\n        # console.log(\"access_index_y: \", access_index_y, flush=True)\n\n        positive[access_index_x, access_index_y] = 1\n\n        # For the negative, we invert the positive and have to 0 out the self-index entries\n        negative = 1 - positive\n\n        # THESE WORK IF IT'S NOT DISTRIBUTED\n        # positive = torch.tile(torch.eye(N, device=device), (2,2))\n        # # Unsure if this line is needed?\n        # positive = positive - torch.eye(2*N, device=device)\n        #\n        # negative = - (torch.eye(2*N, device=device) - 1)\n\n        with torch.no_grad():\n            # Here, we can compute the top-k metrics for this batch, since we have the global state:\n            # We want the top 5 entries but the self-sim is obviously perfect.\n            # So take the top 6 and reject the first.\n            topk = torch.topk(sim, k=6, dim=-1, sorted=True)\n\n            # Top 1 is just an equality check:\n            top1_acc = topk.indices[:,1] == access_index_y.to(topk.indices.device)\n            top1_acc = torch.mean(top1_acc.to(torch.float))\n          \n            # Top 5 is a little more complicated:\n            # Compute the index distance to the correct index, abs value:\n            top5_acc_dist = torch.abs(topk.indices[:,1:] - access_index_y.to(topk.indices.device).reshape(-1,1))\n            # Get the minumum value, and see if it is less than 5:\n            min_values, _ = torch.min(top5_acc_dist, dim=-1)\n            top5_acc =  min_values &lt; 5.\n            # Average over the batch dimension:\n            top5_acc = torch.mean(top5_acc.to(torch.float))\n\n\n        negative_examples = sim * negative\n        positive_examples = sim * positive\n\n        # Now, positive/negative examples is the temperature normalized similarity.\n        # we need to sum across the whole batch dimension to compute it per-example:\n\n\n        # Compute the alignment, summed over the entire global batch:\n        alignment = torch.sum(positive_examples, dim=-1)\n\n        # Compute the exp, which we'll eventually sum and log:\n        exp = torch.sum(torch.exp(negative_examples), dim=-1)\n\n        # console.log(\"Alignment: \", alignment, flush=True)\n        # console.log(\"exp: \",       exp, flush=True)\n\n\n        # And compute the logsumexp of the negative examples:\n        log_sum_exp = torch.log(exp )\n\n\n        # Additionally, we can compute the \"floor\" of the loss at this batch size:\n        # floor = torch.log(1.*N) - 1.\n\n        loss_metrics = {\n            \"alignment\"   : torch.mean(alignment),\n            \"log_sum_exp\" : torch.mean(log_sum_exp),\n            \"top1\"        : top1_acc,\n            \"top5\"        : top5_acc,\n            # \"floor\"       : floor,\n        }\n\n        loss = torch.mean( - alignment + log_sum_exp)\n        return loss, loss_metrics\n\n\ndef train_one_epoch(dataloader, t1, t2, model, head, loss_fn, optimizer, rank, size, progress_bar):\n    model.train()\n    head.train()\n    for (batch, (X, _)) in enumerate(dataloader):\n        # forward pass\n        X1 = t1(X); X2 = t2(X)\n        pred1 = head(model(X1))\n        pred2 = head(model(X2))\n        loss, metrics = loss_fn(pred1, pred2, rank, size)\n\n        # console.log(metrics)\n        \n        # backward pass calculates gradients\n        loss.backward()\n        \n        # take one step with these gradients\n        optimizer.step()\n        \n        # resets the gradients \n        optimizer.zero_grad()\n\n        # progress_bar.refresh()\n        cpu_metrics = { key : f\"{metrics[key].detach().cpu().numpy():.2f}\" for key in metrics.keys()}\n        cpu_metrics[\"loss\"] = f\"{loss.detach().cpu().numpy():.2f}\"\n        progress_bar.update()\n        progress_bar.set_postfix(cpu_metrics)\n        # progress_bar.description = f\"Train loss: {loss.cpu():.2f} top5: {metrics['top5'].cpu():.2f}\"\n        # break\n\n\ndef validate_one_epoch(dataloader, t1, t2, model, head, loss_fn, rank, size, progress_bar):\n    model.train()\n    head.train()\n    n = 0.\n    sum_metrics = None\n    for (batch, (X, _)) in enumerate(dataloader):\n        # forward pass\n        X1 = t1(X); X2 = t2(X)\n        pred1 = head(model(X1))\n        pred2 = head(model(X2))\n        loss, metrics = loss_fn(pred1, pred2, rank, size)\n\n        # console.log(metrics)\n        \n        # backward pass calculates gradients\n        loss.backward()\n        \n        # take one step with these gradients\n        optimizer.step()\n        \n        # resets the gradients \n        optimizer.zero_grad()\n\n        # progress_bar.refresh()\n        cpu_metrics = { key : metrics[key].detach().cpu().numpy() for key in metrics.keys()}\n        if sum_metrics is None: \n            sum_metrics = cpu_metrics\n        else:\n            for key in sum_metrics.keys():\n                sum_metrics[key] += cpu_metrics[key]\n        progress_bar.update()\n        n += 1.\n        # progress_bar.description = f\"Train loss: {loss.cpu():.2f} top5: {sum_metrics['top5'].cpu():.2f}\"\n        # break\n    \n    for key in sum_metrics:\n        sum_metrics[key] = sum_metrics[key] / n\n    return sum_metrics\n\n\noptimizer = torch.optim.AdamW(list(model.parameters()) + list(head.parameters()), lr=0.001)\n\n\nfrom tqdm.notebook import tqdm\n\n\n# for j in range(1):\n#     # with tqdm(total=len(train), position=0, leave=True, desc=f\"Train Epoch {j}\") as train_bar1:\n#\n#     #     train_one_epoch(train, transforms1, transforms2, model, head, contrastive_loss, optimizer, 0, 1, train_bar1)\n#\n#     with tqdm(total=len(val), position=0, leave=True, desc=f\"Validate Epoch {j}\") as val_bar:\n#         metrics = validate_one_epoch(val, transforms1, transforms2, model, head, contrastive_loss, 0, 1, val_bar)\n#         console.log_metrics = {\n#             key : f\"{key}={metrics[key]:.2f}\" for key in metrics.keys()\n#         }\n#         console.log_metrics = \"; \".join(console.log_metrics.values())\n#         console.log(f\"Validate epoch {j}: \", console.log_metrics)\n\n\n# Now, we retrain the classification head without touching the representation. This is called fine tuning.\n\n\ndef evaluate(dataloader, model, head, loss_fn, val_bar):\n    # Set the model to evaluation mode - some NN pieces behave differently during training\n    # Unnecessary in this situation but added for best practices\n    model.eval()\n    size = len(dataloader)\n    num_batches = len(dataloader)\n    loss, correct = 0, 0\n\n    # We can save computation and memory by not calculating gradients here - we aren't optimizing \n    with torch.no_grad():\n        # loop over all of the batches\n        for X, y in dataloader:\n\n            pred = head(model(X))\n            loss += loss_fn(pred, y).item()\n            # how many are correct in this batch? Tracking for accuracy \n            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n            val_bar.update()\n            \n    loss /= num_batches\n    correct /= (size*batch_size)\n    \n    accuracy = 100*correct\n    return accuracy, loss\n\n\ndef fine_tune(dataloader, rep_model, head, loss_fn, optimizer, progress_bar):\n    head.train()\n    model.eval()\n    for batch1, (X, Y) in enumerate(dataloader):\n        # forward pass\n        # Calling detach blocks all gradients into the representation model!\n        rep = rep_model(X).detach()\n        pred = head(rep)\n        loss = loss_fn(pred, Y)\n        \n        \n        # backward pass calculates gradients\n        loss.backward()\n        \n        # take one step with these gradients\n        optimizer.step()\n        \n        # resets the gradients \n        optimizer.zero_grad()\n\n        correct = (pred.argmax(1) == Y).type(torch.float).mean().item()\n                    \n        # progress_bar.refresh()\n        cpu_metrics = {}\n        cpu_metrics[\"acc\"] = f\"{correct:.2f}\"\n        cpu_metrics[\"loss\"] = f\"{loss.detach().cpu().numpy():.2f}\"\n        progress_bar.update()\n        progress_bar.set_postfix(cpu_metrics)\n        # progress_bar.description = f\"Train loss: {loss.cpu():.2f} top5: {metrics['top5'].cpu():.2f}\"\n        # break\n\n\nclassification_head = nn.Linear(256, 10)  # .cuda()\nclassification_loss = loss_fn = nn.CrossEntropyLoss()\nfine_tune_optimizer = torch.optim.AdamW(classification_head.parameters(), lr=0.01)\nconsole.log(fine_tune_optimizer)\n\n\n# for j in range(5):\n#     with tqdm(total=len(train), position=0, leave=True, desc=f\"Fine Tune Epoch {j}\") as train_bar1:\n#\n#         fine_tune(train, model, classification_head, classification_loss, fine_tune_optimizer, train_bar1)\n#     with tqdm(total=len(val), position=0, leave=True, desc=f\"Validate Epoch {j}\") as val_bar:\n#         acc, loss = evaluate(val, model, classification_head, classification_loss, val_bar)\n#         console.log(f\"Epoch {j}: validation loss: {loss:.3f}, accuracy: {acc:.3f}\")",
    "crumbs": [
      "[01] Neural Networks",
      "[4] Representation Learning"
    ]
  },
  {
    "objectID": "01-neural-networks/0-intro/index.html",
    "href": "01-neural-networks/0-intro/index.html",
    "title": "Introduction to Neural Networks",
    "section": "",
    "text": "This tutorial covers the basics of neural networks (aka ‚Äúdeep learning‚Äù), which is a technique within machine learning that tends to outperform other techniques when dealing with a large amount of data.\nThe MNIST dataset contains thousands of examples of handwritten numbers, with each digit labeled 0-9.\nWe‚Äôll start with the MNIST problem in this notebook:\nüìì Fitting MNIST with a multi-layer perceptron (MLP)\nNext week, we‚Äôll learn about other types of neural networks.",
    "crumbs": [
      "[01] Neural Networks",
      "[0] Intro to NNs"
    ]
  },
  {
    "objectID": "01-neural-networks/0-intro/index.html#references",
    "href": "01-neural-networks/0-intro/index.html#references",
    "title": "Introduction to Neural Networks",
    "section": "References:",
    "text": "References:\n\nHere are some recommendations for further reading:\n\ntensorflow.org tutorials\nkeras.io tutorials\nCS231n: Convolutional Neural Networks for Visual Recognition\nDeep Learning Specialization, Andrew Ng\nPyTorch Challenge, Udacity\nDeep Learning with Python\nKeras Blog\nHands-on ML book with notebooks.",
    "crumbs": [
      "[01] Neural Networks",
      "[0] Intro to NNs"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/7-statistical-learning/index.html",
    "href": "00-intro-AI-HPC/7-statistical-learning/index.html",
    "title": "Statistical Learning",
    "section": "",
    "text": "%load_ext autoreload\n%autoreload 2\nimport matplotlib_inline.backend_inline\nmatplotlib_inline.backend_inline.set_matplotlib_formats('retina', 'svg', 'png')\nimport os\nos.environ[\"TRUECOLOR\"] = \"1\"\nimport matplotlib as mpl\n# mpl.rcParams['figure.dpi'] = 400",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[7] Statistical Learning"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/7-statistical-learning/index.html#learning-to-cluster-data",
    "href": "00-intro-AI-HPC/7-statistical-learning/index.html#learning-to-cluster-data",
    "title": "Statistical Learning",
    "section": "Learning to Cluster Data",
    "text": "Learning to Cluster Data\nIf we have data with distinct groupings, the objective is to devise a method for labeling our data by its group in an automated way.\nWe will demonstrate this, first, on a toy dataset that we design to have a lower inherent dimensionality, then we move to a higher dimensional dataset.\n\n\nToy Dataset (2D Blobs)\nDefine 3 blobs on a 2D plane:\n\nimport time\nimport os\nimport sklearn\nfrom sklearn import datasets\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import (\n    StandardScaler,\n    MinMaxScaler,\n    RobustScaler\n)\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport ambivalent\nplt.style.use(ambivalent.STYLES[\"ambivalent\"])\n\nfrom matplotlib.colors import ListedColormap\nfrom bootcamp.plots import scatter, COLORS\n\n# set random seed for reproducibility\nSEED = 42\nDFIGSIZE = plt.rcParamsDefault['figure.figsize']\n\n[2025-08-04 11:08:05,329776][I][ezpz/__init__:265:ezpz] Setting logging level to 'INFO' on 'RANK == 0'\n\n\n\n[2025-08-04 11:08:05,331927][I][ezpz/__init__:266:ezpz] Setting logging level to 'CRITICAL' on all others 'RANK != 0'\n\n\n\n\nn_samples = 1000 # 300 2D data points\nn_features = 2  # 2D data\nn_clusters = 4  # 3 unique blobs\n\n# https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_blobs.html\n# -- Returns --------------------------------------------------------\n# x (n_samples, n_features): The generated samples.\n# y (n_samples,): Int labels for cluster membership of each sample.\n# -------------------------------------------------------------------\ncmap = ListedColormap(list(COLORS.values()))\nx, y = datasets.make_blobs(\n    n_samples=n_samples,\n    n_features=n_features,\n    centers=n_clusters,\n    random_state=42\n)\nscatter_kwargs = {\n    'xlabel': 'x0',\n    'ylabel': 'x1',\n    'cmap': cmap,\n    'plot_kwargs': {\n        'alpha': 0.8,\n        'edgecolor': '#222',\n    }\n}\n_ = scatter(x, y, **scatter_kwargs)\n\n\n\n\n\n\n\n\n\n# Normalize features\n# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html\nx_sc = StandardScaler().fit_transform(x)\n\n\nfig, (ax1, ax2) = plt.subplots(\n    figsize=(1.5 * DFIGSIZE[0], 0.8 * DFIGSIZE[1]),\n    ncols=2,\n    subplot_kw={\n        'aspect': 'equal',\n    },\n    \n)\nfig, ax1 = scatter(\n    x,\n    y,\n    fig=fig,\n    ax=ax1,\n    title='Original',\n    **scatter_kwargs\n)\nfig.subplots_adjust(wspace=0.2)\nfig, ax2 = scatter(\n    x_sc,\n    y,\n    fig=fig,\n    ax=ax2,\n    title='Normalized',\n    **scatter_kwargs\n)",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[7] Statistical Learning"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/7-statistical-learning/index.html#k-means-clustering",
    "href": "00-intro-AI-HPC/7-statistical-learning/index.html#k-means-clustering",
    "title": "Statistical Learning",
    "section": "K-means Clustering",
    "text": "K-means Clustering\nK-means clustering aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.\n\nPick random starting centroids from data\n\nk initial ‚Äúmeans‚Äù (in this case, k=3) are randomly generated within the data domain (shown in color)\n\nCalculate distance to each centroid\n\nk clusters are created by associating every observation with the nearest mean. The partitions here represent the Voroni diagram generated by the means\nFind nearest cluster for each point\n\nCalculate new centroids\n\nThe centroid of each of the k clusters becomes the new mean\n\nSteps 2 and 3 are repeated until convergence has been reached\n\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†1: Illustration of the K-means algorithm steps\n\n\n\n\nStep 1: Pick random starting centroids from data\n\nk initial ‚Äúmeans‚Äù (in this case, k=3) are randomly generated within the data domain (shown in color)\n\n\n\n\n\n\n\nFigure¬†2\n\n\n\n\ndef initialize_centroids(\n        x: np.ndarray,\n        n_clusters: int,\n        seed: int = 123\n) -&gt; np.ndarray:\n    \"\"\"Initialize centroids.\n    \n    Inputs:\n      - x (np.ndarray): Data of shape (num_points, num_features)\n      - n_clusters (int): Number of clusters to use\n      - seed (int): Random seed.\n        \n    Outputs:\n      - centroids (np.ndarray): Randomly chosen from the data\n        with shape: (num_clusters, num_features).\n    \"\"\"\n    np.random.RandomState(seed)\n    # 1. Randomly permute data points\n    # 2. From this, pick the first `n_clusters` indices\n    # 3. Return these as our initial centroids\n    random_idx = np.random.permutation(x.shape[0])\n    centroids = x[random_idx[:n_clusters]]\n    return centroids\n\n\n\nStep 2a: Calculate distance to each centroid\n\nCalculate distance to each centroid\n\nk clusters are created by associating every observation with the nearest mean. The partitions here represent the Voroni diagram generated by the means.\nFind nearest cluster for each point\n\n\n\n\n\n\n\n\nFigure¬†3\n\n\n\n\ndef compute_distance(\n        x: np.ndarray,\n        centroids: np.ndarray,\n        n_clusters: int\n) -&gt; np.ndarray:\n    \"\"\"Compute distance.\n\n    Inputs:\n      - x (np.ndarray): Input data of shape\n        (num_points, num_features)\n      - centroids (np.ndarray): Cluster centroids  with shape \n        (num_clusters, num_features)\n      - n_clusters (int): Number of clusters being used.\n\n    Outputs:\n      - distance (np.ndarray): Distance of each point \n        to each centroid with shape \n        (num_points, num_clusters)\n    \"\"\"\n    # distance vector\n    distance = np.zeros((x.shape[0], n_clusters))\n    # loop over each centroid\n    for k in range(n_clusters):\n        # calculate distance for each point from centroid\n        kcentroid_distance = x - centroids[k, :]\n        # apply normalization for stability\n        row_norm = np.linalg.norm(kcentroid_distance, axis=1)\n        # return distance squared\n        distance[:, k] = np.square(row_norm) \n\n    return distance\n\n\n\nStep 2b: Find nearest cluster for each point\n\ndef find_closest_centroid(\n        distance: np.ndarray\n) -&gt; np.ndarray:\n    \"\"\"Find closest centroid.\n\n    Inputs:\n      - distance (np.ndarray): Distance of each point to each centroid with shape\n        (num_points, num_clusters)\n\n    Outputs:\n      - nearest_centroid_indices (np.ndarray): Index of nearest centroid with shape\n        (num_points,)\n    \"\"\"\n    nearest_centroid_indices = np.argmin(distance, axis=1)\n    return nearest_centroid_indices\n\n\n\nStep 3: Calculate new centroids\n\nCalculate new centroids\n\nThe centroid of each of the k clusters becomes the new mean\n\n\n\n\n\n\n\n\nFigure¬†4\n\n\n\n\ndef compute_centroids(\n        x: np.ndarray,\n        nearest_centroid_indices: np.ndarray,\n        n_clusters: int\n) -&gt; np.ndarray:\n    \"\"\"Compute centroids.\n    \n    Inputs:\n      - x (np.ndarray): Input data of shape\n        (num_points, num_features)\n      - nearest_centroid_indices: Index of nearest centroid of shape\n        (num_points,)\n      - n_clusters (int): Number of clusters being used\n      \n    Outputs:\n      - centroids (np.ndarray): Cluster centroids with shape\n        (num_clusters, num_features)\n    \"\"\"\n    # new centroids vector\n    centroids = np.zeros((n_clusters, x.shape[1]))\n    # loop over each centroids\n    for k in range(n_clusters):\n        # calculate the mean of all points assigned to this centroid\n        centroids[k, :] = np.mean(\n            x[nearest_centroid_indices == k, :],\n            axis=0\n        )\n    return centroids\n\n\n\nStep 4: Repeat until convergence\n\nRepeat steps 2 and 3 until convergence has been reached\n\n\n\n\n\n\n\nFigure¬†5\n\n\n\n\nfrom __future__ import absolute_import, annotations, division, print_function\n\nfrom typing import Optional\nimport seaborn as sns\nimport IPython.display as ipydis\n\nfrom bootcamp.plots import plot_kmeans_points\n\ndef apply_kmeans(\n    x: np.ndarray,\n    n_clusters: int,\n    iterations: int = 100,\n    seed: int = 123,\n    cmap: Optional[str] = None,\n) -&gt; tuple[np.ndarray, np.ndarray]:\n    \"\"\"Returns (centroids, cluster_id).\"\"\"\n    # ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n    # ‚îÉ initialize centroids:               ‚îÉ\n    # ‚îÉ   - shape: (n_clusters, x.shape[1]) ‚îÉ\n    # ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n    centroids = initialize_centroids(\n        x,  # (n_points, n_features)\n        n_clusters=n_clusters,\n        seed=seed,\n    )\n    # ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n    # ‚îÉ -- Iteratively improve centroid location ----------------- ‚îÉ\n    # ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n    # ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n    # ‚îÉ 1. Compute the distance from entries in x to each centroid ‚îÉ\n    # ‚îÉ    - distance.shape: (n_points, n_clusters)                ‚îÉ\n    # ‚îÉ 2. Return the closest cluster (0, 1, ..., n_clusters-1)    ‚îÉ\n    # ‚îÉ    - cluster_id.shape: (n_points)                          ‚îÉ\n    # ‚îÉ 3. Calculate the mean position of each labeled cluster     ‚îÉ\n    # ‚îÉ    - centroids.shape: (n_clusters, n_features)             ‚îÉ\n    # ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n    for i in range(iterations):\n        # save old centroids\n        old_centroids = centroids\n        distance = compute_distance(x, old_centroids, n_clusters)\n        cluster_id = find_closest_centroid(distance)\n        centroids = compute_centroids(x, cluster_id, n_clusters)\n\n        # plotting for visual comprehension\n        ipydis.clear_output(\"wait\")\n        print(f\"Iteration: {i}\")\n        plot_kmeans_points(x, centroids, cluster_id, cmap=cmap)\n        time.sleep(0.5)\n\n        # if our points are the same as the old centroids, then we can stop\n        if np.all(old_centroids == centroids):\n            print(f\"No change in centroids! Exiting!\")\n            break\n\n    return centroids, cluster_id",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[7] Statistical Learning"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/7-statistical-learning/index.html#run-example",
    "href": "00-intro-AI-HPC/7-statistical-learning/index.html#run-example",
    "title": "Statistical Learning",
    "section": "Run Example",
    "text": "Run Example\n\nfrom bootcamp.plots import COLORS\n\ncmap = ListedColormap(list(COLORS.values()))\n\nn_samples = 500  # 300 2D data points\nn_features = 2  # 2D data\nn_clusters_true = 5  # unique blobs\nn_clusters_guess = 5\nSEED = 456\niterations = 50\n\n# https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_blobs.html\nx, y = datasets.make_blobs(\n    n_samples=n_samples,\n    n_features=n_features,\n    centers=n_clusters_true,\n    random_state=SEED,\n)\n\nx_sc = StandardScaler().fit_transform(x)\n\ncentroids, cluster_id = apply_kmeans(\n    x_sc,\n    n_clusters_guess,\n    iterations,\n    SEED,\n    cmap=cmap,\n)\n\nIteration: 9\n\n\n\n\n\n\n\n\n\nNo change in centroids! Exiting!",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[7] Statistical Learning"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/7-statistical-learning/index.html#k-means-on-a-breast-cancer-dataset",
    "href": "00-intro-AI-HPC/7-statistical-learning/index.html#k-means-on-a-breast-cancer-dataset",
    "title": "Statistical Learning",
    "section": "K-Means on a Breast Cancer Dataset",
    "text": "K-Means on a Breast Cancer Dataset\nNow we use more realistic data that cannot be easily plotted on a 2D grid. This dataset has 30 features (columns) for 569 patients (rows). In addition, there is a target feature that indicates if the cancer was malignant (0) or benign (1). In the ideal case, our 30 features would provide easy deliniation between these two classes.\nLet‚Äôs extract our data into x and our truth labels into y\n\nimport pandas as pd\n\n\ndef load_cancer_data() -&gt; dict:\n    \"\"\"Return cancer dataset (unscaled).\"\"\"\n    from sklearn import datasets\n\n    data = datasets.load_breast_cancer()\n    return data\n\n\ndef sort_cancer_data(data: dict) -&gt; tuple[pd.DataFrame, pd.Series]:\n    # Get features and target\n    x = pd.DataFrame(\n        data[\"data\"],\n        columns=data[\"feature_names\"],\n    )\n    x = x[sorted(x.columns)]\n    y = data[\"target\"]\n    return x, y\n\n\ndata = load_cancer_data()\nx, y = sort_cancer_data(data)\n\n\nprint(data.keys())\nprint(\"data size:\", len(data[\"data\"]))\nprint(\"number of features:\", len(data[\"feature_names\"]))\nprint(data[\"feature_names\"])\n\ndict_keys(['data', 'target', 'frame', 'target_names', 'DESCR', 'feature_names', 'filename', 'data_module'])\ndata size: 569\nnumber of features: 30\n['mean radius' 'mean texture' 'mean perimeter' 'mean area'\n 'mean smoothness' 'mean compactness' 'mean concavity'\n 'mean concave points' 'mean symmetry' 'mean fractal dimension'\n 'radius error' 'texture error' 'perimeter error' 'area error'\n 'smoothness error' 'compactness error' 'concavity error'\n 'concave points error' 'symmetry error' 'fractal dimension error'\n 'worst radius' 'worst texture' 'worst perimeter' 'worst area'\n 'worst smoothness' 'worst compactness' 'worst concavity'\n 'worst concave points' 'worst symmetry' 'worst fractal dimension']\n\n\n\n# wrap data in pandas DataFrame\n# y = data['target'] # value: 0 = 'Malignant' 1 = 'Benign'\nx = data[\"data\"]\ny = data[\"target\"]\nprint(f\"(malignant, benign): {np.bincount(y)}\")\nprint(f\"x.shape: {x.shape}\")\nprint(f\"y.shape: {y.shape}\")\n\n(malignant, benign): [212 357]\nx.shape: (569, 30)\ny.shape: (569,)\n\n\n\n# normalize\nx_sc = StandardScaler().fit_transform(x)\n\nPlot histogram of number of true class labels (malignant/benign) and number of k-means cluster labels.\nThis gives an indication of how well we did in clustering our data, but is not a ‚Äúcorrectness‚Äù or ‚Äúaccuracy‚Äù metric.\n\n\n\n\n\n\nKeep in mind, k-means is not a classifier.\nCluster label 0 given from k-means, does not correspond to cluster label 0 in the truth.\n\n\n\n\nfrom bootcamp.plots import plot_hists\n\n# for seed in range(10):\nCSEED = 42\nkmeans = KMeans(n_clusters=2, random_state=CSEED)\n# fit the data\nkfit = kmeans.fit(x_sc)\ncluster_ids = kmeans.labels_\nprint(\n    f\"seed: {CSEED}\\nNumber of samples in each cluster: {np.bincount(kmeans.labels_)}\"\n)\nk_means_bins = np.bincount(cluster_ids)\ny_bins = np.bincount(y)\nplt.rcParams[\"figure.figsize\"] = [1.5 * DFIGSIZE[0], 0.8 * DFIGSIZE[1]]\nplot_hists(k_means_bins, y_bins, xlabels=[\"Malignant\", \"Benign\"])\n\nseed: 42\nNumber of samples in each cluster: [188 381]\n\n\n\n\n\n\n\n\n\nThis plot shows the normalized inertia as we vary the number n_clusters used in our k-means fit to the breast cancer data. This value essentially indicates the mean distance of a point to the cluster centroids. Obviously more clusters result in data points being nearer to a centroid.\nIf our dataset easily split into 2 clusters, we would see a step function behavior going from 1 to 2, then only very minor improvements above 2. What we see here tells us our data does not easily cluster.\n\nfrom bootcamp.plots import plot_kmeans_obj\n\nplt.rcParams[\"figure.figsize\"] = [DFIGSIZE[0], 0.6 * DFIGSIZE[1]]\n_ = plot_kmeans_obj(x_sc, nclusters=10, plot_points=False)\n\n\n\n\n\n\n\n\nFor example, if we return to our blob data with 2 clusters, it become clear.\n\nn_samples = 300  # 300 2D data points\nn_features = 2  # 2D data\nn_clusters = 2  # unique blobs\nseed = 456\niterations = 25\nx, y = datasets.make_blobs(\n    n_samples=n_samples, n_features=n_features, centers=n_clusters, random_state=seed\n)\nplot_kmeans_obj(x, nclusters=10, plot_points=False)\n\narray([71.2677332 ,  2.06848282,  1.69706679,  1.2870742 ,  1.09504851,\n        0.89354269,  0.9207715 ,  0.6767132 ,  0.62271334])",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[7] Statistical Learning"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/7-statistical-learning/index.html#self-organizing-maps",
    "href": "00-intro-AI-HPC/7-statistical-learning/index.html#self-organizing-maps",
    "title": "Statistical Learning",
    "section": "Self-organizing maps",
    "text": "Self-organizing maps\nSelf Organizing Maps (SOM) were proposed and became widespread in the 1980s, by a Finnish professor named Teuvo Kohonen and are also called ‚ÄòKohonen maps‚Äô.\n\n# finding best matching unit\ndef find_bmu(t, net, n):\n    \"\"\"\n    Find the best matching unit for a given vector, t, in the SOM\n    Returns: a (bmu, bmu_idx) tuple where bmu is the high-dimensional BMU\n             and bmu_idx is the index of this vector in the SOM\n    \"\"\"\n    bmu_idx = np.array([0, 0])\n    # set the initial minimum distance to a huge number\n    # min_dist = #np.iinfo(np.int).max\n    min_dist = np.inf\n    # calculate the high-dimensional distance between each neuron and the input\n    for x in range(net.shape[0]):\n        for y in range(net.shape[1]):\n            w = net[x, y, :].reshape(n, 1)\n            # don't bother with actual Euclidean distance, to avoid expensive sqrt operation\n            sq_dist = np.sum((w - t) ** 2)\n            if sq_dist &lt; min_dist:\n                min_dist = sq_dist\n                bmu_idx = np.array([x, y])\n    # get vector corresponding to bmu_idx\n    bmu = net[bmu_idx[0], bmu_idx[1], :].reshape(n, 1)\n    # return the (bmu, bmu_idx) tuple\n    return (bmu, bmu_idx)\n\n\n# Decaying radius of influence\ndef decay_radius(initial_radius, i, time_constant):\n    return initial_radius * np.exp(-i / time_constant)\n\n\n# Decaying learning rate\ndef decay_learning_rate(initial_learning_rate, i, n_iterations):\n    return initial_learning_rate * np.exp(-i / n_iterations)\n\n\n# Influence in 2D space\ndef calculate_influence(distance, radius):\n    return np.exp(-distance / (2.0 * (radius**2)))\n\n\n# Update weights\ndef update_weights(net, bmu_idx, r, l):\n    wlen = net.shape[2]\n    for x in range(net.shape[0]):\n        for y in range(net.shape[1]):\n            w = net[x, y, :].reshape(wlen, 1)\n            # get the 2-D distance (again, not the actual Euclidean distance)\n            w_dist = np.sum((np.array([x, y]) - bmu_idx) ** 2)\n            # if the distance is within the current neighbourhood radius\n            if w_dist &lt;= r**2:\n                # calculate the degree of influence (based on the 2-D distance)\n                influence = calculate_influence(w_dist, r)\n                # now update the neuron's weight using the formula:\n                # new w = old w + (learning rate * influence * delta)\n                # where delta = input vector (t) - old w\n                new_w = w + (l * influence * (t - w))\n                # commit the new weight\n                net[x, y, :] = new_w.reshape(1, wlen)\n    return net\n\nThe idea behind a SOM is that you‚Äôre mapping high-dimensional vectors onto a smaller dimensional (typically 2D) space. Vectors that are close in the high-dimensional space also end up being mapped to nodes that are close in 2D space thus preserving the ‚Äútopology‚Äù of the original data.\n\nGenerating ‚ÄúColor‚Äù data and normalizing\n\nraw_data = np.random.randint(0, 255, (10000, 3))  # JPEG like data\n# raw_data = np.random.uniform(size=(500, 3))\ndata = StandardScaler().fit_transform(raw_data)  # Normalized\n\n\n\nDefining SOM\nDefining network size, number of iterations and learning rate\n\nnetwork_dimensions = np.array([50, 50])\nn_iterations = 2500\ninit_learning_rate = 0.075\n\nEstablish size variables based on data\n\nm = data.shape[0]\nn = data.shape[1]\n\nWeight matrix (i.e.¬†the SOM) needs to be one n-dimensional vector for each neuron in the SOM\n\nnet = np.random.random(\n    (network_dimensions[0], network_dimensions[1], n)\n)  # 25 neurons each with a 3D vector\n\nInitial neighbourhood radius and decay parameter\n\ninit_radius = max(network_dimensions[0], network_dimensions[1]) / 2.0\ntime_constant = n_iterations / np.log(init_radius)\n\n\n\nInitial state of SOM color network\n\nplt.rcParams[\"image.cmap\"] = \"rainbow\"\nfig, ax = plt.subplots(figsize=(4, 4))\nimage = ax.matshow(net)\n# _ = fig.colorbar(image)\n_ = plt.show()\n\n\n\n\n\n\n\n\n\n\nTraining SOM\n\ndef normalize(x: np.ndarray) -&gt; np.ndarray:\n    return (x - np.min(x)) / (np.max(x) - np.min(x))\n\n\nplt.rcParams[\"figure.figsize\"] = [\n    i / 2.0 for i in plt.rcParamsDefault[\"figure.figsize\"]\n]\ninit_learning_rate = 0.1\n# net = np.random.uniform(size=net.shape)\n# net = (255 * ((net + 1.) / 2.))\nimages = []\nfor iteration in range(n_iterations):\n    # select a training example at random - shape of 1x3\n    t = data[np.random.randint(0, m), :].reshape(np.array([n, 1]))\n    # find its Best Matching Unit\n    bmu, bmu_idx = find_bmu(t, net, n)  # Gives the row, column of the best neuron\n    # decay the SOM parameters\n    r = decay_radius(init_radius, iteration, time_constant)\n    l = decay_learning_rate(init_learning_rate, iteration, n_iterations)\n    # Update SOM weights\n    net = update_weights(net, bmu_idx, r, l)\n    if iteration % 50 == 0:\n        print(f\"Iteration: {iteration}\")\n        ipydis.clear_output(\"wait\")\n        fig, ax = plt.subplots(figsize=(4, 4))\n        net_img = normalize(net)\n        _ = fig.suptitle(f\"Iteration: {iteration}\", y=1.0)\n        plt.tight_layout()\n        image = ax.matshow(net_img, cmap=\"rainbow\")\n        if iteration % 100 == 0:\n            images.append(net_img)\n        _ = plt.show()\n        time.sleep(0.5)\n\n\n\n\n\n\n\n\n\n\nVisualization of trained colormap SOM\n\nlen(images)\n\n25\n\n\n\nfig, axes = plt.subplots(\n    figsize=(2.0 * DFIGSIZE[0], 1.5 * DFIGSIZE[1]),\n    nrows=5,\n    ncols=5,\n    tight_layout=True,\n)\nfig.subplots_adjust(wspace=0.1)\naxes = axes.flatten()\nfor idx, (img, ax) in enumerate(zip(images, axes)):\n    _ = ax.matshow(img, cmap=\"rainbow\")\n    _ = ax.set_title(f\"Iteration: {100 * idx}\")\n    _ = ax.set_xticks([])\n    _ = ax.set_xticklabels([])\n    _ = ax.set_yticks([])\n    _ = ax.set_yticklabels([])\n\n_ = plt.show()\n\n\n\n\n\n\n\n\n\nfrom matplotlib import cm\n\nfig, ax = plt.subplots(figsize=(4, 4))\nimage = ax.imshow(normalize(net), cmap=\"rainbow\")\n_ = ax.set_title(\"Final SOM\")\n_ = plt.show()\n\n\n\n\n\n\n\n\n\n\nSOM on Cancer data\n\n# Load data\ndata = datasets.load_breast_cancer()\n# Get features and target\nX = data[\"data\"]  # pd.DataFrame(data['data'], columns=data['feature_names'])\nY = data[\"target\"]\nprint(X.shape, Y.shape)\n\n(569, 30) (569,)\n\n\n\nnetwork_dimensions = np.array([10, 10])\nn_iterations = 2000\ninit_learning_rate = 0.01\n# establish size variables based on data\nn_points = X.shape[0]  # number of points\nn_features = X.shape[1]  # 30 features per point\n\n# weight matrix (i.e. the SOM) needs to be one n-dimensional vector for each neuron in the SOM\nnet = np.random.random((network_dimensions[0], network_dimensions[1], n_features))\n\n# initial neighbourhood radius\ninit_radius = max(network_dimensions[0], network_dimensions[1]) / 2\n# radius decay parameter\ntime_constant = n_iterations / np.log(init_radius)\n\n\n# convert the network to something we can visualize\nnet_vis = np.zeros(\n    shape=(net.shape[0], net.shape[1], 3),\n    dtype=np.float32,\n)  # Array for SOM color map visualization\n\nfor sample in range(n_points):\n    t = X[sample, :].reshape(np.array([n_features, 1]))\n    # find its Best Matching Unit for this data point\n    bmu, bmu_idx = find_bmu(t, net, n_features)\n    # set that unit to the label of this data point\n    net_vis[bmu_idx[0], bmu_idx[1], 0] = Y[sample]  # Red if benign\n\n\nfig, ax = plt.subplots()\nim = ax.matshow(normalize(net_vis))\n# _ = plt.colorbar(im1, ax=ax1)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTraining SOM on Cancer data\n\nfor iteration in range(n_iterations):\n    # select a training example at random - shape of 1x3\n    t = X[np.random.randint(0, n_points), :].reshape(np.array([n_features, 1]))\n    # find its Best Matching Unit\n    bmu, bmu_idx = find_bmu(t, net, n_features)\n    # decay the SOM parameters\n    r = decay_radius(init_radius, iteration, time_constant)\n    l = decay_learning_rate(init_learning_rate, iteration, n_iterations)\n    # Update SOM weights\n    net = update_weights(net, bmu_idx, r, l)\n\n    if iteration % 50 == 0:\n        ipydis.clear_output(\"wait\")\n        net_vis = np.zeros(\n            shape=(np.shape(net)[0], np.shape(net)[1], 3), dtype=\"double\"\n        )  # Array for SOM color map visualization\n        for sample in range(n_points):\n            t = X[sample, :].reshape(np.array([n_features, 1]))\n            # find its Best Matching Unit\n            bmu, bmu_idx = find_bmu(t, net, n_features)\n            net_vis[bmu_idx[0], bmu_idx[1], 0] = Y[sample]  # Red if benign\n\n        fig, ax = plt.subplots(figsize=(3, 3))\n        _ = ax.set_title(f\"Iteration: {iteration}\")\n        _ = ax.imshow(normalize(net_vis), cmap=\"rainbow\")\n        _ = plt.show()\n        time.sleep(0.25)\n\n\n\n\n\n\n\n\n\n\nVisualization of trained SOM\n\nnet_vis = np.zeros(\n    shape=(net.shape[0], net.shape[1], 3), dtype=\"double\"\n)  # Array for SOM color map visualization\n\nfor sample in range(n_points):\n    t = X[sample, :].reshape(np.array([n_features, 1]))\n    # find its Best Matching Unit\n    bmu, bmu_idx = find_bmu(t, net, n_features)\n    net_vis[bmu_idx[0], bmu_idx[1], 0] = Y[sample]  # Red if benign\n\n_ = plt.imshow(normalize(net_vis))\n_ = plt.show()",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[7] Statistical Learning"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/7-statistical-learning/index.html#keep-learning",
    "href": "00-intro-AI-HPC/7-statistical-learning/index.html#keep-learning",
    "title": "Statistical Learning",
    "section": "Keep learning",
    "text": "Keep learning\n\n&lt;lagunita.stanford.edu/courses/HumanitiesSciences/StatLearning/Winter2016/course/&gt;\n&lt;www.coursera.org/learn/ml-clustering-and-retrieval/&gt;\n&lt;www.coursera.org/learn/machine-learning/home/week/8&gt;",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[7] Statistical Learning"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/5-mcmc-example/index.html#example-estimate-pi",
    "href": "00-intro-AI-HPC/5-mcmc-example/index.html#example-estimate-pi",
    "title": "Example: Approximating \\pi using Markov Chain Monte Carlo (MCMC)",
    "section": "Example: Estimate \\pi",
    "text": "Example: Estimate \\pi\nWe can calculate the value of \\pi using a MPI parallelized version of the Monte Carlo method. The basic idea is to estimate \\pi by randomly sampling points within a square and determining how many fall inside a quarter circle inscribed within that square.\n\n\n\n\\pi\n\n\nThe ratio between the area of the circle and the square is\n\\frac{N_\\text{in}}{N_\\text{total}} = \\frac{\\pi r^2}{4r^2} = \\frac{\\pi}{4}\nTherefore, we can calculate \\pi using \\pi = \\frac{4N_\\text{in}}{N_\\text{total}}\n\nimport ambivalent\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use(ambivalent.STYLES['ambivalent'])\nsns.set_context(\"notebook\")\nplt.rcParams[\"figure.figsize\"] = [6.4, 4.8]\n\nfrom IPython.display import display, clear_output\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\nimport time\n\nimport ezpz\nfrom rich import print\n\n\nfig, ax = plt.subplots()\n#ax = fig.add_subplot(111)\ncircle = plt.Circle(( 0. , 0. ), 0.5 )\nplt.xlim(-0.5, 0.5)\nplt.ylim(-0.5, 0.5)\nax.add_patch(circle)\nax.set_aspect('equal')\nN = 500\nNin = 0\nt0 = time.time()\nfor i in range(1, N+1):\n    x = random.uniform(-0.5, 0.5)\n    y = random.uniform(-0.5, 0.5)\n    if (np.sqrt(x*x + y*y) &lt; 0.5):\n        Nin += 1\n        plt.plot([x], [y], 'o', color='r', markersize=3)\n    else:\n        plt.plot([x], [y], 'o', color='b', markersize=3)\n    display(fig)\n    plt.xlabel(\"$\\pi$ = %3.4f \\n N_in / N_total = %5d/%5d\" %(Nin*4.0/i, Nin, i))\n    clear_output(wait=True)\n\nres = np.array(Nin, dtype='d')\nt1 = time.time()\nprint(f\"Pi = {res/float(N/4.0)}\")\nprint(\"Time: %s\" %(t1 - t0))\n\nPi = 3.144\n\n\n\nTime: 25.008345127105713\n\n\n\n\n\n\n\n\n\n\n\nMPI example\n\n\n\nNodes\nPyTorch-2.5\nPyTorch-2.7\nPyTorch-2.8\n\n\n\n\nN1xR12\n17.39\n31.01\n33.09\n\n\nN2xR12\n3.81\n32.71\n33.26\n\n\n\n\nfrom mpi4py import MPI\nimport numpy as np\nimport random\nimport time\ncomm = MPI.COMM_WORLD\n\nN = 5000000\nNin = 0\nt0 = time.time()\nfor i in range(comm.rank, N, comm.size):\n    x = random.uniform(-0.5, 0.5)\n    y = random.uniform(-0.5, 0.5)\n    if (np.sqrt(x*x + y*y) &lt; 0.5):\n        Nin += 1\nres = np.array(Nin, dtype='d')\nres_tot = np.array(Nin, dtype='d')\ncomm.Allreduce(res, res_tot, op=MPI.SUM)\nt1 = time.time()\nif comm.rank==0:\n    print(res_tot/float(N/4.0))\n    print(\"Time: %s\" %(t1 - t0))\n\n3.14222\n\n\n\nTime: 3.022225856781006\n\n\n\n\n\nRunning \\pi example on Google Colab\n\nGo to https://colab.research.google.com/, sign in or sign up\n‚ÄúFile‚Äù-&gt; ‚Äúopen notebook‚Äù\nChoose 01_intro_AI_on_Supercomputer/00_mpi.ipynb from the list \n\n\n! wget https://raw.githubusercontent.com/argonne-lcf/ai-science-training-series/main/01_intro_AI_on_Supercomputer/mpi_pi.py\n! pip install mpi4py\n\n\n! mpirun -np 1 --allow-run-as-root python mpi_pi.py\n\nNumber of processes: 1\nPi = 3.1413128\nTime: 2.814826\n\n\n\n! mpirun -np 2 --allow-run-as-root --oversubscribe python mpi_pi.py\n\nNumber of processes: 2\nPi = 3.1405968\nTime: 1.423310\n\n\n\n! mpirun -np 4 --allow-run-as-root --oversubscribe python mpi_pi.py\n\nNumber of processes: 4\nPi = 3.1424792\nTime: 0.729376\n\n\n\n\nRunning \\pi on Polaris\nssh &lt;username&gt;@polaris.alcf.anl.gov\nqsub -A ALCFAITP -l select=1 -q ALCFAITP -l walltime=0:30:00 -l filesystems=home:eagle\n# choose debug queue outside of the class\n# qsub -A ALCFAITP -l select=1 -q debug -l walltime=0:30:00 -l filesystems=home:eagle\n\nmodule load conda/2023-10-04\nconda activate /soft/datascience/ALCFAITP/2023-10-04\ngit clone git@github.com:argonne-lcf/ai-science-training-series.git\ncd ai-science-training-series/01_intro_AI_on_Supercomputer/\nmpirun -np 1 python mpi_pi.py   # 3.141988,   8.029037714004517  s\nmpirun -np 2 python mpi_pi.py   # 3.1415096   4.212774038314819  s\nmpirun -np 4 python mpi_pi.py   # 3.1425632   2.093632459640503  s\nmpirun -np 8 python mpi_pi.py   # 3.1411632   1.0610620975494385 s",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[5] MCMC Example"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/5-mcmc-example/index.html#parallel-computing-in-ai",
    "href": "00-intro-AI-HPC/5-mcmc-example/index.html#parallel-computing-in-ai",
    "title": "Example: Approximating \\pi using Markov Chain Monte Carlo (MCMC)",
    "section": "Parallel computing in AI",
    "text": "Parallel computing in AI\nThe parallel computing in AI is usually called distributed training.\nDistributed training is the process of training I models across multiple GPUs or other accelerators, with the goal of speeding up the training process and enabling the training of larger models on larger datasets.\nThere are two ways of parallelization in distributed training.\n\nData parallelism:\n\nEach worker (GPU) has a complete set of model\ndifferent workers work on different subsets of data.\n\nModel parallelism\n\nThe model is splitted into different parts and stored on different workers\nDifferent workers work on computation involved in different parts of the model\n\n\n\n\n\n\n\n\nFigure¬†1: PI\n\n\n\n\n\n\n\n\n\nFigure¬†2: 3D LLM",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[5] MCMC Example"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/3-python/index.html#using-the-shell",
    "href": "00-intro-AI-HPC/3-python/index.html#using-the-shell",
    "title": "Using Python",
    "section": "üêö Using the Shell",
    "text": "üêö Using the Shell\n\n\n\n\n\n\nTipüìì References\n\n\n\n\n\n\nCourse overview + the shell ¬∑ Missing Semester\nShell Tools and Scripting ¬∑ Missing Semester",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[3] Using Python"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/3-python/index.html#intro-to-python",
    "href": "00-intro-AI-HPC/3-python/index.html#intro-to-python",
    "title": "Using Python",
    "section": "üêç Intro to Python",
    "text": "üêç Intro to Python\n\n\n\n\n\n\nTipüìì References\n\n\n\n\n\n\nThe Python Tutorial\nPython For Beginners\nA Whirlwind Tour of Python\nPython Data Science Handbook\nPython Introduction¬†| Google for Developers\nfoundational_hpc_skills/intro_to_python at master ¬∑ olcf/foundational_hpc_skills",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[3] Using Python"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/1-shared-resources/index.html",
    "href": "00-intro-AI-HPC/1-shared-resources/index.html",
    "title": "Shared Resources",
    "section": "",
    "text": "Supercomputers contain many computer nodes and not every application will use ALL of them. Therefore, we use programs called schedulers that allow users to schedule a job based on how many nodes they need for a specified time.\nA job is defined by a user and requires these parameters to be defined:",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[1] Shared Resources"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/1-shared-resources/index.html#polaris-activity-webpage",
    "href": "00-intro-AI-HPC/1-shared-resources/index.html#polaris-activity-webpage",
    "title": "Shared Resources",
    "section": "Polaris Activity Webpage",
    "text": "Polaris Activity Webpage\n\nWe have a page that shows all the current activity on Polaris. The top of the page shows a graphical representation of all nodes. Colors indicate a job running on that node. Below the graphic there is a table that lists running and queued jobs.\n\nrunning refers to jobs running right now on comptuer nodes. If you hover on a colored node in the graphic, it will highlight all the nodes used by the same job AND the job in the running table below.\nqueued jobs are waiting for an opening in which to run.\n\nüìä Live Status of Jobs on Polaris\n\n\n\npolaris-activity",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[1] Shared Resources"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/index.html#contents",
    "href": "00-intro-AI-HPC/index.html#contents",
    "title": "Introduction to AI on Supercomputers",
    "section": "Contents",
    "text": "Contents\n\nüìÇ 00-intro-AI-HPC/\n\nüìÑ 0-compute-systems\nüìÑ 1-shared-resources\nüìó 2-jupyter-notebooks\nüìÑ 3-python\nüìÑ 4-data\n\n\nLink to original slides: https://drive.google.com/file/d/1PH6HlXPhsVB1wDcEkfRSZrDQTqWBi7aH/view?usp=sharing",
    "crumbs": [
      "[00] Intro to AI and HPC"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Intro to HPC Bootcamp 2025",
    "section": "üê£ Getting Started",
    "text": "üê£ Getting Started\ngit clone https://github.com/saforem2/intro-hpc-bootcamp-2025\ncd intro-hpc-bootcamp-2025"
  },
  {
    "objectID": "index.html#project-contents",
    "href": "index.html#project-contents",
    "title": "Intro to HPC Bootcamp 2025",
    "section": "üìÇ Project Contents",
    "text": "üìÇ Project Contents\n\nüè° Intro to {AI, HPC} for Science/\n\nüìÇ [00] Intro to AI and HPC/\n\nüìÑ [0] Compute systems\nüìÑ [1] Shared-resources\nüìÑ [2] Jupyter Notebooks\nüìÑ [3] Using Python\nüìÑ [4] Working with Data\nüìó [5] MCMC Example\nüìó [6] Linear Regression\nüìó [7] Statistical Learning\n\nüìÇ [01] Neural Networks/\n\nüìÑ [0] Intro\nüìó [1] MNIST\nüìó [1] MNIST (ipynb)\nüìÑ [2] Advanced\nüìó [3] Conv. Nets\nüìó [4] Representation Learning\nüìó [5] Distributed Training\n\nüìÇ [02] Large Language Models\n\nüìÑ [00] Intro to LLMs\nüìó [01] Hands-on LLMs\nüìÑ [02] Prompt Engineering \nüìó [06] Parallel Training\nüìó [07] Shakespeare Example\nüìó [08] Shakespeare Example (colab)\n\nüìÇ 03-ai-for-science/"
  },
  {
    "objectID": "00-intro-AI-HPC/0-compute-systems/index.html#overview",
    "href": "00-intro-AI-HPC/0-compute-systems/index.html#overview",
    "title": "What is a Supercomputer?",
    "section": "Overview",
    "text": "Overview\nArgonne hosts DOE supercomputers for use by research scientists in need of large computational resources. Supercomputers are composed of many computing nodes (1 node = 1 physical computer) that are connected by a high-speed communications network so that groups of nodes can share information quickly, effectively operating together as a larger computer.",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[0] Compute Systems"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/0-compute-systems/index.html#a-compute-node",
    "href": "00-intro-AI-HPC/0-compute-systems/index.html#a-compute-node",
    "title": "What is a Supercomputer?",
    "section": "A Compute Node",
    "text": "A Compute Node\nIf you look inside your Desktop or Laptop you‚Äôll find these parts:\n\n\n\n\n\n\nFigure¬†1: Typical computer parts\n\n\n\nA computing node of a supercomputer is very similar, each has simliar parts, but it is designed as a single unit that can be inserted and removed from large closet-sized racks with many others:\n\n\n\n\n\n\nFigure¬†2: Blade\n\n\n\nIn large supercomputers multiple computer processors (CPUs) and/or graphics processors (GPUs) are combined into a single node. It has a CPU on which the local operating system runs. It has local memory for running software. It may have GPUs for doing intensive calculations. Each node has a high-speed network connection that allows it to communicate with other nodes and to a large shared filesystem.",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[0] Compute Systems"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/0-compute-systems/index.html#clusterhpc-computing-hardware-setup",
    "href": "00-intro-AI-HPC/0-compute-systems/index.html#clusterhpc-computing-hardware-setup",
    "title": "What is a Supercomputer?",
    "section": "Cluster/HPC Computing Hardware Setup",
    "text": "Cluster/HPC Computing Hardware Setup\n\n\n\n\n\n\nFigure¬†3: Network diagram of a typical supercomputer\n\n\n\nLarge computer systems typically have worker nodes and login nodes. login nodes are the nodes on which every user arrives when they login to the system. login nodes should not be used for computation, but for compiling code, writing/editing code, and launching jobs on the system. A job is the application that will be launched on the worker nodes of the supercomputer.",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[0] Compute Systems"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/0-compute-systems/index.html#supercomputers-are-big",
    "href": "00-intro-AI-HPC/0-compute-systems/index.html#supercomputers-are-big",
    "title": "What is a Supercomputer?",
    "section": "Supercomputers are Big!",
    "text": "Supercomputers are Big!\nThese supercomputers occupy a lot of space in the ACLF data center. Here is our staff (and interns! from summer 2023) in front of Aurora.\n\n\n\n\n\n\nFigure¬†4: ALCF Staff",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[0] Compute Systems"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/0-compute-systems/index.html#alcf-computing-system-overview",
    "href": "00-intro-AI-HPC/0-compute-systems/index.html#alcf-computing-system-overview",
    "title": "What is a Supercomputer?",
    "section": "ALCF Computing System Overview",
    "text": "ALCF Computing System Overview\n\nAurora\n\nAurora is a supercomputer at Argonne National Laboratory, housed in the Argonne Leadership Computing Facility (ALCF). It is the first exascale supercomputer in the United States and is designed to deliver unprecedented performance for scientific research and simulations.\nSee Aurora for more information.\n\nAt this time (August 2025), Aurora is open for business! It is amongst the most power supercomputers in thew world, currently sitting at #2 on the Top500.\nHere you can see one of the many rows of Aurora nodes with their Red & Blue water cooling conduits visible.\n\n\n\n\n\n\nFigure¬†5: Aurora\n\n\n\nIn this photo you see a close up of the 16 nodes installed side-by-side:\n\n\n\n\n\n\nFigure¬†6: Aurora\n\n\n\n\n\nSophia\nInside Sophia, you‚Äôll see repetition, though NVidia placed these fancy plates over the hardware so you only see their logo.\nHowever, each plate covers 1 computer node.\n\n\n\nSophia Racks\nSophia Inside\n\n\n\n\n\n\n\n\n\nSophia is an NVIDIA DGX A100-based system. The DGX A100 comprises eight NVIDIA A100 GPUs that provide a total of 320 gigabytes of memory for training AI datasets, as well as high-speed NVIDIA Mellanox ConnectX-6 network interfaces.\nSophia Machine Specs\n\nSpeed: 3.9 petaflops\nEach Node has:\n\n8 NVIDIA (A100) GPUs each with 40GB onboard memory\n2 AMD EPYC (7742) CPUs\n1 TB DDR4 Memory\n\n24 Total Nodes installed in 7 Racks\n\n\n\nPolaris\n\n\n\nPolaris\n\n\nThe inside of Polaris again shows the nodes stacked up in a closet.\n\n\n\nPolaris-rack\n\n\nPolaris is an NVIDIA A100-based system.\nPolaris Machine Specs\n\nSpeed: 44 petaflops\nEach Node has:\n\n4 NVIDIA (A100) GPUs\n1 AMD EPYC (Milan) CPUs\n\n~560 Total Nodes",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[0] Compute Systems"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/2-jupyter-notebooks/index.html#nersc-instructions",
    "href": "00-intro-AI-HPC/2-jupyter-notebooks/index.html#nersc-instructions",
    "title": "Jupyter Notebooks on Supercomputers",
    "section": "NERSC Instructions",
    "text": "NERSC Instructions\n\nProject Setup:\n\nLogin to Perlmutter:\nssh &lt;your_nersc_username&gt;@perlmutter.nersc.gov\nmkdir -p /global/cfs/cdirs/m4388/$USER/\ncd /global/cfs/cdirs/m4388/$USER\n\nUsing Jupyter on Perlmutter @ NERSC\n\njupyter.nersc.gov\n\n\n  &lt;p&gt;Your browser does not support iframes.&lt;/p&gt;\n\n\n\n\n\nALCF Instructions\n\n\n\nLogging In: https://jupyter.alcf.anl.gov/\nSelect ‚ÄúLogin Polaris‚Äù and use your ALCF credentials and Multi-Factor Authentication.\n\n\n\n\n\n\nNoteüìù Note\n\n\n\n\n\nSome of the images below show ‚ÄúThetaGPU‚Äù being used, however, similar instructions apply to ‚ÄúPolaris‚Äù or ‚ÄúSophia‚Äù.\n\n\n\n\n\n\nLogin GIF\n\n\nServer settings & start up\n\n\n\nserver options\n\n\nYou‚Äôll want to set your server options to the following:\n\njob profile: ThetaGPU Compute Node\nSophia Queue: by-gpu\nProject List: ALCFAITP\nRuntime: can be 5 to 60 minutes\n\nWhen you click ‚Äústart‚Äù you are submitting a job to the batch queue and waiting for the job to begin.\nServer shutdown & logout\nALCF‚Äôs guiding policy is:\n\n‚ÄúWe ask that all users follow good etiquette and be excellent to one another.‚Äù\n\nIf you simply close your browser window, or logout without shutting down the jupyter server, your job will continue to occupy the worker node. Be considerate and shutdown your job when you finish.\n\n\n\nShutdown GIF",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[2] Jupyter Notebooks"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/4-data/index.html#references",
    "href": "00-intro-AI-HPC/4-data/index.html#references",
    "title": "Working with Data in Python",
    "section": "References",
    "text": "References\n\nMachineLearningStatistics/notebooks/Visualization.ipynb",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[4] Working with Data"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html",
    "title": "Example: Linear Regression",
    "section": "",
    "text": "In this notebook, we will talk about:",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html#how-to-run-this-notebook-on-polaris",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html#how-to-run-this-notebook-on-polaris",
    "title": "Example: Linear Regression",
    "section": "How to run this notebook on Polaris",
    "text": "How to run this notebook on Polaris\n\nGo to https://jupyter.alcf.anl.gov, and click ‚ÄúLogin Polaris‚Äù\nAfter login, select ALCFAITP project and ALCFAITP queue during the lecture (use debug queue outside of the lecture)\nLoad the notebook and select ‚Äúdatascience/conda-2023-01-10‚Äù python kernel\n\n\n\n\n\n\n\nFigure¬†1\n\n\n\nHow to run this notebook on Google Colab\n\nGo to https://colab.research.google.com/, sign in or sign up\n‚ÄúFile‚Äù-&gt; ‚Äúopen notebook‚Äù\nChoose 01_intro_AI_on_Supercomputer/01_linear_regression_sgd.ipynb from the list\n\n\n\nGoogle Colab",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html#what-is-ai-training",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html#what-is-ai-training",
    "title": "Example: Linear Regression",
    "section": "What is AI training?",
    "text": "What is AI training?\nTwo ways of learning English:\n\nthrough learning rules;\nthrough hearing a lot of speakings\n\n\n\n\n\n\n\nFigure¬†2: Data Driven Learning\n\n\n\nI learned English in my middle school, and memorized a lot of grammar rules in my mind. Every time when I speak, I try to follow the grammar rules as much as I can. But I always break the rules.\nHowever, my daugher learned English differently. She learns speaking by hearing a lot of speaking from TV, teachers, classmates, and her older brother. The fact is that, she seldomly breaks grammar rules. This way of learning by observing patterns is very powerful! This is the essence of AI or data driven science.",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html#how-does-large-language-model-work",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html#how-does-large-language-model-work",
    "title": "Example: Linear Regression",
    "section": "How does large language model work?",
    "text": "How does large language model work?\nLarge Language Models, like GPT, function by pre-training on extensive datasets to learn language patterns, utilizing transformer architecture for contextual understanding, and can be fine-tuned for specific tasks, enabling them to generate coherent and contextually relevant text based on provided inputs.\n\n\n\n\n\n\nFigure¬†3\n\n\n\nMore complicated example:\n\n\n\n\n\nPoem about Albert Einstein\n\n\n\n\n\n\n\nPoem about Martin Luther\n\n\n\n\nYou can do this on https://chat.openai.com",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html#simplest-ai-model-example-linear-regression",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html#simplest-ai-model-example-linear-regression",
    "title": "Example: Linear Regression",
    "section": "Simplest AI model example: linear regression",
    "text": "Simplest AI model example: linear regression\nThis example is adopted from Bethany Lusch, ALCF.\nLinear regression is the simplest example learning from existing data for future prediction.\n\n\n\n\n\n\nFigure¬†4: Linear regression in Excel\n\n\n\nWe‚Äôre going to review the math involved in this process to help understand how training an AI works.\nFirst we will load some tools that others wrote and we can use to help us work.\n\nPandas: a toolkit for working with row vs. column data, like excel sheets, and CSV (Comma Seperated Values) files.\nNumpy: a toolkit for managing arrays, vectors, matrices, etc, doing math with them, slicing them up, and many other handy things.\nMatplotlib: a toolkit for plotting data\n\n\nimport os\nos.environ[\"FORCE_COLOR\"] = \"1\"\nos.environ[\"TTY_INTERACTIVE\"] = \"1\"\nimport ambivalent\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use(ambivalent.STYLES['ambivalent'])\nsns.set_context(\"notebook\")\nplt.rcParams[\"figure.figsize\"] = [6.4, 4.8]\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport IPython.display as ipydis\nimport time\n\nimport ezpz\nfrom rich import print\n\n[2025-08-05 12:51:50,140357][I][ezpz/__init__:265:ezpz] Setting logging level to 'INFO' on 'RANK == 0'\n\n\n\n[2025-08-05 12:51:50,142475][I][ezpz/__init__:266:ezpz] Setting logging level to 'CRITICAL' on all others 'RANK != 0'\n\n\n\n\nDataset\nWe used a realestate dataset from Kaggle to produce this reduced dataset.\nThis dataset contains the sale price and above ground square feet of many houses. We can use this data for our linear regression.\nWe use Pandas to read the data file which is stored as Comma Separated Values (CSV) and print the column labels.\nCSV files are similar to excel sheets.\n\n! [ -e ./slimmed_realestate_data.csv ] || wget https://raw.githubusercontent.com/argonne-lcf/ai-science-training-series/main/01_intro_AI_on_Supercomputer/slimmed_realestate_data.csv\ndata = pd.read_csv('slimmed_realestate_data.csv')\nprint(data.columns)\n\nIndex(['Unnamed: 0', 'SalePrice', 'GrLivArea'], dtype='object')\n\n\n\nNow pandas provides some helpful tools for us to inspect our data.\nIt provides a plot() function that, behind the scenes, is calling into the Matplotlib library and calling the function matplotlib.pyplot.plot().\nIn this case, we simply tell it the names of the columns we want as our x and y values and the style ('.' tells matplotlib to use a small dot to represent each data point).\n\ndata.plot(x='GrLivArea', y='SalePrice',style='o', alpha=0.8, markeredgecolor=\"#222\")\n\n\n\n\n\n\n\n\nor, even better yet, use seaborn to plot the data:\n\nsns.jointplot(\n    x=\"GrLivArea\",\n    y=\"SalePrice\",\n    data=data,\n    kind='reg',\n    color=(216 / 255.0, 100 / 255.0, 50 / 255.0, 0.33),\n)\n\n\n\n\n\n\n\n\n\n\nTheory of linear regression\nThe goal of learning regression is to find a line that is closest to all the points.\nThe slope and intercept of such a line y = m x + b can be found as:\nm = { n (\\Sigma xy) - (\\Sigma x) (\\Sigma y) \\over n (\\Sigma x^2) - (\\Sigma x)^2 } \nb = { (\\Sigma y) (\\Sigma x^2) - (\\Sigma x) (\\Sigma xy) \\over n (\\Sigma x^2) - (\\Sigma x)^2 } \nDetails derivation of this can be found here.\nWe‚Äôll break this calculation into a few steps to help make it easier.\nFirst lets define x and y. x will be our above ground square footage and y will be sale price. In our equations we have a few different values we need, such as n which is just the number of points we have:\n\nn = len(data)\n\nThen we need our x and y by selecting only the column we care about for each one. Note about data formats: data is a Pandas DataFrame object which has rows and columns; data['GrLivArea'] is a Pandas Series object which only has rows; then we also convert from Pandas data formats (in this case a Series) to Numpy data formats using the to_numpy() function which is part of the Pandas Series object.\n\nx = data['GrLivArea'].to_numpy()\ny = data['SalePrice'].to_numpy()\n\nNow we will calculate \\Sigma xy, \\Sigma x, \\Sigma y, and \\Sigma x^2:\n\nsum_xy = np.sum(x*y)\nsum_x = np.sum(x)\nsum_y = np.sum(y)\nsum_x2 = np.sum(x*x)\n\nThe denominator in the equation for m and b are the same so we can calculate that once:\n\ndenominator = n * sum_x2 - sum_x * sum_x\n\nThen we can calculate our fit values:\n\nm = (n * sum_xy - sum_x * sum_y) / denominator\nb = (sum_y * sum_x2 - sum_x * sum_xy) / denominator\nprint('y = %f * x + %f' % (m,b))\n\n# saving these for later comparison\nm_calc = m\nb_calc = b\n\ny = 87.688145 * x + 34754.077892\n\n\n\nNow we can plot the fit results with our data to see how we did.\nFirst we define a plotting function because we‚Äôre going to do this often and we want to reuse our code:\n\ndef plot_data(x,y,m,b,plt = plt):\n   # plot our data points with 'bo' = blue circles\n   plt.plot(x, y, 'o', alpha=0.8, markeredgecolor=\"#222\")\n   # create the line based on our linear fit\n   # first we need to make x points\n   # the 'arange' function generates points between two limits (min,max)\n   linear_x = np.arange(x.min(),x.max())\n   # now we use our fit parameters to calculate the y points based on our x points\n   linear_y = linear_x * m + b\n   # plot the linear points using 'r-' = red line\n   plt.plot(linear_x, linear_y, 'r-', label='fit')\n\nNow can use this function to plot our results:\n\nplot_data(x,y,m,b)\n\n\n\n\n\n\n\n\n\n\nTraining through Stochastic Gradient Descent (SGD)\nSGD is a common method in AI for training deep neural networks on large datasets. It is an iterative method for optimizing a loss function that we get to define. We will use this simple linear regression to demonstrate how it works.\n\nThe model\nIn AI, neural networks are often referred to as a model because, once fully trained, they should model (AKA predict) the behavior of our system. In our example, the system is how house prices vary based on house size. We know our system is roughly driven by a linear function:\n\\hat{y_i}(x_i) = m * x_i + b \nWe just need to figure out m and b. Let‚Äôs create a function that calculates our model given x, m, and b.\n\ndef model(x,m,b):\n   return m * x + b\n\n\n\nThe Loss Function\nA loss function, or objective function, is something we define and is based on what we want to achieve. In the method of SGD, it is our goal to minimize (or make close to zero) the values calculated from the loss function. In our example, we ideally want the prediction of our model to be equal to the actual data, though we will settle for ‚Äúas close as possible‚Äù.\nSo we will select our loss function to be the Mean Squared Error function:\n L(y_i,\\hat{y_i}) = (y_i - \\hat{y_i}(x_i))^2 \nwhere y_i is our i^{th} entry in the data['SalePrice'] vector and \\hat{y_i} is the prediction based on evaluting m * x_i + b.\nThis function looks like the figure below when we plot it with x=y_i - \\hat{y_i}(x_i) and we we want to be down near y_i - \\hat{y_i}(x_i) = 0 which indicates that our y_i is as close as possible to \\hat{y_i}.\n\n\n\n\n\n\nFigure¬†5: Loss function for linear regression\n\n\n\nHere we crate a function that calculates this for us.\n\ndef loss(x,y,m,b):\n   y_predicted = model(x,m,b)\n   return np.power( y - y_predicted, 2 )\n\n\n\nMinimizing the Loss Function\nWe want to use the loss function in order to guide how to update m and b to better model our system. In calculus we learn to minimize a function with respect to a variable you calculate the partial derivative with respect to the variable you want to vary.\n { \\partial L \\over \\partial m } = 0 \nThe location of the solution to this is the minimum as shown in the figure above. We can write down the partial derivative of the loss function as:\n { \\partial L \\over \\partial m } = -2 x_i (y_i - \\hat{y_i}(x_i))   { \\partial L \\over \\partial b } = -2 (y_i - \\hat{y_i}(x_i)) \nWe can use this to calculate an adjustment to m and b that will reduce the loss function, effectively improving our fitting parameters. This is done using this equation:\n m' = m - \\eta { \\partial L \\over \\partial m }  b' = b - \\eta { \\partial L \\over \\partial b }\nHere our original m and b are adjusted by the partial derivative multiplied by some small factor, \\eta, called the learning rate. This learning rate is very important in our process and must be tuned for every problem.\nIn our example, the selection of the learning rate essentially defines how close we can get to the minimum, AKA the best fit solution. This figure shows what happens when we pick a large learning rate. We first select a starting point in our loss function (typically randomly), then every update from m/b to m'/b' results in a shift to somewhere else on our loss function (following the red arrows). In this example, our learning rate (\\eta) has been selected too large such that we bounce back and forth around the minimum, never reaching it.\n\n\n\n\n\n\nFigure¬†6: Large LR\n\n\n\nIf we select a smaller learning we can see better behavior in the next figure.\n\n\n\n\n\n\nFigure¬†7: Small LR\n\n\n\nThough, keep in mind, too small a learning rate results is so little progress toward the minimum that you may never reach it!\nA pit fall of SGD that one must be aware of is when your loss function is complex, with many minima. The next figure shows such a case, in which we select a small learning rate and our starting point happens to be near a local minimum that is not the lowest minimum. As shown, we do reach a minimum, but it isn‚Äôt the lowest minimum in our loss function. It could be that we randomly select a starting point near the minimum we care about, but we should build methods that are more robust against randomly getting the right answer.\n\n\n\n\n\n\nFigure¬†8: Local minimal with small LR\n\n\n\nThen, if we increase our learning rate too much, we bounce around again.\n\n\n\n\n\n\nFigure¬†9: Local minimal with large LR\n\n\n\nWhat we want to do in this situation is start with a large learning rate and slowly reduce its size as we progress. That is shown in this next figure.\n\n\n\n\n\n\nFigure¬†10: Local min with variable LR\n\n\n\nAs you can see, this process is not perfect and could still land in a local minimum, but it is important to be aware of these behaviors as you utilize SGD in machine learning.\nSo let‚Äôs continue, we‚Äôll build functions we can use to update our fit parameters, m and b.\n\ndef updated_m(x,y,m,b,learning_rate):\n   dL_dm = - 2 * x * (y - model(x,m,b))\n   dL_dm = np.mean(dL_dm)\n   return m - learning_rate * dL_dm\n\ndef updated_b(x,y,m,b,learning_rate):\n   dL_db = - 2 * (y - model(x,m,b))\n   dL_db = np.mean(dL_db)\n   return b - learning_rate * dL_db",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html#putting-it-together",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html#putting-it-together",
    "title": "Example: Linear Regression",
    "section": "Putting it together",
    "text": "Putting it together\nWe can now randomly select our initial slope and intercept:\n\nm = 5.\nb = 1000.\nprint(f\"y_i = {m:.2f} * x + {b:.2f}\")\n# print('y_i = %.2f * x + %.2f' % (m,b))\n\ny_i = 5.00 * x + 1000.00\n\n\n\nThen we can calculate our Loss function:\n\nl = loss(x,y,m,b)\nprint(f'first 10 loss values: {l[:10]}')\n\nfirst 10 loss values: [3.03421561e+10 3.55511025e+10 1.24579082e+10 1.91656336e+10\n 1.60604929e+10 2.04432804e+10 1.72410030e+10 1.76517796e+10\n 1.52769600e+10 2.18152900e+10]\n\n\n\n\nlearning_rate = 1e-9\nm = updated_m(x,y,m,b,learning_rate)\nb = updated_b(x,y,m,b,learning_rate)\nprint('y_i = %.2f * x + %.2f     previously calculated: y_i = %.2f * x + %.2f' % (m,b,m_calc,b_calc))\nplot_data(x,y,m,b)\n\ny_i = 5.47 * x + 1000.00     previously calculated: y_i = 87.69 * x + 34754.08\n\n\n\n\n\n\n\n\n\n\n\n# set our initial slope and intercept\nm = 5.\nb = 1000.\n# batch_size = 60\n# set a learning rate for each parameter\nlearning_rate_m = 1e-7\nlearning_rate_b = 1e-1\n# use these to plot our progress over time\nloss_history = []\n# convert panda data to numpy arrays, one for the \"Ground Living Area\" and one for \"Sale Price\"\ndata_x = data['GrLivArea'].to_numpy()\ndata_y = data['SalePrice'].to_numpy()\n# we run our loop N times\nloop_N = 30\nfor i in range(loop_N):\n    # update our slope and intercept based on the current values\n    m = updated_m(data_x,data_y,m,b,learning_rate_m)\n    b = updated_b(data_x,data_y,m,b,learning_rate_b)\n\n    # calculate the loss value\n    loss_value = np.mean(loss(data_x,data_y,m,b))\n\n    # keep a history of our loss values\n    loss_history.append(loss_value)\n\n    # print our progress\n    mstr = \" \".join([\n        f\"[{i:03d}]\",\n        f\"dy_i = {m:.2f} * x + {b:.2f}\",\n        f\"previously calculated: y_i = {m_calc:.2f} * x + {b_calc:.2f}\",\n        f\"loss: {loss_value:.2f}\",\n    ])\n    print(mstr)\n    # print(\n    #         '[%03d]  dy_i = %.2f * x + %.2f     previously calculated: y_i = %.2f * x + %.2f    loss: %f' % (i,m,b,m_calc,b_calc,loss_value))\n\n    # close/delete previous plots\n    plt.close('all')\n\n    dfigsize = plt.rcParams['figure.figsize']\n    # create a 1 by 2 plot grid\n    fig,ax = plt.subplots(1,2, figsize=(dfigsize[0]*2,dfigsize[1]))\n    # lot our usual output\n    plot_data(data_x,data_y,m,b,ax[0])\n\n    # here we also plot the calculated linear fit for comparison\n    line_x = np.arange(data_x.min(),data_x.max())\n    line_y = line_x * m_calc + b_calc\n    ax[0].plot(line_x,line_y, color=\"#000\", linestyle=\":\" ,label='calculated')\n    # add a legend to the plot and x/y labels\n    ax[0].legend()\n    ax[0].set_xlabel('square footage')\n    ax[0].set_ylabel('sale price')\n\n    # plot the loss \n    loss_x = np.arange(0,len(loss_history))\n    loss_y = np.asarray(loss_history)\n    ax[1].plot(loss_x,loss_y, 'o-')\n    ax[1].set_yscale('log')\n    ax[1].set_xlabel('loop step')\n    ax[1].set_ylabel('loss')\n    plt.show()\n    # gives us time to see the plot\n    time.sleep(2.5)\n    # clears the plot when the next plot is ready to show.\n    ipydis.clear_output(wait=True)\n\n[029] dy_i = 88.89 * x + 32912.24 previously calculated: y_i = 87.69 * x + 34754.08 loss: 1478200827.64",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html#homework",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html#homework",
    "title": "Example: Linear Regression",
    "section": "Homework",
    "text": "Homework\n\nMini Batch Training\nIn AI, datasets are often very large and cannot be processed all at once as is done in the loop above. The data is instead randomly sampled in smaller batches where each batch contains batch_size inputs.\nHow can you change the loop above to sample the dataset in smaller batches?\nHint: Our data variable is a Pandas DataFrame object, search for ‚Äúhow to sample a DataFrame‚Äù.\nInstead of using the entire dataset like:\ndata_x = data['GrLivArea'].to_numpy()\ndata_y = data['SalePrice'].to_numpy()\nUse\ndata_batch = data.sample(batch_size)\ndata_x = data_batch['GrLivArea'].to_numpy()\ndata_y = data_batch['SalePrice'].to_numpy()\nYou also have to adjust the loop_N accordingly to make sure that it loop over the entire datasets the same number of times.\nloop_N = 30*len(data)//batch_size\nPlease plot your learning curve for different batch size, such as 32, 64, 128, 256, 512.\n\n\nLearning rate issue (Bonus)\nAs described above, if the learning rate is too large, it will affect the convergence. Do your training with (batch_size = 64, learning_rate_m = 1e-7, learning_rate_b = 1e-1). Then linearly increase the batch size and learning rate until you see the training does not converge.\n(64, 1e-7, 1e-1)*1\n(64, 1e-7, 1e-1)*2\n(64, 1e-7, 1e-1)*4\n(64, 1e-7, 1e-1)*8\n...\nHow to submit your homework\n\nFork the github repo to your personal github\nMake change to the 01_linear_regression_sgd.ipynb, and then push to your personal github\nProvide the link of 01_linear_regression_sgd in the personal github.\n\n\n\n\nHomework Answer\n\n\nLet us define a train function which allow us to try different hyperparameter setups.\n\nx = data['GrLivArea'].to_numpy()\ny = data['SalePrice'].to_numpy()\n\ndef train(batch_size, epochs=30, learning_rate_m = 1e-7, learning_rate_b = 1e-1):\n    loss_history = []\n    num_batches = len(data)//batch_size\n    loop_N = epochs*num_batches\n    m = 5.\n    b = 1000.\n    for i in range(loop_N):\n        data_batch = data.sample(batch_size)\n        data_x = data_batch['GrLivArea'].to_numpy()\n        data_y = data_batch['SalePrice'].to_numpy()\n        # update our slope and intercept based on the current values\n        m = updated_m(data_x,data_y,m,b,learning_rate_m)\n        b = updated_b(data_x,data_y,m,b,learning_rate_b)\n\n        # calculate the loss value\n        loss_value = np.mean(loss(data_x,data_y,m,b))\n\n        # keep a history of our loss values\n        loss_history.append(loss_value)\n    #loss_last_epoch = np.sum(loss_history[-num_batches:]*batch_size)/len(data)\n    return m, b, np.mean(loss(x,y,m,b))",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html#minibatch-training",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html#minibatch-training",
    "title": "Example: Linear Regression",
    "section": "Minibatch training",
    "text": "Minibatch training\n\nprint('previously calculated: y_i = %.2f * x + %.2f    loss: %f\\n=======================================' % (m_calc,b_calc,loss_value))\n\n\nfor bs in 64, 128, 256, 512:\n    m, b, l = train(bs, epochs=30)\n    print(f\"batch size: {bs}, m={m:.4f}, b={b:.4f}, loss={l:.4f}\")\n\npreviously calculated: y_i = 87.69 * x + 34754.08    loss: 1478200827.641291\n=======================================\n\n\n\nbatch size: 64, m=81.4346, b=37598.9686, loss=1524042838.5582\n\n\n\nbatch size: 128, m=82.9546, b=36569.2526, loss=1507453099.5719\n\n\n\nbatch size: 256, m=88.9217, b=33983.0016, loss=1479132254.9839\n\n\n\nbatch size: 512, m=88.9744, b=33121.6436, loss=1478267991.4074\n\n\n\nWe see that eventually, we all get similar results with the minibatch training. Of course, here, we still keep the same learning rate. A gene",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/6-linear-regression/index.html#learning-rate",
    "href": "00-intro-AI-HPC/6-linear-regression/index.html#learning-rate",
    "title": "Example: Linear Regression",
    "section": "Learning rate",
    "text": "Learning rate\n\nfor i in 1, 2, 4, 8:\n    bs, lrm, lrb = np.array([64, 1e-7, 1e-1])*i\n    bs = int(bs)\n    m, b, l = train(int(bs), epochs=30, learning_rate_m = lrm, learning_rate_b = lrb)\n    print(f\"batch size: {bs}, m={m:.4f}, b={b:.4f}, loss={l:.4f}\")\n\nbatch size: 64, m=89.9543, b=33462.2763, loss=1482797783.8074\n\n\n\nbatch size: 128, m=89.8994, b=34131.8465, loss=1485330197.9274\n\n\n\nbatch size: 256, m=83.4639, b=38002.0392, loss=1489970643.3773\n\n\n\nbatch size: 512, m=60644.7371, b=28757847.8287, loss=13999940210285804.0000\n\n\n\nWe can see that, if we increase the batch size and the learning rate proportionally, at certain point, it does not converge for example for the case batch size = 512. To increase the learning rate proportional to the batch size is a general practice. However, if the learning rate is too large, it will continue to move around without finding a local minimum. One trick, people can do is to start with a smaller learning rate in the first few steps / epochs, and once the optimization becomes stable, increase the learning rate proportional to the batch size.",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[6] Linear Regression"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/8-clustering/index.html#import-python-packages",
    "href": "00-intro-AI-HPC/8-clustering/index.html#import-python-packages",
    "title": "Statistical Learning",
    "section": "Import Python packages",
    "text": "Import Python packages\nFortunately a lot of common data science tools are freely available in the python ecosystem (look at PyPi for details).\n\nScikit-learn: import sklearn\nMatplotlib: import matplotlib.pyplot as plt, import matplotlib as mpl\nSeaborn: import seaborn as sns\n\nWe can use matplotlib and seaborn for plotting data.\n\n%load_ext autoreload\n%autoreload 2\nimport matplotlib_inline.backend_inline\nmatplotlib_inline.backend_inline.set_matplotlib_formats('retina', 'svg', 'png')\nimport matplotlib.pyplot as plt\nimport ambivalent\nplt.style.use(ambivalent.STYLES['ambivalent'])\nplt.rcParams[\"figure.figsize\"] = plt.rcParamsDefault[\"figure.figsize\"]\n\n\nimport os\nimport time\n\nimport IPython.display as ipydis\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\nfrom sklearn import datasets  # Cancer dataset\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import (\n    MinMaxScaler,\n    RobustScaler,\n    # Data processors\n    StandardScaler,\n)\n\n# set random seed for reproducibility\nSEED = 42\nDFIGSIZE = plt.rcParamsDefault[\"figure.figsize\"]\n\nimport bootcamp\n\nbootcamp.__file__\n\n'/Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/src/bootcamp/__init__.py'",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[8] Clustering"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/8-clustering/index.html#learning-to-cluster-data",
    "href": "00-intro-AI-HPC/8-clustering/index.html#learning-to-cluster-data",
    "title": "Statistical Learning",
    "section": "Learning to Cluster Data",
    "text": "Learning to Cluster Data\nNext we if have data with distinct groupings, the objective is to devise a method for labeling our data by its group in an automated way. We will demonstrate this, first, on a toy dataset that we design to have a lower inherent dimensionality, then we move to a higher dimensional dataset.",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[8] Clustering"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/8-clustering/index.html#toy-dataset-2-d-blobs",
    "href": "00-intro-AI-HPC/8-clustering/index.html#toy-dataset-2-d-blobs",
    "title": "Statistical Learning",
    "section": "Toy dataset (2-D blobs)",
    "text": "Toy dataset (2-D blobs)\nDefine 3 blobs of data on a 2D plane\n\nfrom bootcamp.plots import COLORS, scatter\nfrom matplotlib.colors import ListedColormap\nfrom rich import print\n\nplt.rcParams[\"figure.facecolor\"] = \"none\"\nplt.rcParams[\"axes.facecolor\"] = \"none\"\nplt.rcParams[\"grid.linewidth\"] = 1.0\nplt.rcParams[\"grid.alpha\"] = 1.0\n\n\nn_samples = 1000  # 300 2D data points\nn_features = 2  # 2D data\nn_clusters = 4  # 3 unique blobs\n\n# https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_blobs.html\n# -- Returns --------------------------------------------------------\n# x (n_samples, n_features): The generated samples.\n# y (n_samples,): Int labels for cluster membership of each sample.\n# -------------------------------------------------------------------\ncmap = ListedColormap(list(COLORS.values()))\nx, y = datasets.make_blobs(\n    n_samples=n_samples, n_features=n_features, centers=n_clusters, random_state=SEED\n)\nscatter_kwargs = {\n    \"xlabel\": \"x0\",\n    \"ylabel\": \"x1\",\n    \"cmap\": cmap,\n    \"plot_kwargs\": {\n        \"alpha\": 0.4,\n        \"edgecolor\": \"#222\",\n    },\n}\n_ = scatter(x, y, **scatter_kwargs)\n\n[2025-08-06 13:36:50,596076][I][ezpz/__init__:265:ezpz] Setting logging level to 'INFO' on 'RANK == 0'\n\n\n\n[2025-08-06 13:36:50,598134][I][ezpz/__init__:266:ezpz] Setting logging level to 'CRITICAL' on all others 'RANK != 0'\n\n\n\n\n\n\n\n\n\n\nNormalizing the data features is always a good practice.\n\n# Normalize features\n# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html\nx_sc = StandardScaler().fit_transform(x)\n\nPlot the normalized data\n\nfig, (ax1, ax2) = plt.subplots(\n    figsize=(1.5 * DFIGSIZE[0], 0.8 * DFIGSIZE[1]),\n    ncols=2,\n    subplot_kw={\n        \"aspect\": \"equal\",\n    },\n)\nfig, ax1 = scatter(x, y, fig=fig, ax=ax1, title=\"Original\", **scatter_kwargs)\nfig.subplots_adjust(wspace=0.2)\nfig, ax2 = scatter(x_sc, y, fig=fig, ax=ax2, title=\"Normalized\", **scatter_kwargs)",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[8] Clustering"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/8-clustering/index.html#k-means-clustering",
    "href": "00-intro-AI-HPC/8-clustering/index.html#k-means-clustering",
    "title": "Statistical Learning",
    "section": "K-means Clustering",
    "text": "K-means Clustering\nK-means clustering aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.\n\nPick random starting centroids from data\n\nk initial ‚Äúmeans‚Äù (in this case, k = 3) are randomly generated within the data domain (shown in color)\n\nCalculate distance to each centroid\n\nk clusters are created by associating every observation with the nearest mean. The partitions here represent the Voroni diagram generated by the means\nFind nearest cluster for each point\n\nCalculate new centroids\n\nThe centroid of each of the k clusters becomes the new mean\n\nSteps 2 and 3 are repeated until convergence has been reached\n\n\n\n\n\n[1.]\n\n\n\n\n\n[2.]\n\n\n\n\n\n[3.]\n\n\n\n\n\n[4.]\n\n\n\n\nStep 1: Pick random starting centroids from data\n\nk initial ‚Äúmeans‚Äù (in this case, k=3) are randomly generated within the data domain (shown in color)\n\n\n\n\n\n\nFigure¬†1\n\n\n\n\n\ndef initialize_centroids(x: np.ndarray, n_clusters: int, seed: int = 123) -&gt; np.ndarray:\n    \"\"\"Initialize centroids.\n\n    Inputs:\n      - x (np.ndarray): Data of shape (num_points, num_features)\n      - n_clusters (int): Number of clusters to use\n      - seed (int): Random seed.\n\n    Outputs:\n      - centroids (np.ndarray): Randomly chosen from the data\n        with shape: (num_clusters, num_features).\n    \"\"\"\n    np.random.RandomState(seed)\n    # 1. Randomly permute data points\n    # 2. From this, pick the first `n_clusters` indices\n    # 3. Return these as our initial centroids\n    random_idx = np.random.permutation(x.shape[0])\n    centroids = x[random_idx[:n_clusters]]\n    return centroids\n\n\n\nStep 2a: Calculate distance to each centroid\n\nCalculate distance to each centroid\n\nk clusters are created by associating every observation with the nearest mean. The partitions here represent the Voroni diagram generated by the means\nFind nearest cluster for each point\n\n\n\n\n\n\n\nFigure¬†2\n\n\n\n\n\ndef compute_distance(\n    x: np.ndarray, centroids: np.ndarray, n_clusters: int\n) -&gt; np.ndarray:\n    \"\"\"Compute distance.\n\n    Inputs:\n      - x (np.ndarray): Input data of shape\n        (num_points, num_features)\n      - centroids (np.ndarray): Cluster centroids  with shape\n        (num_clusters, num_features)\n      - n_clusters (int): Number of clusters being used.\n\n    Outputs:\n      - distance (np.ndarray): Distance of each point\n        to each centroid with shape\n        (num_points, num_clusters)\n    \"\"\"\n    # distance vector\n    distance = np.zeros((x.shape[0], n_clusters))\n    # loop over each centroid\n    for k in range(n_clusters):\n        # calculate distance for each point from centroid\n        kcentroid_distance = x - centroids[k, :]\n        # apply normalization for stability\n        row_norm = np.linalg.norm(kcentroid_distance, axis=1)\n        # return distance squared\n        distance[:, k] = np.square(row_norm)\n\n    return distance\n\n\n\nStep 2b: Find nearest cluster for each point\n\ndef find_closest_centroid(distance: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Find closest centroid.\n\n    Inputs:\n      - distance (np.ndarray): Distance of each point to each centroid with shape\n        (num_points, num_clusters)\n\n    Outputs:\n      - nearest_centroid_indices (np.ndarray): Index of nearest centroid with shape\n        (num_points,)\n    \"\"\"\n    nearest_centroid_indices = np.argmin(distance, axis=1)\n    return nearest_centroid_indices\n\n\n\nStep 3: Calculate new centroids\n\nCalculate new centroids\n\nThe centroid of each of the k clusters becomes the new mean\n\n\n\n\n\n\n\nFigure¬†3\n\n\n\n\n\ndef compute_centroids(\n    x: np.ndarray, nearest_centroid_indices: np.ndarray, n_clusters: int\n) -&gt; np.ndarray:\n    \"\"\"Compute centroids.\n\n    Inputs:\n      - x (np.ndarray): Input data of shape\n        (num_points, num_features)\n      - nearest_centroid_indices: Index of nearest centroid of shape\n        (num_points,)\n      - n_clusters (int): Number of clusters being used\n\n    Outputs:\n      - centroids (np.ndarray): Cluster centroids with shape\n        (num_clusters, num_features)\n    \"\"\"\n    # new centroids vector\n    centroids = np.zeros((n_clusters, x.shape[1]))\n    # loop over each centroids\n    for k in range(n_clusters):\n        # calculate the mean of all points assigned to this centroid\n        centroids[k, :] = np.mean(x[nearest_centroid_indices == k, :], axis=0)\n    return centroids\n\n\n\nStep 4: Repeat until convergence\n\nSteps 2 and 3 are repeated until convergence has been reached\n\n\n\n\n\n\nFigure¬†4\n\n\n\n\n\nfrom __future__ import absolute_import, annotations, division, print_function\n\nfrom typing import Optional\n\nfrom bootcamp.plots import plot_kmeans_points\n\n\ndef apply_kmeans(\n    x: np.ndarray,\n    n_clusters: int,\n    iterations: int = 100,\n    seed: int = 123,\n    cmap: Optional[str] = None,\n) -&gt; tuple[np.ndarray, np.ndarray]:\n    \"\"\"Returns (centroids, cluster_id).\"\"\"\n    # ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n    # ‚îÉ initialize centroids:               ‚îÉ\n    # ‚îÉ   - shape: (n_clusters, x.shape[1]) ‚îÉ\n    # ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n    centroids = initialize_centroids(\n        x,  # (n_points, n_features)\n        n_clusters=n_clusters,\n        seed=seed,\n    )\n    # ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n    # ‚îÉ -- Iteratively improve centroid location ----------------- ‚îÉ\n    # ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n    # ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n    # ‚îÉ 1. Compute the distance from entries in x to each centroid ‚îÉ\n    # ‚îÉ    - distance.shape: (n_points, n_clusters)                ‚îÉ\n    # ‚îÉ 2. Return the closest cluster (0, 1, ..., n_clusters-1)    ‚îÉ\n    # ‚îÉ    - cluster_id.shape: (n_points)                          ‚îÉ\n    # ‚îÉ 3. Calculate the mean position of each labeled cluster     ‚îÉ\n    # ‚îÉ    - centroids.shape: (n_clusters, n_features)             ‚îÉ\n    # ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n    for i in range(iterations):\n        # save old centroids\n        old_centroids = centroids\n        distance = compute_distance(x, old_centroids, n_clusters)\n        cluster_id = find_closest_centroid(distance)\n        centroids = compute_centroids(x, cluster_id, n_clusters)\n\n        # plotting for visual comprehension\n        ipydis.clear_output(\"wait\")\n        print(f\"Iteration: {i}\")\n        plot_kmeans_points(x, centroids, cluster_id, cmap=cmap)\n        time.sleep(0.5)\n\n        # if our points are the same as the old centroids, then we can stop\n        if np.all(old_centroids == centroids):\n            print(f\"No change in centroids! Exiting!\")\n            break\n\n    return centroids, cluster_id\n\n\n\nRun example:\n\n# from bootcamp.plots import COLORS\n\ncmap = ListedColormap(list(COLORS.values()))\n\nn_samples = 5000\nn_features = 2  # 2D data\nn_clusters_true = 5  # unique blobs\nn_clusters_guess = 5\nSEED = 74512\niterations = 20\n\n# https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_blobs.html\nx, y = datasets.make_blobs(\n    n_samples=n_samples,\n    n_features=n_features,\n    centers=n_clusters_true,\n    # cluster_std=0.75,\n    random_state=SEED,\n)\n\nx_sc = StandardScaler().fit_transform(x)\n\ncentroids, cluster_id = apply_kmeans(\n    x_sc,\n    n_clusters_guess,\n    iterations,\n    SEED,\n    cmap=cmap,\n)\n\nIteration: 0\n\n\n\n\n\n\n\n\n\n\nIteration: 1\n\n\n\n\n\n\n\n\n\n\nIteration: 2\n\n\n\n\n\n\n\n\n\n\nIteration: 3\n\n\n\n\n\n\n\n\n\n\nNo change in centroids! Exiting!",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[8] Clustering"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/8-clustering/index.html#self-organizing-mapssom",
    "href": "00-intro-AI-HPC/8-clustering/index.html#self-organizing-mapssom",
    "title": "Statistical Learning",
    "section": "Self-organizing maps1",
    "text": "Self-organizing maps1\nSelf Organizing Maps (SOM) were proposed and became widespread in the 1980s, by a Finnish professor named Teuvo Kohonen and are also called ‚ÄòKohonen maps‚Äô.\nThe idea behind a SOM is that you‚Äôre mapping high-dimensional vectors onto a smaller dimensional (typically 2D) space. Vectors that are close in the high-dimensional space also end up being mapped to nodes that are close in 2D space thus preserving the ‚Äútopology‚Äù of the original data.\n\n# finding best matching unit\ndef find_bmu(t, net, n):\n    \"\"\"\n    Find the best matching unit for a given vector, t, in the SOM\n    Returns: a (bmu, bmu_idx) tuple where bmu is the high-dimensional BMU\n             and bmu_idx is the index of this vector in the SOM\n    \"\"\"\n    bmu_idx = np.array([0, 0])\n    # set the initial minimum distance to a huge number\n    # min_dist = #np.iinfo(np.int).max\n    min_dist = np.inf\n    # calculate the high-dimensional distance between each neuron and the input\n    for x in range(net.shape[0]):\n        for y in range(net.shape[1]):\n            w = net[x, y, :].reshape(n, 1)\n            # don't bother with actual Euclidean distance, to avoid expensive sqrt operation\n            sq_dist = np.sum((w - t) ** 2)\n            if sq_dist &lt; min_dist:\n                min_dist = sq_dist\n                bmu_idx = np.array([x, y])\n    # get vector corresponding to bmu_idx\n    bmu = net[bmu_idx[0], bmu_idx[1], :].reshape(n, 1)\n    # return the (bmu, bmu_idx) tuple\n    return (bmu, bmu_idx)\n\n\n# Decaying radius of influence\ndef decay_radius(initial_radius, i, time_constant):\n    return initial_radius * np.exp(-i / time_constant)\n\n\n# Decaying learning rate\ndef decay_learning_rate(initial_learning_rate, i, n_iterations):\n    return initial_learning_rate * np.exp(-i / n_iterations)\n\n\n# Influence in 2D space\ndef calculate_influence(distance, radius):\n    return np.exp(-distance / (2.0 * (radius**2)))\n\n\n# Update weights\ndef update_weights(net, bmu_idx, r, l):\n    wlen = net.shape[2]\n    for x in range(net.shape[0]):\n        for y in range(net.shape[1]):\n            w = net[x, y, :].reshape(wlen, 1)\n            # get the 2-D distance (again, not the actual Euclidean distance)\n            w_dist = np.sum((np.array([x, y]) - bmu_idx) ** 2)\n            # if the distance is within the current neighbourhood radius\n            if w_dist &lt;= r**2:\n                # calculate the degree of influence (based on the 2-D distance)\n                influence = calculate_influence(w_dist, r)\n                # now update the neuron's weight using the formula:\n                # new w = old w + (learning rate * influence * delta)\n                # where delta = input vector (t) - old w\n                new_w = w + (l * influence * (t - w))\n                # commit the new weight\n                net[x, y, :] = new_w.reshape(1, wlen)\n    return net\n\n\nGenerating ‚ÄúColor‚Äù data and normalizing\n\nraw_data = np.random.randint(0, 255, (10000, 3))  # JPEG like data\n# raw_data = np.random.uniform(size=(500, 3))\ndata = StandardScaler().fit_transform(raw_data)  # Normalized\n\n\n\nDefining SOM\nDefining network size, number of iterations and learning rate\n\nnetwork_dimensions = np.array([50, 50])\nn_iterations = 2500\ninit_learning_rate = 0.075\n\nEstablish size variables based on data\n\nm = data.shape[0]\nn = data.shape[1]\n\nWeight matrix (i.e.¬†the SOM) needs to be one n-dimensional vector for each neuron in the SOM\n\nnet = np.random.random(\n    (network_dimensions[0], network_dimensions[1], n)\n)  # 25 neurons each with a 3D vector\n\nInitial neighbourhood radius and decay parameter\n\ninit_radius = max(network_dimensions[0], network_dimensions[1]) / 2.0\ntime_constant = n_iterations / np.log(init_radius)\n\n\n\nInitial state of SOM color network\n\nplt.rcParams[\"image.cmap\"] = \"rainbow\"\nfig, ax = plt.subplots(figsize=(4, 4))\nimage = ax.matshow(net)\n# _ = fig.colorbar(image)\n_ = plt.show()\n\n\n\n\n\n\n\n\n\n\nTraining SOM\n\ndef normalize(x: np.ndarray) -&gt; np.ndarray:\n    return (x - np.min(x)) / (np.max(x) - np.min(x))\n\n\nplt.rcParams[\"figure.figsize\"] = [\n    i / 2.0 for i in plt.rcParamsDefault[\"figure.figsize\"]\n]\ninit_learning_rate = 0.1\n# net = np.random.uniform(size=net.shape)\n# net = (255 * ((net + 1.) / 2.))\nimages = []\nfor iteration in range(250):\n    # select a training example at random - shape of 1x3\n    t = data[np.random.randint(0, m), :].reshape(np.array([n, 1]))\n    # find its Best Matching Unit\n    bmu, bmu_idx = find_bmu(t, net, n)  # Gives the row, column of the best neuron\n    # decay the SOM parameters\n    r = decay_radius(init_radius, iteration, time_constant)\n    l = decay_learning_rate(init_learning_rate, iteration, n_iterations)\n    # Update SOM weights\n    net = update_weights(net, bmu_idx, r, l)\n    if iteration % 10 == 0:\n        # print(f\"Iteration: {iteration}\")\n        ipydis.clear_output(\"wait\")\n        fig, ax = plt.subplots(figsize=(4, 4))\n        net_img = normalize(net)\n        _ = fig.suptitle(f\"Iteration: {iteration}\", y=1.0)\n        _ = plt.tight_layout()\n        image = ax.matshow(net_img, cmap=\"rainbow\")\n        # if iteration % 50 == 0:\n        images.append(net_img)\n        # if iteration % 100 == 0:\n        #    _ = plt.show()\n        time.sleep(0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization of trained colormap SOM\n\nlen(images)\n\n25\n\n\n\nfig, axes = plt.subplots(\n    figsize=(2.0 * DFIGSIZE[0], 1.5 * DFIGSIZE[1]),\n    nrows=5,\n    ncols=5,\n    tight_layout=True,\n)\nfig.subplots_adjust(wspace=0.1)\naxes = axes.flatten()\nfor idx, (img, ax) in enumerate(zip(images, axes)):\n    _ = ax.matshow(img, cmap=\"rainbow\")\n    _ = ax.set_title(f\"Iteration: {100 * idx}\")\n    _ = ax.set_xticks([])\n    _ = ax.set_xticklabels([])\n    _ = ax.set_yticks([])\n    _ = ax.set_yticklabels([])\n\n_ = plt.show()\n\n\n\n\n\n\n\n\n\nfrom matplotlib import cm\n\nfig, ax = plt.subplots(figsize=(4, 4))\nimage = ax.imshow(normalize(net), cmap=\"rainbow\")\n_ = ax.set_title(\"Final SOM\")\n_ = plt.show()\n\n\n\n\n\n\n\n\n\n\n1.3.5 SOM on Cancer data\n\n# Load data\ndata = datasets.load_breast_cancer()\n# Get features and target\nX = data[\"data\"]  # pd.DataFrame(data['data'], columns=data['feature_names'])\nY = data[\"target\"]\nprint(X.shape, Y.shape)\n\n(569, 30)\n(569,)\n\n\n\n\nnetwork_dimensions = np.array([10, 10])\nn_iterations = 2000\ninit_learning_rate = 0.01\n# establish size variables based on data\nn_points = X.shape[0]  # number of points\nn_features = X.shape[1]  # 30 features per point\n\n# weight matrix (i.e. the SOM) needs to be one n-dimensional vector for each neuron in the SOM\nnet = np.random.random((network_dimensions[0], network_dimensions[1], n_features))\n\n# initial neighbourhood radius\ninit_radius = max(network_dimensions[0], network_dimensions[1]) / 2\n# radius decay parameter\ntime_constant = n_iterations / np.log(init_radius)\n\n\n# convert the network to something we can visualize\nnet_vis = np.zeros(\n    shape=(net.shape[0], net.shape[1], 3),\n    dtype=np.float32,\n)  # Array for SOM color map visualization\n\nfor sample in range(n_points):\n    t = X[sample, :].reshape(np.array([n_features, 1]))\n    # find its Best Matching Unit for this data point\n    bmu, bmu_idx = find_bmu(t, net, n_features)\n    # set that unit to the label of this data point\n    net_vis[bmu_idx[0], bmu_idx[1], 0] = Y[sample]  # Red if benign\n\n\nfig, ax = plt.subplots()\nim = ax.matshow(normalize(net_vis))\n# _ = plt.colorbar(im1, ax=ax1)\nplt.show()\n\n\n\n\n\n\n\n\n\n\nTraining SOM on Cancer data\n\nfor iteration in range(n_iterations):\n    # select a training example at random - shape of 1x3\n    t = X[np.random.randint(0, n_points), :].reshape(np.array([n_features, 1]))\n    # find its Best Matching Unit\n    bmu, bmu_idx = find_bmu(t, net, n_features)\n    # decay the SOM parameters\n    r = decay_radius(init_radius, iteration, time_constant)\n    l = decay_learning_rate(init_learning_rate, iteration, n_iterations)\n    # Update SOM weights\n    net = update_weights(net, bmu_idx, r, l)\n\n    if iteration % 50 == 0:\n        ipydis.clear_output(\"wait\")\n        net_vis = np.zeros(\n            shape=(np.shape(net)[0], np.shape(net)[1], 3), dtype=\"double\"\n        )  # Array for SOM color map visualization\n        for sample in range(n_points):\n            t = X[sample, :].reshape(np.array([n_features, 1]))\n            # find its Best Matching Unit\n            bmu, bmu_idx = find_bmu(t, net, n_features)\n            net_vis[bmu_idx[0], bmu_idx[1], 0] = Y[sample]  # Red if benign\n\n        fig, ax = plt.subplots(figsize=(3, 3))\n        _ = ax.set_title(f\"Iteration: {iteration}\")\n        _ = ax.imshow(normalize(net_vis), cmap=\"rainbow\")\n        _ = plt.show()\n        time.sleep(0.25)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualization of trained SOM\n\nnet_vis = np.zeros(\n    shape=(net.shape[0], net.shape[1], 3), dtype=\"double\"\n)  # Array for SOM color map visualization\n\nfor sample in range(n_points):\n    t = X[sample, :].reshape(np.array([n_features, 1]))\n    # find its Best Matching Unit\n    bmu, bmu_idx = find_bmu(t, net, n_features)\n    net_vis[bmu_idx[0], bmu_idx[1], 0] = Y[sample]  # Red if benign\n\n_ = plt.imshow(normalize(net_vis))\n_ = plt.show()",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[8] Clustering"
    ]
  },
  {
    "objectID": "00-intro-AI-HPC/8-clustering/index.html#footnotes",
    "href": "00-intro-AI-HPC/8-clustering/index.html#footnotes",
    "title": "Statistical Learning",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSelf Organizing Maps‚Ü©Ô∏é",
    "crumbs": [
      "[00] Intro to AI and HPC",
      "[8] Clustering"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html",
    "href": "01-neural-networks/1-mnist/index.html",
    "title": "Intro to NNs: MNIST",
    "section": "",
    "text": "This tutorial will serve as a gentle introduction to neural networks and deep learning through a hands-on classification problem using the MNIST dataset.\nIn particular, we will introduce neural networks and how to train and improve their learning capabilities. We will use the PyTorch Python library.\nThe MNIST dataset contains thousands of examples of handwritten numbers, with each digit labeled 0-9.\nimport ambivalent\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport ezpz\n# console = ezpz.log.get_console()\nlogger = ezpz.get_logger('mnist')\n\nplt.style.use(ambivalent.STYLES['ambivalent'])\nsns.set_context(\"notebook\")\nplt.rcParams[\"figure.figsize\"] = [6.4, 4.8]\n\n[2025-08-06 14:08:43,131360][I][ezpz/__init__:265:ezpz] Setting logging level to 'INFO' on 'RANK == 0'\n\n\n\n[2025-08-06 14:08:43,133474][I][ezpz/__init__:266:ezpz] Setting logging level to 'CRITICAL' on all others 'RANK != 0'\n# %matplotlib inline\n\nimport torch\nimport torchvision\nfrom torch import nn\n\nimport numpy \nimport matplotlib.pyplot as plt\nimport time",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#the-mnist-dataset",
    "href": "01-neural-networks/1-mnist/index.html#the-mnist-dataset",
    "title": "Intro to NNs: MNIST",
    "section": "The MNIST dataset",
    "text": "The MNIST dataset\nWe will now download the dataset that contains handwritten digits. MNIST is a popular dataset, so we can download it via the PyTorch library.\nNote:\n\nx is for the inputs (images of handwritten digits)\ny is for the labels or outputs (digits 0-9)\nWe are given ‚Äútraining‚Äù and ‚Äútest‚Äù datasets.\n\nTraining datasets are used to fit the model.\nTest datasets are saved until the end, when we are satisfied with our model, to estimate how well our model generalizes to new data.\n\n\nNote that downloading it the first time might take some time.\nThe data is split as follows:\n\n60,000 training examples, 10,000 test examples\ninputs: 1 x 28 x 28 pixels\noutputs (labels): one integer per example\n\n\ntraining_data = torchvision.datasets.MNIST(\n    root=\"data\",\n    train=True,\n    download=True,\n    transform=torchvision.transforms.ToTensor()\n)\n\ntest_data = torchvision.datasets.MNIST(\n    root=\"data\",\n    train=False,\n    download=True,\n    transform=torchvision.transforms.ToTensor()\n)\n\n\ntrain_size = int(0.8 * len(training_data))  # 80% for training\nval_size = len(training_data) - train_size  # Remaining 20% for validation\ntraining_data, validation_data = torch.utils.data.random_split(\n    training_data,\n    [train_size, val_size],\n    generator=torch.Generator().manual_seed(55)\n)\n\n\nlogger.info(\n    \" \".join([\n        f\"MNIST data loaded:\",\n        f\"train={len(training_data)} examples\",\n        f\"validation={len(validation_data)} examples\",\n        f\"test={len(test_data)} examples\",\n        f\"input shape={training_data[0][0].shape}\" \n    ])\n)\n# logger.info(f'Input shape', training_data[0][0].shape)\n\n[2025-08-06 14:08:43,552146][I][ipykernel_92984/3921772995:1:mnist] MNIST data loaded: train=48000 examples validation=12000 examples test=10000 examples input shape=torch.Size([1, 28, 28])\n\n\n\nLet‚Äôs take a closer look. Here are the first 10 training digits:\n\npltsize=1\n# plt.figure(figsize=(10*pltsize, pltsize))\n\nfor i in range(10):\n    plt.subplot(1,10,i+1)\n    plt.axis('off')\n    # x, y = training_data[i]\n    # plt.imshow(x.reshape(28, 28), cmap=\"gray\")\n    # x[0] is the image, x[1] is the label\n    plt.imshow(\n        numpy.reshape(\n            training_data[i][0],\n            (28, 28)\n        ),\n        cmap=\"gray\"\n    )\n    plt.title(f\"{training_data[i][1]}\")",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#generalities",
    "href": "01-neural-networks/1-mnist/index.html#generalities",
    "title": "Intro to NNs: MNIST",
    "section": "Generalities:",
    "text": "Generalities:\nTo train our classifier, we need (besides the data):\n\nA model that depend on parameters \\mathbf{\\theta}. Here we are going to use neural networks.\nA loss function J(\\mathbf{\\theta}) to measure the capabilities of the model.\nAn optimization method.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#linear-model",
    "href": "01-neural-networks/1-mnist/index.html#linear-model",
    "title": "Intro to NNs: MNIST",
    "section": "Linear Model",
    "text": "Linear Model\nLet‚Äôs begin with a simple linear model: linear regression, like last week.\nWe add one complication: each example is a vector (flattened image), so the ‚Äúslope‚Äù multiplication becomes a dot product. If the target output is a vector as well, then the multiplication becomes matrix multiplication.\nNote, like before, we consider multiple examples at once, adding another dimension to the input.\n\n\n\n\n\n\nFigure¬†2: Fully connected linear net\n\n\n\nThe linear layers in PyTorch perform a basic xW + b.\nThese ‚Äúfully connected‚Äù layers connect each input to each output with some weight parameter.\nWe wouldn‚Äôt expect a simple linear model f(x) = xW+b directly outputting the class label and minimizing mean squared error to work well - the model would output labels like 3.55 and 2.11 instead of skipping to integers.\nWe now need:\n\nA loss function J(\\theta) where \\theta is the list of parameters (here W and b). Last week, we used mean squared error (MSE), but this week let‚Äôs make two changes that make more sense for classification:\n\nChange the output to be a length-10 vector of class probabilities (0 to 1, adding to 1).\nCross entropy as the loss function, which is typical for classification. You can read more here.\n\nAn optimization method or optimizer such as the stochastic gradient descent (sgd) method, the Adam optimizer, RMSprop, Adagrad etc. Let‚Äôs start with stochastic gradient descent (sgd), like last week. For far more information about more advanced optimizers than basic SGD, with some cool animations, see https://ruder.io/optimizing-gradient-descent/ or https://distill.pub/2017/momentum/.\nA learning rate. As we learned last week, the learning rate controls how far we move during each step.\n\n\nclass LinearClassifier(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        # First, we need to convert the input image to a vector by using \n        # nn.Flatten(). For MNIST, it means the second dimension 28*28 becomes 784.\n        self.flatten = nn.Flatten()\n        # Here, we add a fully connected (\"dense\") layer that has 28 x 28 = 784 input nodes \n        #(one for each pixel in the input image) and 10 output nodes (for probabilities of each class).\n        self.layer_1 = nn.Linear(28*28, 10)\n\n    def forward(self, x):\n        x = self.flatten(x)\n        x = self.layer_1(x)\n        return x\n\n\nlinear_model = LinearClassifier()\nlogger.info(linear_model)\n\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(linear_model.parameters(), lr=0.05)\n\n[2025-08-06 14:08:43,705731][I][ipykernel_92984/2844520859:2:mnist] LinearClassifier(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (layer_1): Linear(in_features=784, out_features=10, bias=True)\n)",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#learning",
    "href": "01-neural-networks/1-mnist/index.html#learning",
    "title": "Intro to NNs: MNIST",
    "section": "Learning",
    "text": "Learning\nNow we are ready to train our first model.\nA training step is comprised of:\n\nA forward pass: the input is passed through the network\nBackpropagation: A backward pass to compute the gradient \\frac{\\partial J}{\\partial \\mathbf{W}} of the loss function with respect to the parameters of the network.\nWeight updates \\mathbf{W} = \\mathbf{W} - \\alpha \\frac{\\partial J}{\\partial \\mathbf{W}} where \\alpha is the learning rate.\n\nHow many steps do we take?\n\nThe batch size corresponds to the number of training examples in one pass (forward + backward).\n\nA smaller batch size allows the model to learn from individual examples but takes longer to train.\nA larger batch size requires fewer steps but may result in the model not capturing the nuances in the data.\n\nThe higher the batch size, the more memory you will require.\nAn epoch means one pass through the whole training data (looping over the batches). Using few epochs can lead to underfitting and using too many can lead to overfitting.\nThe choice of batch size and learning rate are important for performance, generalization and accuracy in deep learning.\n\n\nbatch_size = 128\n\n# The dataloader makes our dataset iterable \ntrain_dataloader = torch.utils.data.DataLoader(training_data, batch_size=batch_size)\nval_dataloader = torch.utils.data.DataLoader(validation_data, batch_size=batch_size)\n\n\ndef train_one_epoch(dataloader, model, loss_fn, optimizer):\n    model.train()\n    for batch, (X, y) in enumerate(dataloader):\n        # forward pass\n        pred = model(X)\n        loss = loss_fn(pred, y)\n        # backward pass calculates gradients\n        loss.backward()\n        # take one step with these gradients\n        optimizer.step()\n        # resets the gradients \n        optimizer.zero_grad()\n\n\ndef evaluate(dataloader, model, loss_fn):\n    # Set the model to evaluation mode - some NN pieces behave differently during training\n    # Unnecessary in this situation but added for best practices\n    model.eval()\n    size = len(dataloader.dataset)\n    num_batches = len(dataloader)\n    loss, correct = 0, 0\n\n    # We can save computation and memory by not calculating gradients here - we aren't optimizing \n    with torch.no_grad():\n        # loop over all of the batches\n        for X, y in dataloader:\n            pred = model(X)\n            loss += loss_fn(pred, y).item()\n            # how many are correct in this batch? Tracking for accuracy \n            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n\n    loss /= num_batches\n    correct /= size\n\n    accuracy = 100*correct\n    return accuracy, loss\n\n\n%%time\n\nepochs = 5\ntrain_acc_all = []\nval_acc_all = []\nfor j in range(epochs):\n    train_one_epoch(train_dataloader, linear_model, loss_fn, optimizer)\n\n    # checking on the training loss and accuracy once per epoch\n    acc, loss = evaluate(train_dataloader, linear_model, loss_fn)\n    train_acc_all.append(acc)\n    logger.info(f\"Epoch {j}: training loss: {loss}, accuracy: {acc}\")\n\n    # checking on the validation loss and accuracy once per epoch\n    val_acc, val_loss = evaluate(val_dataloader, linear_model, loss_fn)\n    val_acc_all.append(val_acc)\n    logger.info(f\"Epoch {j}: val. loss: {val_loss}, val. accuracy: {val_acc}\")\n\n[2025-08-06 14:08:45,785148][I][./&lt;timed exec&gt;:10:mnist] Epoch 0: training loss: 0.5019691607952118, accuracy: 87.6\n\n\n\n[2025-08-06 14:08:46,026971][I][./&lt;timed exec&gt;:15:mnist] Epoch 0: val. loss: 0.49424059245180574, val. accuracy: 87.63333333333333\n\n\n\n[2025-08-06 14:08:48,169396][I][./&lt;timed exec&gt;:10:mnist] Epoch 1: training loss: 0.4216008733908335, accuracy: 89.01875\n\n\n\n[2025-08-06 14:08:48,417192][I][./&lt;timed exec&gt;:15:mnist] Epoch 1: val. loss: 0.4121108831877404, val. accuracy: 88.925\n\n\n\n[2025-08-06 14:08:50,479591][I][./&lt;timed exec&gt;:10:mnist] Epoch 2: training loss: 0.38766712208588916, accuracy: 89.7\n\n\n\n[2025-08-06 14:08:50,742874][I][./&lt;timed exec&gt;:15:mnist] Epoch 2: val. loss: 0.37754899675541737, val. accuracy: 89.45833333333333\n\n\n\n[2025-08-06 14:08:53,372352][I][./&lt;timed exec&gt;:10:mnist] Epoch 3: training loss: 0.36771729950110116, accuracy: 90.1125\n\n\n\n[2025-08-06 14:08:53,646507][I][./&lt;timed exec&gt;:15:mnist] Epoch 3: val. loss: 0.35739373891277515, val. accuracy: 89.93333333333334\n\n\n\n[2025-08-06 14:08:55,822620][I][./&lt;timed exec&gt;:10:mnist] Epoch 4: training loss: 0.35414256183306375, accuracy: 90.39791666666666\n\n\n\n[2025-08-06 14:08:56,081519][I][./&lt;timed exec&gt;:15:mnist] Epoch 4: val. loss: 0.3438146301406495, val. accuracy: 90.14166666666667\n\n\n\nCPU times: user 11.6 s, sys: 695 ms, total: 12.3 s\nWall time: 12.4 s\n\n\n\nplt.figure()\nplt.plot(range(epochs), train_acc_all, label='Training Acc.' )\nplt.plot(range(epochs), val_acc_all, label='Validation Acc.' )\nplt.xlabel('Epoch #')\nplt.ylabel('Loss')\nplt.legend()\n\n\n\n\n\n\n\n\n\n# Visualize how the model is doing on the first 10 examples\npltsize=1\nplt.figure(figsize=(10*pltsize, pltsize))\nlinear_model.eval()\nbatch = next(iter(train_dataloader))\npredictions = linear_model(batch[0])\n\nfor i in range(10):\n    plt.subplot(1,10,i+1)\n    plt.axis('off')\n    plt.imshow(batch[0][i,0,:,:], cmap=\"gray\")\n    plt.title('%d' % predictions[i,:].argmax())\n\n\n\n\n\n\n\n\nExercise: How can you improve the accuracy? Some things you might consider: increasing the number of epochs, changing the learning rate, etc.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#prediction",
    "href": "01-neural-networks/1-mnist/index.html#prediction",
    "title": "Intro to NNs: MNIST",
    "section": "Prediction",
    "text": "Prediction\nLet‚Äôs see how our model generalizes to the unseen test data.\n\n#For HW: cell to change batch size\n#create dataloader for test data\n# The dataloader makes our dataset iterable\n\nbatch_size_test = 256 \ntest_dataloader = torch.utils.data.DataLoader(test_data, batch_size=batch_size_test)\n\n\nacc_test, loss_test = evaluate(test_dataloader, linear_model, loss_fn)\nlogger.info(f\"Test loss: {loss_test}, test accuracy: {acc_test}\")\n# logger.info(\"Test loss: %.4f, test accuracy: %.2f%%\" % (loss_test, acc_test))\n\n[2025-08-06 14:08:56,519944][I][ipykernel_92984/372756021:2:mnist] Test loss: 0.3325562601909041, test accuracy: 90.89\n\n\n\nWe can now take a closer look at the results.\nLet‚Äôs define a helper function to show the failure cases of our classifier.\n\ndef show_failures(model, dataloader, maxtoshow=10):\n    model.eval()\n    batch = next(iter(dataloader))\n    predictions = model(batch[0])\n\n    rounded = predictions.argmax(1)\n    errors = rounded!=batch[1]\n    logger.info(\n        f\"Showing max {maxtoshow} first failures.\"\n    )\n    logger.info(\"The predicted class is shown first and the correct class in parentheses.\")\n    ii = 0\n    plt.figure(figsize=(maxtoshow, 1))\n    for i in range(batch[0].shape[0]):\n        if ii&gt;=maxtoshow:\n            break\n        if errors[i]:\n            plt.subplot(1, maxtoshow, ii+1)\n            plt.axis('off')\n            plt.imshow(batch[0][i,0,:,:], cmap=\"gray\")\n            plt.title(\"%d (%d)\" % (rounded[i], batch[1][i]))\n            ii = ii + 1\n\nHere are the first 10 images from the test data that this small model classified to a wrong class:\n\nshow_failures(linear_model, test_dataloader)\n\n[2025-08-06 14:08:56,536347][I][ipykernel_92984/2368214845:8:mnist] Showing max 10 first failures.\n\n\n\n[2025-08-06 14:08:56,537158][I][ipykernel_92984/2368214845:11:mnist] The predicted class is shown first and the correct class in parentheses.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#multilayer-model",
    "href": "01-neural-networks/1-mnist/index.html#multilayer-model",
    "title": "Intro to NNs: MNIST",
    "section": "Multilayer Model",
    "text": "Multilayer Model\nOur linear model isn‚Äôt enough for high accuracy on this dataset. To improve the model, we often need to add more layers and nonlinearities.\n\n\n\n\n\n\nFigure¬†3: Shallow neural network\n\n\n\nThe output of this NN can be written as\n\n\\begin{equation}\n  \\hat{u}(x) = \\sigma_2(\\sigma_1(\\mathbf{x}\\mathbf{W}_1 + \\mathbf{b}_1)\\mathbf{W}_2 + \\mathbf{b}_2),\n\\end{equation}\n\nwhere \\mathbf{x} is the input, \\mathbf{W}_j are the weights of the neural network, \\sigma_j the (nonlinear) activation functions, and \\mathbf{b}_j its biases. The activation function introduces the nonlinearity and makes it possible to learn more complex tasks. Desirable properties in an activation function include being differentiable, bounded, and monotonic.\nImage source: PragatiBaheti\n\n\n\n\n\n\nFigure¬†4: Activation functions\n\n\n\nAdding more layers to obtain a deep neural network:\n\n\n\n\n\n\nFigure¬†5",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#important-things-to-know",
    "href": "01-neural-networks/1-mnist/index.html#important-things-to-know",
    "title": "Intro to NNs: MNIST",
    "section": "Important things to know",
    "text": "Important things to know\nDeep Neural networks can be overly flexible/complicated and ‚Äúoverfit‚Äù your data, just like fitting overly complicated polynomials:\n\n\n\n\n\n\nFigure¬†6: Bias-variance tradeoff\n\n\n\nVizualization wrt to the accuracy and loss (Image source: Baeldung):\n\n\n\n\n\n\nFigure¬†7: Visualization of accuracy and loss\n\n\n\nTo improve the generalization of our model on previously unseen data, we employ a technique known as regularization, which constrains our optimization problem in order to discourage complex models.\n\nDropout is the commonly used regularization technique. The Dropout layer randomly sets input units to 0 with a frequency of rate at each step during training time, which helps prevent overfitting.\nPenalizing the loss function by adding a term such as \\lambda ||\\mathbf{W}||^2 is alsp a commonly used regularization technique. This helps ‚Äúcontrol‚Äù the magnitude of the weights of the network.\n\n\nVanishing gradients\n\nGradients become small as they propagate backward through the layers.\n\n\nSquashing activation functions like sigmoid or tanh could cause this.\n\nExploding gradients\n\nGradients grow exponentially usually due to ‚Äúpoor‚Äù weight initialization.\n\n\nWe can now implement a deep network in PyTorch.\nnn.Dropout() performs the Dropout operation mentioned earlier:\n\n#For HW: cell to change activation\nclass NonlinearClassifier(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        self.flatten = nn.Flatten()\n        self.layers_stack = nn.Sequential(\n            nn.Linear(28*28, 50),\n            nn.ReLU(),\n            nn.Dropout(0.2),\n            nn.Linear(50, 50),\n            nn.ReLU(),\n           # nn.Dropout(0.2),\n            nn.Linear(50, 50),\n            nn.ReLU(),\n           # nn.Dropout(0.2),\n            nn.Linear(50, 10)\n        )\n\n    def forward(self, x):\n        x = self.flatten(x)\n        x = self.layers_stack(x)\n\n        return x\n\n\n#### For HW: cell to change learning rate\nnonlinear_model = NonlinearClassifier()\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(nonlinear_model.parameters(), lr=0.05)\n\n\n%%time\n\nepochs = 5\ntrain_acc_all = []\nval_acc_all = []\nfor j in range(epochs):\n    train_one_epoch(train_dataloader, nonlinear_model, loss_fn, optimizer)\n\n    # checking on the training loss and accuracy once per epoch\n    acc, loss = evaluate(train_dataloader, nonlinear_model, loss_fn)\n    train_acc_all.append(acc)\n    logger.info(f\"Epoch {j}: training loss: {loss}, accuracy: {acc}\")\n\n    # checking on the validation loss and accuracy once per epoch\n    val_acc, val_loss = evaluate(val_dataloader, nonlinear_model, loss_fn)\n    val_acc_all.append(val_acc)\n    logger.info(f\"Epoch {j}: val. loss: {val_loss}, val. accuracy: {val_acc}\")\n\n[2025-08-06 14:08:59,101430][I][./&lt;timed exec&gt;:10:mnist] Epoch 0: training loss: 0.7994496553738912, accuracy: 77.17500000000001\n\n\n\n[2025-08-06 14:08:59,379305][I][./&lt;timed exec&gt;:15:mnist] Epoch 0: val. loss: 0.7928039590094952, val. accuracy: 77.60833333333333\n\n\n\n[2025-08-06 14:09:01,776063][I][./&lt;timed exec&gt;:10:mnist] Epoch 1: training loss: 0.41807308411598204, accuracy: 88.52291666666666\n\n\n\n[2025-08-06 14:09:02,063954][I][./&lt;timed exec&gt;:15:mnist] Epoch 1: val. loss: 0.40851338334540105, val. accuracy: 88.59166666666667\n\n\n\n[2025-08-06 14:09:04,377194][I][./&lt;timed exec&gt;:10:mnist] Epoch 2: training loss: 0.31588405946890513, accuracy: 91.10208333333333\n\n\n\n[2025-08-06 14:09:04,633401][I][./&lt;timed exec&gt;:15:mnist] Epoch 2: val. loss: 0.3068072290179577, val. accuracy: 91.13333333333333\n\n\n\n[2025-08-06 14:09:06,849967][I][./&lt;timed exec&gt;:10:mnist] Epoch 3: training loss: 0.2562710582613945, accuracy: 92.63125\n\n\n\n[2025-08-06 14:09:07,108817][I][./&lt;timed exec&gt;:15:mnist] Epoch 3: val. loss: 0.2528020724495675, val. accuracy: 92.5\n\n\n\n[2025-08-06 14:09:09,483188][I][./&lt;timed exec&gt;:10:mnist] Epoch 4: training loss: 0.2121300637324651, accuracy: 93.80625\n\n\n\n[2025-08-06 14:09:09,745825][I][./&lt;timed exec&gt;:15:mnist] Epoch 4: val. loss: 0.21229731101304927, val. accuracy: 93.65833333333333\n\n\n\nCPU times: user 12.4 s, sys: 834 ms, total: 13.2 s\nWall time: 13.1 s\n\n\n\n# pltsize=1\n# plt.figure(figsize=(10*pltsize, 10 * pltsize))\nplt.figure()\nplt.plot(range(epochs), train_acc_all,label = 'Training Acc.' )\nplt.plot(range(epochs), val_acc_all, label = 'Validation Acc.' )\nplt.xlabel('Epoch #')\nplt.ylabel('Loss')\nplt.legend()\n\n\n\n\n\n\n\n\n\nshow_failures(nonlinear_model, test_dataloader)\n\n[2025-08-06 14:09:09,823886][I][ipykernel_92984/2368214845:8:mnist] Showing max 10 first failures.\n\n\n\n[2025-08-06 14:09:09,824680][I][ipykernel_92984/2368214845:11:mnist] The predicted class is shown first and the correct class in parentheses.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#recap",
    "href": "01-neural-networks/1-mnist/index.html#recap",
    "title": "Intro to NNs: MNIST",
    "section": "Recap",
    "text": "Recap\nTo train and validate a neural network model, you need:\n\nData split into training/validation/test sets,\nA model with parameters to learn\nAn appropriate loss function\nAn optimizer (with tunable parameters such as learning rate, weight decay etc.) used to learn the parameters of the model.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#homework",
    "href": "01-neural-networks/1-mnist/index.html#homework",
    "title": "Intro to NNs: MNIST",
    "section": "Homework",
    "text": "Homework\n\nCompare the quality of your model when using different:\n\n\nbatch sizes\nlearning rates\nactivation functions\n\n\nBonus: What is a learning rate scheduler?\n\nIf you have time, experiment with how to improve the model.\nNote: training and validation data can be used to compare models, but test data should be saved until the end as a final check of generalization.",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/1-mnist/index.html#homework-solution",
    "href": "01-neural-networks/1-mnist/index.html#homework-solution",
    "title": "Intro to NNs: MNIST",
    "section": "Homework solution",
    "text": "Homework solution\nMake the following changes to the cells with the comment ‚Äú#For HW‚Äù\n\n#####################To modify the batch size##########################\nbatch_size = 32 # 64, 128, 256, 512\n\n# The dataloader makes our dataset iterable \ntrain_dataloader = torch.utils.data.DataLoader(training_data, batch_size=batch_size)\nval_dataloader = torch.utils.data.DataLoader(validation_data, batch_size=batch_size)\n##############################################################################\n\n\n##########################To change the learning rate##########################\noptimizer = torch.optim.SGD(nonlinear_model.parameters(), lr=0.01) #modify the value of lr\n##############################################################################\n\n\n##########################To change activation##########################\n###### Go to https://pytorch.org/docs/main/nn.html#non-linear-activations-weighted-sum-nonlinearity for more activations ######\nclass NonlinearClassifier(nn.Module):\n\n    def __init__(self):\n        super().__init__()\n        self.flatten = nn.Flatten()\n        self.layers_stack = nn.Sequential(\n            nn.Linear(28*28, 50),\n            nn.Sigmoid(), #nn.ReLU(),\n            nn.Dropout(0.2),\n            nn.Linear(50, 50),\n            nn.Tanh(), #nn.ReLU(),\n           # nn.Dropout(0.2),\n            nn.Linear(50, 50),\n            nn.ReLU(),\n           # nn.Dropout(0.2),\n            nn.Linear(50, 10)\n        )\n        \n    def forward(self, x):\n        x = self.flatten(x)\n        x = self.layers_stack(x)\n\n        return x\n##############################################################################\n\nBonus question: A learning rate scheduler is an essential deep learning technique used to dynamically adjust the learning rate during training. This strategic can significantly impact the convergence speed and overall performance of a neural network. See below on how to incorporate it to your training.\n\nnonlinear_model = NonlinearClassifier()\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(nonlinear_model.parameters(), lr=0.1)\n\n# Step learning rate scheduler: reduce by a factor of 0.1 every 2 epochs (only for illustrative purposes)\nscheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=2, gamma=0.1)\n\n\n%%time\n\nepochs = 6\ntrain_acc_all = []\nval_acc_all = []\nfor j in range(epochs):\n    train_one_epoch(train_dataloader, nonlinear_model, loss_fn, optimizer)\n    #step the scheduler\n    scheduler.step()\n\n    # logger.info the current learning rate\n    current_lr = optimizer.param_groups[0]['lr']\n    logger.info(f\"Epoch {j+1}/{epochs}, Learning Rate: {current_lr}\")\n\n    # checking on the training loss and accuracy once per epoch\n    acc, loss = evaluate(train_dataloader, nonlinear_model, loss_fn)\n    train_acc_all.append(acc)\n    logger.info(f\"Epoch {j}: training loss: {loss}, accuracy: {acc}\")\n\n    # checking on the validation loss and accuracy once per epoch\n    val_acc, val_loss = evaluate(val_dataloader, nonlinear_model, loss_fn)\n    val_acc_all.append(val_acc)\n    logger.info(f\"Epoch {j}: val. loss: {val_loss}, val. accuracy: {val_acc}\")\n\n[2025-08-06 14:09:11,862569][I][./&lt;timed exec&gt;:11:mnist] Epoch 1/6, Learning Rate: 0.1\n\n\n\n[2025-08-06 14:09:13,137090][I][./&lt;timed exec&gt;:16:mnist] Epoch 0: training loss: 0.3418297287598252, accuracy: 89.94791666666667\n\n\n\n[2025-08-06 14:09:13,464259][I][./&lt;timed exec&gt;:21:mnist] Epoch 0: val. loss: 0.33424193555116655, val. accuracy: 89.725\n\n\n\n[2025-08-06 14:09:15,137657][I][./&lt;timed exec&gt;:11:mnist] Epoch 2/6, Learning Rate: 0.010000000000000002\n\n\n\n[2025-08-06 14:09:16,329964][I][./&lt;timed exec&gt;:16:mnist] Epoch 1: training loss: 0.23566976040912171, accuracy: 92.98125\n\n\n\n[2025-08-06 14:09:16,749356][I][./&lt;timed exec&gt;:21:mnist] Epoch 1: val. loss: 0.2289788018465042, val. accuracy: 92.77499999999999\n\n\n\n[2025-08-06 14:09:18,453201][I][./&lt;timed exec&gt;:11:mnist] Epoch 3/6, Learning Rate: 0.010000000000000002\n\n\n\n[2025-08-06 14:09:19,680275][I][./&lt;timed exec&gt;:16:mnist] Epoch 2: training loss: 0.21982640741268794, accuracy: 93.42708333333334\n\n\n\n[2025-08-06 14:09:20,005618][I][./&lt;timed exec&gt;:21:mnist] Epoch 2: val. loss: 0.2157861268222332, val. accuracy: 93.16666666666666\n\n\n\n[2025-08-06 14:09:21,798088][I][./&lt;timed exec&gt;:11:mnist] Epoch 4/6, Learning Rate: 0.0010000000000000002\n\n\n\n[2025-08-06 14:09:23,134008][I][./&lt;timed exec&gt;:16:mnist] Epoch 3: training loss: 0.21438998909915488, accuracy: 93.56666666666666\n\n\n\n[2025-08-06 14:09:23,443619][I][./&lt;timed exec&gt;:21:mnist] Epoch 3: val. loss: 0.21053465707600116, val. accuracy: 93.35\n\n\n\n[2025-08-06 14:09:25,681837][I][./&lt;timed exec&gt;:11:mnist] Epoch 5/6, Learning Rate: 0.0010000000000000002\n\n\n\n[2025-08-06 14:09:27,223263][I][./&lt;timed exec&gt;:16:mnist] Epoch 4: training loss: 0.21325495328381658, accuracy: 93.57916666666667\n\n\n\n[2025-08-06 14:09:27,565179][I][./&lt;timed exec&gt;:21:mnist] Epoch 4: val. loss: 0.2093664672325055, val. accuracy: 93.33333333333333\n\n\n\n[2025-08-06 14:09:29,530354][I][./&lt;timed exec&gt;:11:mnist] Epoch 6/6, Learning Rate: 0.00010000000000000003\n\n\n\n[2025-08-06 14:09:30,760327][I][./&lt;timed exec&gt;:16:mnist] Epoch 5: training loss: 0.21277805399273833, accuracy: 93.60000000000001\n\n\n\n[2025-08-06 14:09:31,060373][I][./&lt;timed exec&gt;:21:mnist] Epoch 5: val. loss: 0.2088593033850193, val. accuracy: 93.33333333333333\n\n\n\nCPU times: user 18.8 s, sys: 3.41 s, total: 22.2 s\nWall time: 20.9 s",
    "crumbs": [
      "[01] Neural Networks",
      "[1] MNIST Example"
    ]
  },
  {
    "objectID": "01-neural-networks/5-distributed-training/index.html#getting-started",
    "href": "01-neural-networks/5-distributed-training/index.html#getting-started",
    "title": "Distributed Training",
    "section": "üê£ Getting Started",
    "text": "üê£ Getting Started\n\nüëÄ Overview\n\nüìä Slides @ samforeman.me/talks/ai-for-science-2024/slides\n\nüìÑ HTML version: samforeman.me/talks/ai-for-science-2024\n\n argonne-lcf/ai-science-training-series\n\nSeries Page\n\n\n\n\nüìë Outline\n\nScaling: Overview\nData Parallel Training\n\nCommunication\nWhy Distributed Training?\n\nBeyond Data Parallelism\n\nAdditional Parallelism Strategies\n\nLarge Language Models\nHands On\n\n\n\nüöÄ Scaling: Overview\n\n‚úÖ Goal:\n\nMinimize: Cost (i.e.¬†amount of time spent training)\nMaximize: Performance\n\n\n\n\n\n\n\nNoteüìë Note\n\n\n\n\n\nSee ü§ó Performance and Scalability for more details\n\n\n\n\n\n\nüê¢ Training on a Single Device\n\nSee ü§ó Methods and tools for efficient training on a single GPU\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph G0[\"`GPU0`\"]\n        subgraph N0[\"`Network`\"]\n        end\n        L0(\"`Loss`\")\n    end\n    subgraph D[\"`Data`\"]\n        x(\"`x0`\")\n        x1(\"`x1`\")\n        x2(\"`x2`\")\n    end\n    x --&gt; N0\n    N0 --&gt; L0\n    L0 --&gt; N0\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef grey fill:#cccccc,stroke:#333,stroke-width:1px,color:#000\nclass x,L0 red\nclass x1, green\nclass x2, blue\nclass x3, grey\nclass N0,D,G0,n0 block\n\n\n\n\n\n\n\n\nFigure¬†1: SLOW !! model size limited by GPU memory\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph G0[\"`GPU0`\"]\n        subgraph N0[\"`Network`\"]\n        end\n        L0(\"`Loss`\")\n    end\n    subgraph D[\"`Data`\"]\n        x(\"`x0`\")\n        x1(\"`x1`\")\n        x2(\"`x2`\")\n    end\n    x --&gt; N0\n    N0 --&gt; L0\n    L0 --&gt; N0\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef grey fill:#cccccc,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383\nclass x,L0 green\nclass x1, blue\nclass x2, yellow\nclass x3, grey\nclass N0,D,G0,n0 block\n\n\n\n\n\n\n\n\nFigure¬†2: SLOW !! model size limited by GPU memory\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph G0[\"`GPU0`\"]\n        subgraph N0[\"`Network`\"]\n        end\n        L0(\"`Loss`\")\n    end\n    subgraph D[\"`Data`\"]\n        x(\"`x‚ÇÇ`\")\n        x1(\"`x‚ÇÉ`\")\n        x2(\"`x‚ÇÑ`\")\n    end\n    x --&gt; N0\n    N0 --&gt; L0\n    L0 --&gt; N0\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef grey fill:#cccccc,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383\nclass x,L0 blue\nclass x1, yellow\nclass x2, purple\nclass x3, grey\nclass N0,D,G0,n0 block\n\n\n\n\n\n\n\n\nFigure¬†3: \\mathcal{L}_{2} = \\mathrm{NN}(x_{2})\n\n\n\n\n\nüåê Training on Multiple GPUs\n\nüë¨ Distributed Data Parallelism: DDP\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph D[\"`Data`\"]\n        direction TB\n        x(\"`x‚ÇÄ`\")\n        x1(\"`x‚ÇÅ`\")\n        x2(\"`x‚ÇÇ`\")\n    end\n    direction LR\n    subgraph G0[\"`GPU0`\"]\n        direction LR\n        subgraph N0[\"`NN`\"]\n        end\n        %%y0(\"`y‚ÇÄ`\")\n        L0[\"`Loss`\"]\n    end\n    subgraph G1[\"`GPU1`\"]\n        direction LR\n        subgraph N1[\"`NN`\"]\n        end\n        L1[\"`Loss`\"]\n    end\n    subgraph G2[\"`GPU2`\"]\n        direction LR\n        subgraph N2[\"`NN`\"]\n        end\n        L2[\"`Loss`\"]\n    end\n    x --&gt; G0\n    x1 --&gt; G1\n    x2 --&gt; G2\n    N0 --&gt; L0\n    N1 --&gt; L1\n    N2 --&gt; L2\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383\nclassDef grey fill:#cccccc,stroke:#333,stroke-width:1px,color:#000\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclass x,y0,L0 red\nclass x1,L1 green\nclass x2,L2 blue\nclass x3,ar grey\nclass D,N0,N1,N2,G0,G1,G2,GU block\nclass AR block\nclass bc text\n\n\n\n\n\n\n\n\nFigure¬†4: Each GPU receives unique data at each step\n\n\n\n\n\nDDP: Forward Pass\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph D[\"`Data`\"]\n        direction TB\n        %%xp(\"`x‚Çô‚Çä‚ÇÅ`\")\n        x(\"`x‚ÇÄ`\")\n        x1(\"`x‚ÇÅ`\")\n        x2(\"`x‚ÇÇ`\")\n    end\n    direction LR\n    subgraph G0[\"`GPU0`\"]\n        direction LR\n        subgraph N0[\"`NN`\"]\n        end\n        %%y0(\"`y‚ÇÄ`\")\n        L0[\"`Loss`\"]\n    end\n    subgraph G1[\"`GPU1`\"]\n        direction LR\n        subgraph N1[\"`NN`\"]\n        end\n        L1[\"`Loss`\"]\n    end\n    subgraph G2[\"`GPU2`\"]\n        direction LR\n        subgraph N2[\"`NN`\"]\n        end\n        L2[\"`Loss`\"]\n    end\n    %% subgraph AR[\"`Average Grads`\"]\n    %%     direction TB\n    %%     ar(\"`(‚àë‚Çôg‚Çô)/n`\")\n    %% end\n    ar(\"`Avg. Grads&lt;br&gt;(‚àë‚Çôg‚Çô)/N`\")\n    x --&gt; G0\n    x1 --&gt; G1\n    x2 --&gt; G2\n    N0 --&gt; L0\n    N1 --&gt; L1\n    N2 --&gt; L2\n    G0 -.-&gt; ar\n    G1 -.-&gt; ar\n    G2 -.-&gt; ar\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef grey fill:#cccccc,stroke:#333,stroke-width:1px,color:#000\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383\nclass x,y0,L0 red\nclass x1,L1 green\nclass x2,L2 blue\nclass x3,ar grey\nclass D,N0,N1,N2,G0,G1,G2,GU block\nclass AR block\nclass bc text\n\n\n\n\n\n\n\n\nFigure¬†5: Average gradients across all GPUs\n\n\n\n\n\nDDP: Backward Pass\n\n\n\n\n\n\n\n\nflowchart RL\n    subgraph D[\"`Data`\"]\n        direction TB\n        x(\"`x‚ÇÄ`\")\n        x1(\"`x‚ÇÅ`\")\n        x2(\"`x‚ÇÇ`\")\n    end\n    subgraph G0[\"`GPU0`\"]\n        direction RL\n        subgraph N0[\"`NN`\"]\n        end\n        L0[\"`Loss`\"]\n    end\n    subgraph G1[\"`GPU1`\"]\n        direction RL\n        subgraph N1[\"`NN`\"]\n        end\n        L1[\"`Loss`\"]\n    end\n    subgraph G2[\"`GPU2`\"]\n        direction RL\n        subgraph N2[\"`NN`\"]\n        end\n        L2[\"`Loss`\"]\n    end\n    subgraph BC[\"`Send Updates`\"]\n        direction TB\n    end\n    BC -.-&gt; G0\n    BC -.-&gt; G1\n    BC -.-&gt; G2\n    L0 ~~~ N0\n    L1 ~~~ N1\n    L2 ~~~ N2\n    G0 ~~~ x\n    G1 ~~~ x1\n    G2 ~~~ x2\nclassDef grey fill:#cccccc,stroke:#333,stroke-width:1px,color:#000\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383\nclass x,y0,L0 red\nclass x1,L1 green\nclass x2,L2 blue\nclass x3,ar grey\nclass D,N0,N1,N2,G0,G1,G2,GU block\nclass BC block\nclass bc text\n\n\n\n\n\n\n\n\nFigure¬†6: Send global updates back to each GPU\n\n\n\n\n\nDDP: Full Setup\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph D[\"`Data`\"]\n        direction TB\n        x(\"`x‚ÇÄ`\")\n        x1(\"`x‚ÇÅ`\")\n        x2(\"`x‚ÇÇ`\")\n    end\n    direction LR\n    subgraph G0[\"`GPU0`\"]\n        direction LR\n        subgraph N0[\"`NN`\"]\n        end\n        L0[\"`L0`\"]\n    end\n    subgraph G1[\"`GPU1`\"]\n        direction LR\n        subgraph N1[\"`NN`\"]\n        end\n        L1[\"`L1`\"]\n    end\n    subgraph G2[\"`GPU2`\"]\n        direction LR\n        subgraph N2[\"`NN`\"]\n        end\n        L2[\"`L2`\"]\n    end\n    subgraph AR[\"`Average Grads`\"]\n        direction LR\n        ar(\"`(1/N) ‚àë g‚Çô`\")\n        bc(\"`Update Weights`\")\n        ar --&gt; bc\n    end\n    x --&gt; G0\n    x1 --&gt; G1\n    x2 --&gt; G2\n    N0 --&gt; L0\n    N1 --&gt; L1\n    N2 --&gt; L2\n    G0 &lt;-.-&gt; AR\n    G1 &lt;-.-&gt; AR\n    G2 &lt;-.-&gt; AR\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef grey fill:#cccccc,stroke:#333,stroke-width:1px,color:#000\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383\nclass x,y0,L0 red\nclass x1,L1 green\nclass x2,L2 blue\nclass x3,ar grey\nclass D,N0,N1,N2,G0,G1,G2,GU block\nclass AR block\nclass bc text\n\n\n\n\n\n\n\n\nFigure¬†7: See: PyTorch / Distributed Data Parallel\n\n\n\n\n\nDDP: Training\n\nEach GPU:\n\nhas identical copy of model\nworks on a unique subset of data\n\nEasy to get started (minor modifications to code):\n\n saforem2/ezpz\nüî• PyTorch / DDP\nü§ó HF / Accelerate\n Microsoft / DeepSpeed\n\nRequires global communication\n\nevery rank must participate (collective communication) !!",
    "crumbs": [
      "[01] Neural Networks",
      "[5] Distributed Training"
    ]
  },
  {
    "objectID": "01-neural-networks/5-distributed-training/index.html#communication",
    "href": "01-neural-networks/5-distributed-training/index.html#communication",
    "title": "Distributed Training",
    "section": "üó£Ô∏è Communication",
    "text": "üó£Ô∏è Communication\n\nNeed mechanism(s) for communicating across GPUs:\n\nmpi4py\ntorch.distributed\n\nCollective Communication:\n\nNvidia Collective Communications Library (NCCL)\nIntel oneAPI Collective Communications Library (oneCCL)\n\n\n\n\n\n\n\nWarning‚åõ Timeouts\n\n\n\n\n\n\nCollective operations have to be called for each rank to form a complete collective operation.\n\nFailure to do so will result in other ranks waiting indefinitely\n\n\n\n\n\n\n\nAllReduce\nPerform reductions on data (e.g.¬†sum, min, max) across ranks, send result back to everyone.\n\n\n\n\n\n\n\n\nflowchart TD\n  subgraph R0[\"`0`\"]\n    x0(\"`x0`\")\n  end\n  subgraph R1[\"`1`\"]\n    x1(\"`x1`\")\n  end\n  subgraph R2[\"`2`\"]\n    x2(\"`x2`\")\n  end\n  subgraph R3[\"`3`\"]\n    x3(\"`x3`\")\n  end\n  subgraph AR[\"`Allreduce`\"]\n    xp[\"`x' = ‚àë x‚Çô `\"]\n  end\n  subgraph AR3[\"`3`\"]\n    xp3(\"`x'`\")\n  end\n  subgraph AR2[\"`2`\"]\n    xp2(\"`x'`\")\n  end\n  subgraph AR1[\"`1`\"]\n    xp1(\"`x'`\")\n  end\n  subgraph AR0[\"`0`\"]\n    xp0(\"`x'`\")\n  end\n  x0 --&gt; AR\n  x1 --&gt; AR\n  x2 --&gt; AR\n  x3 --&gt; AR\n  AR --&gt; xp0\n  AR --&gt; xp1\n  AR --&gt; xp2\n  AR --&gt; xp3\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef pink fill:#E599F7,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclass R0,R1,R2,R3,AR,AR0,AR1,AR2,AR3 block\nclass xp,xp0,xp1,xp2,xp3, purple\nclass x0, red\nclass x1, green\nclass x2, blue\nclass x3, yellow\n\n\n\n\n\n\n\n\nFigure¬†8: All-Reduce operation: each rank receives the reduction of input values across ranks.\n\n\n\n\n\nReduce\n\nPerform a reduction on data across ranks, send to individual\n\n\n\n\n\n\n\n\n\nflowchart TD\n  subgraph R0[\"`0`\"]\n    x0(\"`x0`\")\n  end\n  subgraph R1[\"`1`\"]\n    x1(\"`x1`\")\n  end\n  subgraph R2[\"`2`\"]\n    x2(\"`x2`\")\n  end\n  subgraph R3[\"`3`\"]\n    x3(\"`x3`\")\n  end\n  subgraph AR[\"`Reduce`\"]\n    xp[\"`x'=reduce(x, 2, SUM)`\"]\n  end\n  subgraph AR3[\"`3`\"]\n  end\n  subgraph AR2[\"`2`\"]\n    xp2(\"`x'`\")\n  end\n  subgraph AR1[\"`1`\"]\n  end\n  subgraph AR0[\"`0`\"]\n  end\n  x0 --&gt; AR\n  x1 --&gt; AR\n  x2 --&gt; AR\n  x3 --&gt; AR\n  AR --&gt; AR3\n  AR --&gt; xp2\n  AR --&gt; AR1\n  AR --&gt; AR0\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef pink fill:#E599F7,stroke:#333,stroke-width:1px,color:#000\nclass R0,R1,R2,R3,AR,AR0,AR1,AR2,AR3, block\nclass xp,xp2 purple\nclass x0, red\nclass x1, green\nclass x2, blue\nclass x3, yellow\n\n\n\n\n\n\n\n\nFigure¬†9: Reduce operation: one rank receives the reduction of input values across ranks\n\n\n\n\n\nBroadcast\n\n\n\n\n\n\n\n\nflowchart TD\n  subgraph R3[\"`3`\"]\n  end\n  subgraph R2[\"`2`\"]\n    x2(\"`x2`\")\n  end\n  subgraph R1[\"`1`\"]\n  end\n  subgraph R0[\"`0`\"]\n  end\n  subgraph AR[\"` `\"]\n    xp[\"`broadcast(x2, 2)`\"]\n  end\n  subgraph AR0[\"`0`\"]\n    xp0(\"`x2`\")\n  end\n  subgraph AR1[\"`1`\"]\n    xp1(\"`x2`\")\n  end\n  subgraph AR2[\"`2`\"]\n    xp2(\"`x2`\")\n  end\n  subgraph AR3[\"`3`\"]\n    xp3(\"`x2`\")\n  end\n  x2 --&gt; AR\n  AR --&gt; AR0\n  AR --&gt; AR1\n  AR --&gt; AR2\n  AR --&gt; AR3\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383,font-weight:500\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,font-weight:500,color:#838383\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclass R0,R1,R2,R3,AR0,AR1,AR2,AR3,AR, block\nclass x2,xp0,xp1,xp2,xp3 blue\nclass xp, text\n\n\n\n\n\n\n\n\nFigure¬†10: broadcast (send) a tensor x from one rank to all ranks\n\n\n\n\n\nAllGather\n\n\n\n\n\n\n\n\nflowchart LR\n  subgraph R0[\"`0`\"]\n    x0(\"`x0`\")\n  end\n  subgraph R1[\"`1`\"]\n    x1(\"`x1`\")\n  end\n  subgraph R2[\"`2`\"]\n    x2(\"`x2`\")\n  end\n  subgraph AG[\"`Allgather`\"]\n    %%xp0[\"`z=[empty_like(x) for _ in range(4)]`\"]\n    %%xp1[\"`dist.all_gather(z, x)`\"]\n  end\n  subgraph AG2[\"`2`\"]\n    direction TB\n    xp02(\"`x0`\")\n    xp12(\"`x1`\")\n    xp22(\"`x2`\")\n  end\n  subgraph AG1[\"`1`\"]\n    direction TB\n    xp01(\"`x0`\")\n    xp11(\"`x1`\")\n    xp21(\"`x2`\")\n  end\n  subgraph AG0[\"`0`\"]\n    direction TB\n    xp00(\"`x0`\")\n    xp10(\"`x1`\")\n    xp20(\"`x2`\")\n  end\n  x0 --&gt; AG\n  x1 --&gt; AG\n  x2 --&gt; AG\n  AG --&gt; AG0\n  AG --&gt; AG1\n  AG --&gt; AG2\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,font-weight:500,color:#838383\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383\nclass xp0,xp1, text\nclass AG0,AG1,AG2,AG3,AG,R0,R1,R2,R3, block\nclass xp00,xp01,xp02,xp03, red\nclass xp10,xp11,xp12,xp13, green\nclass xp20,xp21,xp22,xp23, blue\nclass xp30,xp31,xp32,xp33, yellow\nclass x0, red\nclass x1, green\nclass x2, blue\nclass x3, yellow\n\n\n\n\n\n\n\n\nFigure¬†11: Gathers tensors from the whole group in a list.\n\n\n\n\n\nScatter\n\n\n\n\n\n\n\n\nflowchart TD\n  subgraph R3[\"`3`\"]\n  end\n  subgraph R2[\"`2`\"]\n  end\n  subgraph R1[\"`1`\"]\n    direction TB\n    xp0(\"`x0`\")\n    xp1(\"`x1`\")\n    xp2(\"`x2`\")\n    xp3(\"`x3`\")\n  end\n  subgraph R0[\"`0`\"]\n  end\n  subgraph S[\"`Scatter`\"]\n  end\n  subgraph S3[\"`3`\"]\n    x3(\"`x3`\")\n  end\n  subgraph S2[\"`2`\"]\n    x2(\"`x2`\")\n  end\n  subgraph S1[\"`1`\"]\n    x1(\"`x1`\")\n  end\n  subgraph S0[\"`0`\"]\n    x0(\"`x0`\")\n  end\n  R1 --&gt; S\n  S --&gt; S0\n  S --&gt; S1\n  S --&gt; S2\n  S --&gt; S3\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,font-weight:500,color:#838383\nclass AG0,AG1,AG2,AG3,S,R0,R1,R2,R3,S0,S1,S2,S3, block\nclass x0,xp0, red\nclass x1,xp1, green\nclass x2,xp2, blue\nclass x3,xp3, yellow\n\n\n\n\n\n\n\n\nFigure¬†12: Scatters a list of tensors to the whole group",
    "crumbs": [
      "[01] Neural Networks",
      "[5] Distributed Training"
    ]
  },
  {
    "objectID": "01-neural-networks/5-distributed-training/index.html#distributed-data-parallelism-ddp-1",
    "href": "01-neural-networks/5-distributed-training/index.html#distributed-data-parallelism-ddp-1",
    "title": "Distributed Training",
    "section": "Distributed Data Parallelism (DDP)",
    "text": "Distributed Data Parallelism (DDP)\n\nN workers each processing unique batch1 of data:\n\n[micro_batch_size = 1] \\times [N GPUs] \\rightarrow [global_batch_size = N]\n\nImproved gradient estimators\n\nSmooth loss landscape\nLess iterations needed for same number of epochs\n\ncommon to scale learning rate lr *= sqrt(N)\n\n\nSee: Large Batch Training of Convolutional Networks\n\n\nThe Case for Scaling\n\n\n\nTable¬†1: Recent progress\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYear\nAuthor\nGPU\nBatch Size\n# GPU\nTIME (s)\nACC\n\n\n\n\n2016\nHe\nP100\n256\n8\n104,400\n75.30%\n\n\n2019\nYamazaki\nV100\n81,920\n2048\n72\n75.08%\n\n\n\n\n\n\n\n\n\nDealing with Data\n\nAt each training step, we want to ensure that each worker receives unique data\nThis can be done in one of two ways:\n\nManually partition data (ahead of time)\n\nAssign unique subsets to each worker\nEach worker can only see their local portion of the data\nMost common approach\n\nFrom each worker, randomly select a mini-batch\n\nEach worker can see the full dataset\n‚ö†Ô∏è When randomly selecting, it is important that each worker uses different seeds to ensure they receive unique data\n\n\n\n\n\nBroadcast Initial State\n\nAt the start of training (or when loading from a checkpoint), we want all of our workers to be initialized consistently\n\nBroadcast the model and optimizer states from rank() == 0 worker\n\n\n\n\n\n\n\n\n\n\nflowchart TD\n  0[\"GPU0\"] --&gt; 1[\"GPU 1\"]\n  CKPT --&gt; 0\n  0 --&gt; 2[\"GPU 2\"]\n  0 --Model + Optim. State--&gt;3[\"GPU 3\"]\n  0 --&gt; X[\"`...`\"]\n  0 --&gt; N[\"GPU N\"]\nclassDef text fill:#CCCCCC02,stroke:#838383,stroke-width:0px,color:#838383,font-weight:500\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,font-weight:500,color:#838383\nclass 0,1,2,3,N,X,CKPT block\n\n\n\n\n\n\n\n\nFigure¬†13: To ensure all workers have the same copies, we load on RANK==0 and broadcast\n\n\n\n\n\nüíØ Best Practices\n\n\n\n\n\n\nImportant‚è∞ Keeping things in Sync\n\n\n\n\n\nComputation stalls during communication !!\nKeeping the communication to computation ratio small is important for effective scaling.\n\n\n\n\n\n\nUse parallel IO whenever possible\n\nFeed each rank from different files\nUse MPI IO to have each rank read its own batch from a file\nUse several ranks to read data, MPI to scatter to remaining ranks\n\nMost practical in big at-scale training\n\n\n\n\n\n\nTake advantage of data storage\n\nUse striping on lustre\n\nUse the right optimizations for Aurora, Polaris, etc.\nPreload data when possible\n\nOffloading to a GPU frees CPU cycles for loading the next batch of data\n\nminimize IO latency this way",
    "crumbs": [
      "[01] Neural Networks",
      "[5] Distributed Training"
    ]
  },
  {
    "objectID": "01-neural-networks/5-distributed-training/index.html#going-beyond-data-parallelism",
    "href": "01-neural-networks/5-distributed-training/index.html#going-beyond-data-parallelism",
    "title": "Distributed Training",
    "section": "üï∏Ô∏è Going Beyond Data Parallelism",
    "text": "üï∏Ô∏è Going Beyond Data Parallelism\n\n‚úÖ Useful when model fits on single GPU:\n\nultimately limited by GPU memory\nmodel performance limited by size\n\n‚ö†Ô∏è When model does not fit on a single GPU:\n\nOffloading (can only get you so far‚Ä¶):\n\n DeepSpeed + ZeRO\nüî• PyTorch + FSDP\n\nOtherwise, resort to model parallelism strategies\n\n\n\nGoing beyond Data Parallelism:  DeepSpeed + ZeRO\n\nDepending on the ZeRO stage (1, 2, 3), we can offload:\n\nStage 1: optimizer states \\left(P_{\\mathrm{os}}\\right)\nStage 2: gradients + opt. states \\left(P_{\\mathrm{os}+\\mathrm{g}}\\right)\nStage 3: model params + grads + opt. states \\left(P_{\\mathrm{os}+\\mathrm{g}+\\mathrm{p}}\\right)\n\n\n\n\n\n\n\n\nFigure¬†14:  DeepSpeed + ZeRO\n\n\n\n\n\nFully Sharded Data Parallel: üî• PyTorch + FSDP\n\nInstead of maintaining per-GPU copy of {params, grads, opt_states}, FSDP shards (distributes) these across data-parallel workers\n\ncan optionally offload the sharded model params to CPU\n\nIntroducing PyTorch Fully Sharded Data Parallel (FSDP) API | PyTorch\n\n\n\n\n\n\n\nFigure¬†15: FSDP Workflow. Source\n\n\n\n\n\nüï∏Ô∏è Additional Parallelism Strategies\n\nTensor (/ Model) Parallelism (TP):\n\nü§ó Tensor Parallelism\nüî• Large Scale Transformer model training with Tensor Parallel (TP)\n\nPipeline Parallelism (PP):\n\nüî• PyTorch,  DeepSpeed\n\nSequence Parallelism (SP):\n\n DeepSpeed Ulysses\nMegatron / Context Parallelism\nUnified Sequence Parallel (USP)\n\n feifeibear/long-context-attention\n\n\n argonne-lcf/Megatron-DeepSpeed\n\nSupports 4D Parallelism (DP + TP + PP + SP)\n\n\n\n\nPipeline Parallelism (PP)\n\n\n\nModel is split up vertically (layer-level) across multiple GPUs\nEach GPU:\n\nhas a portion of the full model\nprocesses in parallel different stages of the pipeline (on a small chunk of the batch)\n\nSee:\n\nüî• PyTorch / Pipeline Parallelism\n DeepSpeed / Pipeline Parallelism\n\n\n\n\n\n\n\n\n\n\n\n\nflowchart TB\n    subgraph G0[\"`GPU 0`\"]\n        direction LR\n        a0(\"`Layer 0`\")\n        b0(\"`Layer 1`\")\n    end\n    subgraph G1[\"`GPU 1`\"]\n        direction LR\n        a1(\"`Layer 2`\")\n        b1(\"`Layer 3`\")\n    end\n    a0 -.-&gt; b0\n    b0 --&gt; a1\n    a1 -.-&gt; b1\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclass G0,G1, block\nclass a0, red\nclass b0, green\nclass a1, blue\nclass b1, yellow\n\n\n\n\n\n\n\n\nFigure¬†16: Pipeline Parallelism\n\n\n\n\n\n\n\nTensor Parallel (TP)\n\n\n\n\nEach tensor is split up into multiple chunks\nEach shard of the tensor resides on its designated GPU\nDuring processing each shard gets processed separately (and in parallel) on different GPUs\n\nsynced at the end of the step\n\nSee: ü§ó Model Parallelism for additional details\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n   subgraph G0[\"`GPU0`\"]\n    direction TB\n    a0(\"`Layer 0`\")\n    b0(\"`Layer 1`\")\n    c0(\"`Layer 2`\")\n    d0(\"`Layer 3`\")\n   end\n   subgraph G1[\"`GPU1`\"]\n    direction TB\n    a1(\"`Layer 0`\")\n    b1(\"`Layer 1`\")\n    c1(\"`Layer 2`\")\n    d1(\"`Layer 3`\")\n   end\n   a0 &lt;-.-&gt; a1\n   b0 &lt;-.-&gt; b1\n   c0 &lt;-.-&gt; c1\n   d0 &lt;-.-&gt; d1\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclass G0,G1, block\nclass a0,a1 red\nclass b0,b1 green\nclass c0,c1 blue\nclass d0,d1 yellow\n\n\n\n\n\n\n\n\nFigure¬†17: Tensor Parallel Training\n\n\n\n\n\n\n\n\nTensor Parallel (TP)\n\n\n\n\nSuitable when the model is too large to fit onto a single device (CPU / GPU)\nTypically more complicated to implement than data parallel training\n\nThis is what one may call horizontal parallelism\nCommunication whenever dataflow between two subsets\n\n argonne-lcf/Megatron-DeepSpeed\nü§ó huggingface/nanotron\n\n\n\n\n\n\n\n\n\n\n\nflowchart LR\n   subgraph G0[\"`GPU0`\"]\n    direction TB\n    a0(\"`Layer 0`\")\n    b0(\"`Layer 1`\")\n    c0(\"`Layer 2`\")\n    d0(\"`Layer 3`\")\n   end\n   subgraph G1[\"`GPU1`\"]\n    direction TB\n    a1(\"`Layer 0`\")\n    b1(\"`Layer 1`\")\n    c1(\"`Layer 2`\")\n    d1(\"`Layer 3`\")\n   end\n   a0 &lt;-.-&gt; a1\n   b0 &lt;-.-&gt; b1\n   c0 &lt;-.-&gt; c1\n   d0 &lt;-.-&gt; d1\nclassDef red fill:#ff8181,stroke:#333,stroke-width:1px,color:#000\nclassDef orange fill:#FFC47F,stroke:#333,stroke-width:1px,color:#000\nclassDef yellow fill:#FFFF7F,stroke:#333,stroke-width:1px,color:#000\nclassDef green fill:#98E6A5,stroke:#333,stroke-width:1px,color:#000\nclassDef blue fill:#7DCAFF,stroke:#333,stroke-width:1px,color:#000\nclassDef purple fill:#FFCBE6,stroke:#333,stroke-width:1px,color:#000\nclassDef block fill:#CCCCCC02,stroke:#838383,stroke-width:1px,color:#838383\nclass G0,G1, block\nclass a0,a1 red\nclass b0,b1 green\nclass c0,c1 blue\nclass d0,d1 yellow\n\n\n\n\n\n\n\n\nFigure¬†18: Tensor Parallel Training\n\n\n\n\n\n\n\n\nSplit up network over multiple workers\nEach receives disjoint subset\nAll communication associated with subsets are distributed\nCommunication whenever dataflow between two subsets\nTypically more complicated to implement than data parallel training\nSuitable when the model is too large to fit onto a single device (CPU / GPU)\n\n\n\n\nTensor (/ Model) Parallel Training: Example\nWant to compute: y = \\sum_{i} x_{i} W_{i} = x_0 * W_0 + x_1 * W_1 + x_2 * W_2\nwhere each GPU only has only its portion of the full weights as shown below\n\nCompute: y_{0} = x_{0} * W_{0}\\rightarrow GPU1\nCompute: y_{1} = y_{0} + x_{1} * W_{1}\\rightarrow GPU2\nCompute: y = y_{1} + x_{2} * W_{2} = \\sum_{i} x_{i} W_{i} ‚úÖ\n\n\n\n\n\n\n\n\n\nflowchart LR\n    subgraph X0[\"`GPU0`\"]\n        direction LR\n        a(\"`W0`\")\n    end\n    subgraph X1[\"`GPU1`\"]\n        direction LR\n        b(\"`W1`\")\n    end\n    subgraph X2[\"`GPU2`\"]\n        direction LR\n        c(\"`W2`\")\n    end\n  t0(\"`x‚ÇÄ`\")--&gt;X0\n  X0 --&gt;|\"`x‚ÇÄ W‚ÇÄ`\"|X1\n  X1 --&gt;|\"`x‚ÇÄ W‚ÇÄ &lt;br&gt;+ x‚ÇÅ W‚ÇÅ`\"|X2\n  t1(\"`x‚ÇÅ`\") --&gt; X1\n  t2(\"`x‚ÇÇ`\") --&gt; X2\n\n\n\n\n\n\n\n\nFigure¬†19\n\n\n\n\n\nTensor (Model) Parallelism2\n\nIn Tensor Paralleism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing.\n\nThe main building block of any transformer is a fully connected nn.Linear followed by a nonlinear activation GeLU.\n\nY = GeLU(XA), where X and Y are the input and output vectors, and A is the weight matrix.\n\nIf we look at the computation in matrix form, it‚Äôs easy to see how the matrix multiplication can be split between multiple GPUs:\n\n\n\n\nTensor Parallelism\n\n\n\n\n\n\nFigure¬†20: Tensor Parallel GEMM. This information is based on (the much more in-depth) TP Overview by @anton-l\n\n\n\n\n\n3D Parallelism\n\nDP + TP + PP (3D) Parallelism\n\n\n\n\n\n\n\nFigure¬†21: Figure taken from 3D parallelism: Scaling to trillion-parameter models\n\n\n\n\n\nDeciding on a Parallelism Strategy\n\nSingle GPU\n\nModel fits onto a single GPU:\n\nNormal use\n\nModel DOES NOT fit on a single GPU:\n\nZeRO + Offload CPU (or, optionally, NVMe)\n\nLargest layer DOES NOT fit on a single GPU:\n\nZeRO + Enable Memory Centric Tiling (MCT)\n\nMCT Allows running of arbitrarily large layers by automatically splitting them and executing them sequentially.\n\n\n\n\n\nSingle Node / Multi-GPU\n\n\n\nModel fits onto a single GPU\n\nDDP\nZeRO\n\n\n\n\n\nModel DOES NOT fit onto a single GPU\n\nPipeline Parallelism (PP)\nZeRO\nTensor Parallelism (TP)\n\n\n\n\n\nWith sufficiently fast connectivity between nodes, these three strategies should be comparable.\n\nOtherwise, PP &gt; ZeRO \\simeq TP.\n\n\n\n\nMulti-Node / Multi-GPU\n\nWhen you have fast inter-node connectivity:\n\nZeRO (virtually NO modifications)\nPP + ZeRO + TP + DP (less communication, at the cost of MAJOR modifications)\n\nwhen you have slow inter-node connectivity and still low on GPU memory:\nDP + PP + TP + ZeRO-1\n\nNOTE: TP is almost always used within a single node, e.g.\nTP &lt;= GPUS_PER_NODE",
    "crumbs": [
      "[01] Neural Networks",
      "[5] Distributed Training"
    ]
  },
  {
    "objectID": "01-neural-networks/5-distributed-training/index.html#large-language-models",
    "href": "01-neural-networks/5-distributed-training/index.html#large-language-models",
    "title": "Distributed Training",
    "section": "ü¶ô Large Language Models",
    "text": "ü¶ô Large Language Models\n\n\n\n\n\n\nFigure¬†22: Large Language Models have (LLM)s have taken the NLP community world by storm3.\n\n\n\n\nüîÆ Emergent Abilities\n\n\n\n\n\n\nFigure¬†23: See Wei et al. (2022), Yao et al. (2023)\n\n\n\n\n\nüöÇ Training LLMs\n\n\n\n\n\n\nVisualization from Hannibal046/Awesome-LLM\n\n\n\n\n¬†\n\n\n\n\n\n\n\n\n‚ôªÔ∏è Life-Cycle of the LLM\n\n\n\nData collection + preprocessing\nPre-training\n\nArchitecture decisions, model size, etc.\n\nSupervised Fine-Tuning\n\nInstruction Tuning\nAlignment\n\nDeploy (+ monitor, re-evaluate, etc.)\n\n\n\n\n\n\n\n\n\nFigure¬†24: Pre-training: Virtually all of the compute used during pre-training4.\n\n\n\n\n\n\n\nüéÄ Life-Cycle of the LLM\n\n\n\nData collection + preprocessing\nPre-training\n\nArchitecture decisions, model size, etc.\n\nSupervised Fine-Tuning\n\nInstruction Tuning\nAlignment\n\nDeploy (+ monitor, re-evaluate, etc.)\n\n\n\n\n\n\n\n\n\nFigure¬†25: Fine-tuning: Fine-tuning actually updates the model‚Äôs weights to make the model better at a certain task5.\n\n\n\n\n\n\n\n‚è© Forward Pass\n\n\n\nVideo\n\n\nFigure¬†26: Language Model trained for causal language modeling6.\n\n\n\n\n\nüí¨ Generating Text\n\n\n\nVideo\n\n\nFigure¬†27: Language Model trained for causal language modeling7.",
    "crumbs": [
      "[01] Neural Networks",
      "[5] Distributed Training"
    ]
  },
  {
    "objectID": "01-neural-networks/5-distributed-training/index.html#hands-on",
    "href": "01-neural-networks/5-distributed-training/index.html#hands-on",
    "title": "Distributed Training",
    "section": "üëã Hands On",
    "text": "üëã Hands On\n ai-science-training-series / 06_parallel_training\n\nüßë‚Äçüíª Hands On: Getting Started\n\nüå± Clone Repo(s):\n\n saforem2/wordplay\ngit clone https://github.com/saforem2/wordplay\ncd wordplay\n saforem2/ezpz\ngit clone https://github.com/saforem2/ezpz deps/ezpz\n\nüêç Setup Python:\nexport PBS_O_WORKDIR=$(pwd) && source deps/ezpz/src/ezpz/bin/utils.sh\nezpz_setup_python\nezpz_setup_job\n\n\n\nüì¶ Install {ezpz, wordplay}\n\nInstall Python packages:\n\n saforem2/ezpz:\npython3 -m pip install -e \"./deps/ezpz\" --require-virtualenv\n saforem2/wordplay:\n# from inside `wordplay/`\npython3 -m pip install -e . --require-virtualenv\n\nTest distributed setup:\nmpirun -n \"${NGPUS}\" python3 -m ezpz.test_dist\nSee: üçã ezpz/test_dist.py\n\n\n\n ezpz: Example [video]\n\n\n\n\n\n\nFigure¬†28: Example: using üçã ezpz.test_dist to train a small model using DDP\n\n\n\n\n\nInstall wordplay üéÆüí¨\n\n\n\n\n\n\nFigure¬†29: The simplest, fastest repository for training / finetuning GPT based models. Figure from karpathy/nanoGPT\n\n\n\n\n\nPrepare Data\n$ python3 wordplay/data/shakespeare_char/prepare.py\nUsing HF_DATASETS_CACHE=/home/foremans/tmp/polaris-talk/2024-07-17-073327/wordplay/data/shakespeare_char/.cache/huggingface\nlength of dataset in characters: 1,115,394\nall the unique characters:\n !$&\\',-.3:;?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\nvocab size: 65\ntrain has 1,003,854 tokens\nval has 111,540 tokens\n\n\nLaunch Training (DDP)\nlaunch python3 -m wordplay \\\n    train.backend=DDP \\\n    train.eval_interval=100 \\\n    data=shakespeare \\\n    train.dtype=bf16 \\\n    model.batch_size=64 \\\n    model.block_size=1024 \\\n    train.max_iters=1000 \\\n    train.log_interval=10 \\\n    train.compile=false \\\n    | tee wordplay-gpt2-DDP.log\n\n\nTraining: Example Output\n$ launch python3 -m wordplay \\\n    train.backend=DDP \\\n    train.eval_interval=100 \\\n    data=shakespeare \\\n    train.dtype=bf16 \\\n    model.batch_size=64 \\\n    model.block_size=1024 \\\n    train.max_iters=1000 \\\n    train.log_interval=10 \\\n    train.compile=false \\\n    | tee wordplay-gpt2-DDP.log\n[2024-07-17 07:42:11.746540][INFO][__init__:156] - Setting logging level to 'INFO' on 'RANK == 0'\n[2024-07-17 07:42:11.748763][INFO][__init__:157] - Setting logging level to 'CRITICAL' on all others 'RANK != 0'\n[2024-07-17 07:42:11.749453][INFO][__init__:160] - To disable this behavior, and log from ALL ranks (not recommended), set: 'export LOG_FROM_ALL_RANKS=1'  in your environment, and re-run.\n[2024-07-17 07:42:11.772718][INFO][configs:81] - Setting HF_DATASETS_CACHE to /home/foremans/tmp/polaris-talk/2024-07-17-073327/wordplay/.cache/huggingface/datasets\n[2024-07-17 07:42:15.341532][INFO][dist:358] - [device='cuda'][rank=2/3][local_rank=2/3][node=0/0]\n[2024-07-17 07:42:15.342381][INFO][dist:358] - [device='cuda'][rank=1/3][local_rank=1/3][node=0/0]\n[2024-07-17 07:42:15.342430][INFO][dist:358] - [device='cuda'][rank=3/3][local_rank=3/3][node=0/0]\n[2024-07-17 07:42:15.348657][INFO][dist:95] -\n\n[dist_info]:\n  ‚Ä¢ DEVICE=cuda\n  ‚Ä¢ DEVICE_ID=cuda:0\n  ‚Ä¢ DISTRIBUTED_BACKEND=nccl\n  ‚Ä¢ GPUS_PER_NODE=4\n  ‚Ä¢ HOSTS=['x3101c0s13b0n0.hsn.cm.polaris.alcf.anl.gov']\n  ‚Ä¢ HOSTFILE=/var/spool/pbs/aux/2024084.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov\n  ‚Ä¢ HOSTNAME=x3101c0s13b0n0.hsn.cm.polaris.alcf.anl.gov\n  ‚Ä¢ LOCAL_RANK=0\n  ‚Ä¢ MACHINE=Polaris\n  ‚Ä¢ NUM_NODES=1\n  ‚Ä¢ NGPUS=4\n  ‚Ä¢ NGPUS_AVAILABLE=4\n  ‚Ä¢ NODE_ID=0\n  ‚Ä¢ RANK=0\n  ‚Ä¢ SCHEDULER=PBS\n  ‚Ä¢ WORLD_SIZE_TOTAL=4\n  ‚Ä¢ WORLD_SIZE_IN_USE=4\n  ‚Ä¢ LAUNCH_CMD=mpiexec --verbose --envall -n 4 -ppn 4 --hostfile /var/spool/pbs/aux/2024084.polaris-pbs-01.hsn.cm.polaris.alcf.anl.gov --cpu-bind depth -d 16\n\n[2024-07-17 07:42:15.351446][INFO][dist:725] - [0/4] Using device='cuda' with backend='DDP' + 'nccl' for distributed training.\n[2024-07-17 07:42:15.356169][INFO][dist:358] - [device='cuda'][rank=0/3][local_rank=0/3][node=0/0]\n[2024-07-17 07:42:15.356692][WARNING][dist:364] - Using [4 / 4] available \"cuda\" devices !!\n[2024-07-17 07:42:15.359571][INFO][configs:317] - Loading val from /home/foremans/tmp/polaris-talk/2024-07-17-073327/wordplay/data/shakespeare_char/val.bin\n[2024-07-17 07:42:15.360138][INFO][configs:317] - Loading train from /home/foremans/tmp/polaris-talk/2024-07-17-073327/wordplay/data/shakespeare_char/train.bin\n[2024-07-17 07:42:15.361154][INFO][configs:442] - Tokens per iteration: 262,144\n[2024-07-17 07:42:15.361574][INFO][configs:465] - Using self.ptdtype=torch.float16 on self.device_type='cuda'\n[2024-07-17 07:42:15.362002][INFO][configs:471] - Initializing a new model from scratch\n[2024-07-17 07:42:15.362529][INFO][dist:874] - Setting up wandb from rank: 0\n[2024-07-17 07:42:15.362896][INFO][dist:875] - Using: WB PROJECT: WordPlay\n[2024-07-17 07:42:16.451786][INFO][dist:905] - W&B RUN: [still-frog-17](https://wandb.ai/aurora_gpt/WordPlay/runs/6by9vpcj)\n[2024-07-17 07:42:16.464106][INFO][dist:312] - Updating wandb.run: still-frog-17 config with \"DIST_INFO\"\n[2024-07-17 07:42:16.469424][INFO][dist:938] - Running on machine='Polaris'\n[2024-07-17 07:42:16.471151][WARNING][__main__:89] - {\n    \"train\": {\n        \"framework\": \"pytorch\",\n        \"backend\": \"DDP\",\n        \"device\": null,\n        \"seed\": null,\n        \"port\": null,\n        \"ds_config_path\": null,\n        \"precision\": null,\n        \"ngpus\": null,\n        \"use_wandb\": true,\n        \"eval_interval\": 100,\n        \"log_interval\": 10,\n        \"eval_iters\": 200,\n        \"eval_only\": false,\n        \"always_save_checkpoint\": false,\n        \"init_from\": \"scratch\",\n        \"wandb_project\": \"WordPlay\",\n        \"max_iters\": 1000,\n        \"warmup_iters\": 100,\n        \"dtype\": \"bf16\",\n        \"compile\": false\n    },\n    \"model\": {\n        \"n_layer\": 12,\n        \"n_head\": 12,\n        \"n_embd\": 768,\n        \"batch_size\": 64,\n        \"block_size\": 1024,\n        \"activation\": \"gelu\",\n        \"dropout\": 0.0,\n        \"bias\": false,\n        \"vocab_size\": 65\n    },\n    \"data\": {\n        \"dataset\": \"shakespeare_char\",\n        \"out_dir\": \"out-shakespeare-char\",\n        \"root_path\": null\n    },\n    \"optimizer\": {\n        \"gas\": 1,\n        \"name\": \"AdamW\",\n        \"learning_rate\": 0.0006,\n        \"weight_decay\": 0.1,\n        \"beta1\": 0.9,\n        \"beta2\": 0.95,\n        \"grad_clip\": 1.0,\n        \"decay_lr\": true,\n        \"lr_decay_iters\": 600000,\n        \"min_lr\": 6e-05\n    }\n}\n[2024-07-17 07:42:16.474305][WARNING][__main__:90] - Output dir: /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13\n[2024-07-17 07:42:16.474922][INFO][trainer:246] - Initializing a new model from scratch\n[2024-07-17 07:42:17.258904][INFO][model:255] - number of parameters: 85.00M\n[2024-07-17 07:42:17.290004][INFO][trainer:264] - Model size: num_params=85003776\n[2024-07-17 07:42:17.292626][INFO][model:445] - num decayed parameter tensors: 50, with 85,771,008 parameters\n[2024-07-17 07:42:17.293296][INFO][model:449] - num non-decayed parameter tensors: 25, with 19,200 parameters\n[2024-07-17 07:42:17.515324][CRITICAL][trainer:316] - \"devid='cuda:1'\"\n[2024-07-17 07:42:17.515340][CRITICAL][trainer:316] - \"devid='cuda:2'\"\n[2024-07-17 07:42:17.515465][CRITICAL][trainer:316] - \"devid='cuda:3'\"\n[2024-07-17 07:42:18.431814][INFO][model:465] - using fused AdamW: True\n[2024-07-17 07:42:18.432620][CRITICAL][trainer:316] - \"devid='cuda:0'\"\n[2024-07-17 07:42:19.951020][INFO][trainer:356] - ‚Ä¢ self.model=GPT(\n  (transformer): ModuleDict(\n    (wte): Embedding(65, 768)\n    (wpe): Embedding(1024, 768)\n    (drop): Dropout(p=0.0, inplace=False)\n    (h): ModuleList(\n      (0-11): 12 x Block(\n        (ln_1): LayerNorm()\n        (attn): CausalSelfAttention(\n          (c_attn): Linear(in_features=768, out_features=2304, bias=False)\n          (c_proj): Linear(in_features=768, out_features=768, bias=False)\n          (attn_dropout): Dropout(p=0.0, inplace=False)\n          (resid_dropout): Dropout(p=0.0, inplace=False)\n        )\n        (ln_2): LayerNorm()\n        (mlp): MLP(\n          (c_fc): Linear(in_features=768, out_features=3072, bias=False)\n          (act_fn): GELU(approximate='none')\n          (c_proj): Linear(in_features=3072, out_features=768, bias=False)\n          (dropout): Dropout(p=0.0, inplace=False)\n        )\n      )\n    )\n    (ln_f): LayerNorm()\n  )\n  (lm_head): Linear(in_features=768, out_features=65, bias=False)\n)\n[2024-07-17 07:42:19.955340][INFO][trainer:357] - ‚Ä¢ self.grad_scaler=&lt;torch.cuda.amp.grad_scaler.GradScaler object at 0x145a38f0f090&gt;\n[2024-07-17 07:42:19.956897][INFO][trainer:358] - ‚Ä¢ self.model_engine=DistributedDataParallel(\n  (module): GPT(\n    (transformer): ModuleDict(\n      (wte): Embedding(65, 768)\n      (wpe): Embedding(1024, 768)\n      (drop): Dropout(p=0.0, inplace=False)\n      (h): ModuleList(\n        (0-11): 12 x Block(\n          (ln_1): LayerNorm()\n          (attn): CausalSelfAttention(\n            (c_attn): Linear(in_features=768, out_features=2304, bias=False)\n            (c_proj): Linear(in_features=768, out_features=768, bias=False)\n            (attn_dropout): Dropout(p=0.0, inplace=False)\n            (resid_dropout): Dropout(p=0.0, inplace=False)\n          )\n          (ln_2): LayerNorm()\n          (mlp): MLP(\n            (c_fc): Linear(in_features=768, out_features=3072, bias=False)\n            (act_fn): GELU(approximate='none')\n            (c_proj): Linear(in_features=3072, out_features=768, bias=False)\n            (dropout): Dropout(p=0.0, inplace=False)\n          )\n        )\n      )\n      (ln_f): LayerNorm()\n    )\n    (lm_head): Linear(in_features=768, out_features=65, bias=False)\n  )\n)\n[2024-07-17 07:42:19.961066][INFO][trainer:359] - ‚Ä¢ self.optimizer=AdamW (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.95)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: True\n    lr: 0.0006\n    maximize: False\n    weight_decay: 0.1\n\nParameter Group 1\n    amsgrad: False\n    betas: (0.9, 0.95)\n    capturable: False\n    differentiable: False\n    eps: 1e-08\n    foreach: None\n    fused: True\n    lr: 0.0006\n    maximize: False\n    weight_decay: 0.0\n)\n[2024-07-17 07:42:19.988827][INFO][trainer:802] - Startup time: 6.7125\n                Training Legend\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ    abbr     ‚îÉ desc                           ‚îÉ\n‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©\n‚îÇ    step     ‚îÇ Current training iteration     ‚îÇ\n‚îÇ    loss     ‚îÇ Loss value                     ‚îÇ\n‚îÇ     dt      ‚îÇ Elapsed time per training step ‚îÇ\n‚îÇ     dtf     ‚îÇ Elapsed time per forward step  ‚îÇ\n‚îÇ     dtb     ‚îÇ Elapsed time per backward step ‚îÇ\n‚îÇ     sps     ‚îÇ Samples per second             ‚îÇ\n‚îÇ sps_per_gpu ‚îÇ Samples per second (per GPU)   ‚îÇ\n‚îÇ     tps     ‚îÇ Tokens per second              ‚îÇ\n‚îÇ tps_per_gpu ‚îÇ Tokens per second (per GPU)    ‚îÇ\n‚îÇ     mfu     ‚îÇ Model flops utilization        ‚îÇ\n‚îÇ train_loss  ‚îÇ Training loss value            ‚îÇ\n‚îÇ  val_loss   ‚îÇ Validation loss value          ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n[2024-07-17 07:42:21.451865][INFO][trainer:820] - ['prompt']: 'What is an LLM?'\n[2024-07-17 07:42:21.452667][INFO][trainer:824] - ['response']:\nWhat is an LLM?eelEl\\'$nltPwBSWal,;PWw bbu\\'HiyP\\'FWwF &AhW:ygrn kk-\\'\\'KFlMwnlEfflkc,elpWaWtgml$Pgglhllw lglhFllzczPAFHpeAAPPSltgkrWPPhlEMgcrN ggPWt-WPSSzHSkkrzzk.FFrtSSkgMll&gFXr,hghaueaVPW-pHFF-gg,,,FF,,kbApgg gg\\'aWWzzkk\\'a\\'CggHl$bGeA,FFk,,SF;UF,,aZ ;gglee$,k.US&kg:S,,zVzzc\n[2024-07-17 07:43:01.573073][INFO][trainer:885] - step=10 loss=3.154310 dt=0.282833 dtf=0.005247 dtb=0.011417 sps=14.142633 sps_per_gpu=3.535658 tps=926851.609409 tps_per_gpu=231712.902352 mfu=46.288281 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:04.402750][INFO][trainer:885] - step=20 loss=2.660851 dt=0.306263 dtf=0.005233 dtb=0.011419 sps=13.060678 sps_per_gpu=3.265170 tps=855944.613638 tps_per_gpu=213986.153409 mfu=45.934162 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:07.237507][INFO][trainer:885] - step=30 loss=2.543283 dt=0.283021 dtf=0.005238 dtb=0.011245 sps=14.133211 sps_per_gpu=3.533303 tps=926234.088226 tps_per_gpu=231558.522057 mfu=45.966490 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:10.077248][INFO][trainer:885] - step=40 loss=2.503963 dt=0.285001 dtf=0.005213 dtb=0.011471 sps=14.035061 sps_per_gpu=3.508765 tps=919801.749941 tps_per_gpu=229950.437485 mfu=45.963461 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:12.917039][INFO][trainer:885] - step=50 loss=2.477469 dt=0.283532 dtf=0.005166 dtb=0.011294 sps=14.107763 sps_per_gpu=3.526941 tps=924566.380009 tps_per_gpu=231141.595002 mfu=45.984530 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:15.760749][INFO][trainer:885] - step=60 loss=2.471083 dt=0.284630 dtf=0.005140 dtb=0.011224 sps=14.053326 sps_per_gpu=3.513332 tps=920998.786204 tps_per_gpu=230249.696551 mfu=45.985675 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:18.602785][INFO][trainer:885] - step=70 loss=2.458894 dt=0.283926 dtf=0.005219 dtb=0.010383 sps=14.088155 sps_per_gpu=3.522039 tps=923281.352698 tps_per_gpu=230820.338174 mfu=45.998106 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:21.451433][INFO][trainer:885] - step=80 loss=2.489088 dt=0.285537 dtf=0.005183 dtb=0.011373 sps=14.008683 sps_per_gpu=3.502171 tps=918073.060430 tps_per_gpu=229518.265108 mfu=45.983282 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:24.302241][INFO][trainer:885] - step=90 loss=2.471990 dt=0.300767 dtf=0.005445 dtb=0.010290 sps=13.299337 sps_per_gpu=3.324834 tps=871585.359388 tps_per_gpu=217896.339847 mfu=45.737774 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:27.153275][INFO][trainer:885] - step=100 loss=2.445556 dt=0.285869 dtf=0.005182 dtb=0.011251 sps=13.992403 sps_per_gpu=3.498101 tps=917006.151328 tps_per_gpu=229251.537832 mfu=45.743655 train_loss=4.125778 val_loss=4.128809\n[2024-07-17 07:43:28.182553][INFO][trainer:820] - ['prompt']: 'What is an LLM?'\n[2024-07-17 07:43:28.183179][INFO][trainer:824] - ['response']:\n\nWhat is an LLM?\n\nGoupay my winghimithell bls ger t bon sinthard ht omind be,\nAnd lereind h py balithand frd oforondof wimon me hageas thinero mand,\nThacanes,\nAn frift ghik med d herthecke ntore thack couthen ale, t thit ang d m t h chy me fache ag, wit my hathan glat ng\n[2024-07-17 07:44:06.025837][INFO][trainer:760] - Saving checkpoint to: /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13\n[2024-07-17 07:44:06.026607][INFO][trainer:761] - Saving model to: /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13/model.pth\n[2024-07-17 07:44:07.682968][INFO][configs:141] - Appending /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13 to /home/foremans/tmp/polaris-talk/2024-07-17-073327/wordplay/src/ckpts/checkpoints.log\n[2024-07-17 07:44:10.519506][INFO][trainer:885] - step=110 loss=2.433923 dt=0.285038 dtf=0.005757 dtb=0.011762 sps=14.033209 sps_per_gpu=3.508302 tps=919680.367894 tps_per_gpu=229920.091974 mfu=45.762304 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:13.362148][INFO][trainer:885] - step=120 loss=2.429014 dt=0.284445 dtf=0.005222 dtb=0.011486 sps=14.062460 sps_per_gpu=3.515615 tps=921597.361532 tps_per_gpu=230399.340383 mfu=45.788661 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:16.210694][INFO][trainer:885] - step=130 loss=2.402059 dt=0.285559 dtf=0.005199 dtb=0.011765 sps=14.007633 sps_per_gpu=3.501908 tps=918004.211586 tps_per_gpu=229501.052897 mfu=45.794438 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:19.061546][INFO][trainer:885] - step=140 loss=2.374062 dt=0.285476 dtf=0.005239 dtb=0.011453 sps=14.011662 sps_per_gpu=3.502916 tps=918268.297093 tps_per_gpu=229567.074273 mfu=45.800956 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:21.917283][INFO][trainer:885] - step=150 loss=2.365385 dt=0.285846 dtf=0.005125 dtb=0.011320 sps=13.993568 sps_per_gpu=3.498392 tps=917082.475791 tps_per_gpu=229270.618948 mfu=45.800900 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:24.771924][INFO][trainer:885] - step=160 loss=2.317337 dt=0.280788 dtf=0.005173 dtb=0.011249 sps=14.245602 sps_per_gpu=3.561401 tps=933599.792506 tps_per_gpu=233399.948127 mfu=45.883340 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:27.626812][INFO][trainer:885] - step=170 loss=2.256231 dt=0.284973 dtf=0.005141 dtb=0.011299 sps=14.036416 sps_per_gpu=3.509104 tps=919890.544506 tps_per_gpu=229972.636126 mfu=45.889069 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:30.480952][INFO][trainer:885] - step=180 loss=2.216419 dt=0.286555 dtf=0.005180 dtb=0.011402 sps=13.958906 sps_per_gpu=3.489726 tps=914810.852170 tps_per_gpu=228702.713043 mfu=45.868857 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:33.337342][INFO][trainer:885] - step=190 loss=2.145123 dt=0.291456 dtf=0.005409 dtb=0.019347 sps=13.724205 sps_per_gpu=3.431051 tps=899429.467247 tps_per_gpu=224857.366812 mfu=45.773849 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:36.194584][INFO][trainer:885] - step=200 loss=2.068149 dt=0.285703 dtf=0.005153 dtb=0.011286 sps=14.000555 sps_per_gpu=3.500139 tps=917540.393411 tps_per_gpu=229385.098353 mfu=45.778791 train_loss=2.439494 val_loss=2.478951\n[2024-07-17 07:44:37.224149][INFO][trainer:820] - ['prompt']: 'What is an LLM?'\n[2024-07-17 07:44:37.224745][INFO][trainer:824] - ['response']:\n\nWhat is an LLM?\n\nLORTESS LA:\nNo, sighappat selace? don downd sourciceans note cancen up sof liond\nThis and my man, werame, of re thee\nThise not will I on land brond sul me a fingore?\n\nFLER:\nTisint your not nare lame o igen,-to brorst.\n\nSamERS:\nSin:\nI\\'l hell she lor hen w\n[2024-07-17 07:45:14.409129][INFO][trainer:760] - Saving checkpoint to: /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13\n[2024-07-17 07:45:14.409820][INFO][trainer:761] - Saving model to: /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13/model.pth\n[2024-07-17 07:45:16.366935][INFO][configs:141] - Appending /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13 to /home/foremans/tmp/polaris-talk/2024-07-17-073327/wordplay/src/ckpts/checkpoints.log\n[2024-07-17 07:45:19.245061][INFO][trainer:885] - step=210 loss=1.982169 dt=0.283305 dtf=0.005223 dtb=0.011284 sps=14.119042 sps_per_gpu=3.529760 tps=925305.515083 tps_per_gpu=231326.378771 mfu=45.822019 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:22.092430][INFO][trainer:885] - step=220 loss=1.897731 dt=0.284759 dtf=0.005217 dtb=0.011187 sps=14.046945 sps_per_gpu=3.511736 tps=920580.608106 tps_per_gpu=230145.152026 mfu=45.837327 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:24.942639][INFO][trainer:885] - step=230 loss=1.817213 dt=0.285266 dtf=0.005208 dtb=0.011446 sps=14.022003 sps_per_gpu=3.505501 tps=918945.985503 tps_per_gpu=229736.496376 mfu=45.842940 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:27.797910][INFO][trainer:885] - step=240 loss=1.779287 dt=0.285465 dtf=0.005189 dtb=0.011220 sps=14.012250 sps_per_gpu=3.503062 tps=918306.793546 tps_per_gpu=229576.698387 mfu=45.844800 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:30.653597][INFO][trainer:885] - step=250 loss=1.704220 dt=0.289284 dtf=0.005471 dtb=0.010346 sps=13.827253 sps_per_gpu=3.456813 tps=906182.836379 tps_per_gpu=226545.709095 mfu=45.785926 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:33.512769][INFO][trainer:885] - step=260 loss=1.671318 dt=0.287679 dtf=0.005125 dtb=0.011250 sps=13.904380 sps_per_gpu=3.476095 tps=911237.442617 tps_per_gpu=227809.360654 mfu=45.758182 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:36.373461][INFO][trainer:885] - step=270 loss=1.650952 dt=0.298661 dtf=0.005118 dtb=0.011520 sps=13.393107 sps_per_gpu=3.348277 tps=877730.651421 tps_per_gpu=219432.662855 mfu=45.565875 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:39.236930][INFO][trainer:885] - step=280 loss=1.573242 dt=0.285970 dtf=0.005171 dtb=0.011290 sps=13.987477 sps_per_gpu=3.496869 tps=916683.279847 tps_per_gpu=229170.819962 mfu=45.587333 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:42.100605][INFO][trainer:885] - step=290 loss=1.533265 dt=0.286487 dtf=0.005432 dtb=0.011288 sps=13.962259 sps_per_gpu=3.490565 tps=915030.617828 tps_per_gpu=228757.654457 mfu=45.598392 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:44.964424][INFO][trainer:885] - step=300 loss=1.492064 dt=0.288480 dtf=0.005355 dtb=0.011480 sps=13.865774 sps_per_gpu=3.466443 tps=908707.340870 tps_per_gpu=227176.835218 mfu=45.576766 train_loss=2.045786 val_loss=2.148510\n[2024-07-17 07:45:45.995833][INFO][trainer:820] - ['prompt']: 'What is an LLM?'\n[2024-07-17 07:45:45.996497][INFO][trainer:824] - ['response']:\n\nWhat is an LLM?\n\nRICHMORD:\nChar stire? how in those are name the range hone.\n\nGLOUCESTER:\nNay, in lond's time the palt are worder more\nThat wilt in the purpose be a pey\nAnd thou thine onter hands, and the which broth.\n\nELBOWINCA:\nAt lie my lord with the me an arms be a s\n[2024-07-17 07:46:23.549987][INFO][trainer:760] - Saving checkpoint to: /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13\n[2024-07-17 07:46:23.550696][INFO][trainer:761] - Saving model to: /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13/model.pth\n[2024-07-17 07:46:25.496559][INFO][configs:141] - Appending /home/foremans/tmp/polaris-talk/outputs/runs/pytorch/DDP/2024-07-17/07-42-13 to /home/foremans/tmp/polaris-talk/2024-07-17-073327/wordplay/src/ckpts/checkpoints.log\n[2024-07-17 07:46:28.374854][INFO][trainer:885] - step=310 loss=1.444200 dt=0.299907 dtf=0.005333 dtb=0.010637 sps=13.337481 sps_per_gpu=3.334370 tps=874085.133345 tps_per_gpu=218521.283336 mfu=45.384395 train_loss=1.495372 val_loss=1.713714\n[2024-07-17 07:46:31.223079][INFO][trainer:885] - step=320 loss=1.429350 dt=0.285238 dtf=0.005245 dtb=0.011485 sps=14.023353 sps_per_gpu=3.505838 tps=919034.479880 tps_per_gpu=229758.619970 mfu=45.435743 train_loss=1.495372 val_loss=1.713714\n[2024-07-17 07:46:34.074957][INFO][trainer:885] - step=330 loss=1.362220 dt=0.285027 dtf=0.005165 dtb=0.011407 sps=14.033736 sps_per_gpu=3.508434 tps=919714.904826 tps_per_gpu=229928.726207 mfu=45.485355 train_loss=1.495372 val_loss=1.713714\n[2024-07-17 07:46:36.929464][INFO][trainer:885] - step=340 loss=1.350888 dt=0.284436 dtf=0.005199 dtb=0.011287 sps=14.062893 sps_per_gpu=3.515723 tps=921625.744709 tps_per_gpu=230406.436177 mfu=45.539549 train_loss=1.495372 val_loss=1.713714\n\n\n wordplay: Example [video]\n\n\n\n\n\n\nFigure¬†30: Training a LLM to talk like Shakespeare using saforem2/wordplay üéÆüí¨",
    "crumbs": [
      "[01] Neural Networks",
      "[5] Distributed Training"
    ]
  },
  {
    "objectID": "01-neural-networks/5-distributed-training/index.html#acknowledgements",
    "href": "01-neural-networks/5-distributed-training/index.html#acknowledgements",
    "title": "Distributed Training",
    "section": "‚ù§Ô∏è Acknowledgements",
    "text": "‚ù§Ô∏è Acknowledgements\n\nüôå Thank you!\n\n  \n\n\n\n\n\n\n\nNoteAcknowledgements\n\n\n\n\n\nThis research used resources of the Argonne Leadership Computing Facility, which is a DOE Office of Science User Facility supported under Contract DE-AC02-06CH11357\n\n\n\n\n\nüìì References\n\nTitle slide (Tetris animation) from: emilhvitfeldt/quarto-iframe-examples",
    "crumbs": [
      "[01] Neural Networks",
      "[5] Distributed Training"
    ]
  },
  {
    "objectID": "01-neural-networks/5-distributed-training/index.html#footnotes",
    "href": "01-neural-networks/5-distributed-training/index.html#footnotes",
    "title": "Distributed Training",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nmicro_batch_size = batch_size per GPU‚Ü©Ô∏é\nEfficient Large-Scale Language Model Training on GPU Clusters‚Ü©Ô∏é\nSource:  Hannibal046/Awesome-LLM‚Ü©Ô∏é\nFigure from The Illustrated Transformer‚Ü©Ô∏é\nFigure from The Illustrated Transformer‚Ü©Ô∏é\nVideo from: ü§ó Generation with LLMs‚Ü©Ô∏é\nVideo from: ü§ó Generation with LLMs‚Ü©Ô∏é",
    "crumbs": [
      "[01] Neural Networks",
      "[5] Distributed Training"
    ]
  },
  {
    "objectID": "01-neural-networks/3-conv-nets/index.html#getting-started",
    "href": "01-neural-networks/3-conv-nets/index.html#getting-started",
    "title": "Convolutional Neural Networks",
    "section": "Getting Started",
    "text": "Getting Started\n \nUp until transformers, convolutions were the state of the art in computer vision.\nIn many ways and applications they still are!\nLarge Language Models, which are what we‚Äôll focus on the rest of the series after this lecture, are really good at ordered, *tokenized data. But there is lots of data that isn‚Äôt implicitly ordered like images, and their more general cousins graphs.\nToday‚Äôs lecture focuses on computer vision models, and particularly on convolutional neural networks. There are a ton of applications you can do with these, and not nearly enough time to get into them. Check out the extra references file to see some publications to get you started if you want to learn more.\nTip: this notebook is much faster on the GPU!",
    "crumbs": [
      "[01] Neural Networks",
      "[3] Conv. Nets"
    ]
  },
  {
    "objectID": "01-neural-networks/3-conv-nets/index.html#convolutional-networks-a-brief-historical-context",
    "href": "01-neural-networks/3-conv-nets/index.html#convolutional-networks-a-brief-historical-context",
    "title": "Convolutional Neural Networks",
    "section": "Convolutional Networks: A brief historical context",
    "text": "Convolutional Networks: A brief historical context\nPerformance on ImageNet over time[^image-net-historical]\n\n%load_ext autoreload\n%autoreload 2\nimport matplotlib_inline.backend_inline\nmatplotlib_inline.backend_inline.set_matplotlib_formats('retina', 'svg', 'png')\nimport os\nos.environ[\"TRUECOLOR\"] = \"1\"\nimport matplotlib as mpl\n# mpl.rcParams['figure.dpi'] = 400\n\n\nimport logging\n\nimport ambivalent\nimport ezpz\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom rich import print\n\nsns.set_context(\"notebook\")\n# sns.set(rc={\"figure.dpi\": 400, \"savefig.dpi\": 400})\nplt.style.use(ambivalent.STYLES[\"ambivalent\"])\nplt.rcParams[\"figure.figsize\"] = [6.4, 4.8]\nplt.rcParams[\"figure.facecolor\"] = \"none\"\n\n[2025-08-04 12:29:17,617339][I][ezpz/__init__:265:ezpz] Setting logging level to 'INFO' on 'RANK == 0'\n\n\n\n[2025-08-04 12:29:17,619494][I][ezpz/__init__:266:ezpz] Setting logging level to 'CRITICAL' on all others 'RANK != 0'\n\n\n\n\n# Data\ndata = {2010: 28, 2011: 26, 2012: 16, 2013: 12, 2014: 7, 2015: 3, 2016: 2.3, 2017: 2.1}\nhuman_error_rate = 5\nplt.bar(list(data.keys()), list(data.values()), color=\"blue\")\nplt.axhline(y=human_error_rate, color=\"red\", linestyle=\"--\", label=\"Human error rate\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"ImageNet Visual Recognition Error Rate (%)\")\nplt.title(\"ImageNet Error Rates Over Time\")\nplt.legend()\nplt.show()",
    "crumbs": [
      "[01] Neural Networks",
      "[3] Conv. Nets"
    ]
  },
  {
    "objectID": "01-neural-networks/3-conv-nets/index.html#convolutional-building-blocks",
    "href": "01-neural-networks/3-conv-nets/index.html#convolutional-building-blocks",
    "title": "Convolutional Neural Networks",
    "section": "Convolutional Building Blocks",
    "text": "Convolutional Building Blocks\n\nimport torch\nimport torchvision\n\nWe‚Äôre going to go through some examples of building blocks for convolutional networks. To help illustate some of these, let‚Äôs use an image for examples:\n\nfrom PIL import Image\n\n# wget line useful in Google Colab\n#! wget https://raw.githubusercontent.com/argonne-lcf/ai-science-training-series/main/03_advanced_neural_networks/ALCF-Staff.jpg\nalcf_image = Image.open(\"ALCF-Staff.jpg\")\n\n\nfrom matplotlib import pyplot as plt\n\nfx, fy = plt.rcParamsDefault[\"figure.figsize\"]\nfigure = plt.figure(figsize=(1.5 * fx, 1.5 * fy))\n_ = plt.imshow(alcf_image)\n\n\n\n\n\n\n\n\n\nConvolutions\n\n\\begin{equation}\nG\\left[m, n\\right] = \\left(f \\star h\\right)\\left[m, n\\right] = \\sum_{j} \\sum_{k} h\\left[j, k\\right] f\\left[m - j, n - k\\right]\n\\end{equation}\n\nConvolutions are a restriction of - and a specialization of - dense linear layers. A convolution of an image produces another image, and each output pixel is a function of only it‚Äôs local neighborhood of points. This is called an inductive bias and is a big reason why convolutions work for image data: neighboring pixels are correlated and you can operate on just those pixels at a time.\nG\\left[m, n\\right] = \\left(f \\star h\\right)\\left[m, n\\right] = \\sum_{j} \\sum_{k} h\\left[j, k\\right] f\\left[m - j, n - k\\right]\nSee examples of convolutions here\n\n\n\nimage.png\n\n\n\n# Let's apply a convolution to the ALCF Staff photo:\nalcf_tensor = torchvision.transforms.ToTensor()(alcf_image)\n\n# Reshape the tensor to have a batch size of 1:\nalcf_tensor = alcf_tensor.reshape((1,) + alcf_tensor.shape)\n\n# Create a random convolution:\n# shape is: (channels_in, channels_out, kernel_x, kernel_y)\nconv_random = torch.rand((3, 3, 15, 15))\n\nalcf_rand = torch.nn.functional.conv2d(alcf_tensor, conv_random)\nalcf_rand = (1.0 / alcf_rand.max()) * alcf_rand\nprint(alcf_rand.shape)\nalcf_rand = alcf_rand.reshape(alcf_rand.shape[1:])\n\nprint(alcf_tensor.shape)\n\nrand_image = alcf_rand.permute((1, 2, 0)).cpu()\nfx, fy = plt.rcParamsDefault[\"figure.figsize\"]\nfigure = plt.figure(figsize=(1.5 * fx, 1.5 * fy))\n_ = plt.imshow(rand_image)\n\ntorch.Size([1, 3, 1111, 1986])\n\n\n\ntorch.Size([1, 3, 1125, 2000])\n\n\n\n\n\n\n\n\n\n\n\n\nNormalization\nNormalization is the act of transforming the mean and moment of your data to standard values (usually 0.0 and 1.0). It‚Äôs particularly useful in machine learning since it stabilizes training, and allows higher learning rates.\n\n\n\n\n\n\nBatch Norm\n\n\n\n\nFigure¬†1: Reference: Normalizations\n\n\n\n\n\n\n\n\n\nBatch Normalization accelerates training\n\n\n\n\nFigure¬†2: Reference: Batch Norm\n\n\n\n\n# Let's apply a normalization to the ALCF Staff photo:\nalcf_tensor = torchvision.transforms.ToTensor()(alcf_image)\n# Reshape the tensor to have a batch size of 1:\nalcf_tensor = alcf_tensor.reshape((1,) + alcf_tensor.shape)\nalcf_rand = torch.nn.functional.normalize(alcf_tensor)\nalcf_rand = alcf_rand.reshape(alcf_rand.shape[1:])\nprint(alcf_tensor.shape)\nrand_image = alcf_rand.permute((1, 2, 0)).cpu()\nfx, fy = plt.rcParamsDefault[\"figure.figsize\"]\nfigure = plt.figure(figsize=(1.5 * fx, 1.5 * fy))\n_ = plt.imshow(rand_image)\n\ntorch.Size([1, 3, 1125, 2000])\n\n\n\n\n\n\n\n\n\n\n\n\nDownsampling (And upsampling)\nDownsampling is a critical component of convolutional and many vision models. Because of the local-only nature of convolutional filters, learning large-range features can be too slow for convergence. Downsampling of layers can bring information from far away closer, effectively changing what it means to be ‚Äúlocal‚Äù as the input to a convolution.\n\n\n\n\n\n\nConvolutional Pooling\n\n\n\n\nFigure¬†3: Reference\n\n\n\n\n# Let's apply a normalization to the ALCF Staff photo:\nalcf_tensor = torchvision.transforms.ToTensor()(alcf_image)\n# Reshape the tensor to have a batch size of 1:\nalcf_tensor = alcf_tensor.reshape((1,) + alcf_tensor.shape)\nalcf_rand = torch.nn.functional.max_pool2d(alcf_tensor, 2)\nalcf_rand = alcf_rand.reshape(alcf_rand.shape[1:])\nprint(alcf_tensor.shape)\nrand_image = alcf_rand.permute((1, 2, 0)).cpu()\nfx, fy = plt.rcParamsDefault[\"figure.figsize\"]\nfigure = plt.figure(figsize=(1.5 * fx, 1.5 * fy))\n_ = plt.imshow(rand_image)\n\ntorch.Size([1, 3, 1125, 2000])\n\n\n\n\n\n\n\n\n\n\n\n\nResidual Connections\nOne issue, quickly encountered when making convolutional networks deeper and deeper, is the ‚ÄúVanishing Gradients‚Äù problem. As layers were stacked on top of each other, the size of updates dimished at the earlier layers of a convolutional network. The paper ‚ÄúDeep Residual Learning for Image Recognition‚Äù solved this by introduction ‚Äúresidual connections‚Äù as skip layers.\nReference: Deep Residual Learning for Image Recognition\n\n\n\n\n\n\nFigure¬†4: Residual Layer\n\n\n\nCompare the performance of the models before and after the introduction of these layers:\n\n\n\n\n\n\nFigure¬†5\n\n\n\nIf you have time to read only one paper on computer vision, make it this one! Resnet was the first model to beat human accuracy on ImageNet and is one of the most impactful papers in AI ever published.",
    "crumbs": [
      "[01] Neural Networks",
      "[3] Conv. Nets"
    ]
  },
  {
    "objectID": "01-neural-networks/3-conv-nets/index.html#building-a-convnet",
    "href": "01-neural-networks/3-conv-nets/index.html#building-a-convnet",
    "title": "Convolutional Neural Networks",
    "section": "Building a ConvNet",
    "text": "Building a ConvNet\nIn this section we‚Äôll build and apply a conv net to the mnist dataset. The layers here are loosely based off of the ConvNext architecture. Why? Because we‚Äôre getting into LLM‚Äôs soon, and this ConvNet uses LLM features. ConvNext is an update to the ResNet architecture that outperforms it.\nConvNext\nThe dataset here is CIFAR-10 - slightly harder than MNIST but still relatively easy and computationally tractable.\n\nbatch_size = 16\nfrom torchvision import transforms\n\ntransform = transforms.Compose(\n    [transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))],\n)\ntraining_data = torchvision.datasets.CIFAR10(\n    root=\"data\",\n    download=True,\n    train=True,\n    transform=transform,\n)\n\ntest_data = torchvision.datasets.CIFAR10(\n    root=\"data\",\n    download=True,\n    train=False,\n    transform=transform,\n)\n\ntraining_data, validation_data = torch.utils.data.random_split(\n    training_data, [0.8, 0.2], generator=torch.Generator().manual_seed(55)\n)\n\n# The dataloader makes our dataset iterable\ntrain_dataloader = torch.utils.data.DataLoader(\n    training_data,\n    batch_size=batch_size,\n    pin_memory=True,\n    shuffle=True,\n    num_workers=0,\n)\nval_dataloader = torch.utils.data.DataLoader(\n    validation_data,\n    batch_size=batch_size,\n    pin_memory=True,\n    shuffle=False,\n    num_workers=0,\n)\nclasses = (\n    \"plane\",\n    \"car\",\n    \"bird\",\n    \"cat\",\n    \"deer\",\n    \"dog\",\n    \"frog\",\n    \"horse\",\n    \"ship\",\n    \"truck\",\n)\n\n\nbatch, (X, Y) = next(enumerate(train_dataloader))\nplt.imshow(X[0].cpu().permute((1, 2, 0)))\nplt.show()\n\n[2025-08-04 12:29:50,397009][W][matplotlib/image:661] Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-0.9764706..0.96862745].\n\n\n\n\n\n\n\n\n\n\n\nimport numpy as np\n\n\ndef imshow(img):\n    img = img / 2 + 0.5  # unnormalize\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()\n\n\n# get some random training images\nimages, labels = next(iter(train_dataloader))\n\nfx, fy = plt.rcParamsDefault[\"figure.figsize\"]\nfig = plt.figure(figsize=(2 * fx, 4 * fy))\n# show images\nimshow(torchvision.utils.make_grid(images))\n# print labels\nprint(\"\\n\" + \" \".join(f\"{classes[labels[j]]:5s}\" for j in range(batch_size)))\n\n\n\n\n\n\n\n\ndog   deer  cat   truck car   horse plane dog   car   bird  bird  frog  deer  bird  car   plane\n\n\n\nThis code below is important as our models get bigger: this is wrapping the pytorch data loaders to put the data onto the GPU!\n\ndev = torch.device(\"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n\n\ndef preprocess(x, y):\n    # CIFAR-10 is *color* images so 3 layers!\n    x = x.view(-1, 3, 32, 32)\n    #  y = y.to(dtype)\n    return (x.to(dev), y.to(dev))\n\n\nclass WrappedDataLoader:\n    def __init__(self, dl, func):\n        self.dl = dl\n        self.func = func\n\n    def __len__(self):\n        return len(self.dl)\n\n    def __iter__(self):\n        for b in self.dl:\n            yield (self.func(*b))\n\n\ntrain_dataloader = WrappedDataLoader(train_dataloader, preprocess)\nval_dataloader = WrappedDataLoader(val_dataloader, preprocess)\n\n\nfrom typing import Optional\n\nfrom torch import nn\n\n\nclass Downsampler(nn.Module):\n    def __init__(self, in_channels, out_channels, shape, stride=2):\n        super(Downsampler, self).__init__()\n        self.norm = nn.LayerNorm([in_channels, *shape])\n        self.downsample = nn.Conv2d(\n            in_channels=in_channels,\n            out_channels=out_channels,\n            kernel_size=stride,\n            stride=stride,\n        )\n\n    def forward(self, inputs):\n        return self.downsample(self.norm(inputs))\n\n\nclass ConvNextBlock(nn.Module):\n    \"\"\"This block of operations is loosely based on this paper:\"\"\"\n\n    def __init__(\n        self,\n        in_channels,\n        shape,\n        kernel_size: Optional[None] = None,\n    ):\n        super(ConvNextBlock, self).__init__()\n        # Depthwise, seperable convolution with a large number of output filters:\n        kernel_size = [7, 7] if kernel_size is None else kernel_size\n        self.conv1 = nn.Conv2d(\n            in_channels=in_channels,\n            out_channels=in_channels,\n            groups=in_channels,\n            kernel_size=kernel_size,\n            padding=\"same\",\n        )\n        self.norm = nn.LayerNorm([in_channels, *shape])\n        # Two more convolutions:\n        self.conv2 = nn.Conv2d(\n            in_channels=in_channels, out_channels=4 * in_channels, kernel_size=1\n        )\n        self.conv3 = nn.Conv2d(\n            in_channels=4 * in_channels, out_channels=in_channels, kernel_size=1\n        )\n\n    def forward(self, inputs):\n        x = self.conv1(inputs)\n        # The normalization layer:\n        x = self.norm(x)\n        x = self.conv2(x)\n        # The non-linear activation layer:\n        x = torch.nn.functional.gelu(x)\n        x = self.conv3(x)\n        # This makes it a residual network:\n        return x + inputs\n\n\nclass Classifier(nn.Module):\n    def __init__(\n        self,\n        n_initial_filters,\n        n_stages,\n        blocks_per_stage,\n        kernel_size: Optional[None] = None,\n    ):\n        super(Classifier, self).__init__()\n        # This is a downsampling convolution that will produce patches of output.\n        # This is similar to what vision transformers do to tokenize the images.\n        self.stem = nn.Conv2d(\n            in_channels=3, out_channels=n_initial_filters, kernel_size=1, stride=1\n        )\n        current_shape = [32, 32]\n        self.norm1 = nn.LayerNorm([n_initial_filters, *current_shape])\n        # self.norm1 = WrappedLayerNorm()\n        current_n_filters = n_initial_filters\n        self.layers = nn.Sequential()\n        for i, n_blocks in enumerate(range(n_stages)):\n            # Add a convnext block series:\n            for _ in range(blocks_per_stage):\n                self.layers.append(\n                    ConvNextBlock(\n                        in_channels=current_n_filters,\n                        shape=current_shape,\n                        kernel_size=kernel_size,\n                    )\n                )\n            # Add a downsampling layer:\n            if i != n_stages - 1:\n                # Skip downsampling if it's the last layer!\n                self.layers.append(\n                    Downsampler(\n                        in_channels=current_n_filters,\n                        out_channels=2 * current_n_filters,\n                        shape=current_shape,\n                    )\n                )\n                # Double the number of filters:\n                current_n_filters = 2 * current_n_filters\n                # Cut the shape in half:\n                current_shape = [cs // 2 for cs in current_shape]\n        self.head = nn.Sequential(\n            nn.Flatten(),\n            nn.LayerNorm(current_n_filters),\n            nn.Linear(current_n_filters, 10),\n        )\n        # self.norm2 = nn.InstanceNorm2d(current_n_filters)\n        # # This brings it down to one channel / class\n        # self.bottleneck = nn.Conv2d(in_channels=current_n_filters, out_channels=10,\n        #                                   kernel_size=1, stride=1)\n\n    def forward(self, x):\n        x = self.stem(x)\n        # Apply a normalization after the initial patching:\n        x = self.norm1(x)\n        # Apply the main chunk of the network:\n        x = self.layers(x)\n        # Normalize and readout:\n        x = nn.functional.avg_pool2d(x, x.shape[2:])\n        x = self.head(x)\n        return x\n\n        # x = self.norm2(x)\n        # x = self.bottleneck(x)\n\n        # # Average pooling of the remaining spatial dimensions (and reshape) makes this label-like:\n        # return nn.functional.avg_pool2d(x, kernel_size=x.shape[-2:]).reshape((-1,10))\n\n\nfrom torchinfo import summary\n\nmodel = Classifier(32, 4, 2, kernel_size=(2, 2))\nmodel.to(device=dev)\nprint(f\"\\n{summary(model, input_size=(batch_size, 3, 32, 32))}\")\n\n==========================================================================================\nLayer (type:depth-idx)                   Output Shape              Param #\n==========================================================================================\nClassifier                               [16, 10]                  --\n‚îú‚îÄConv2d: 1-1                            [16, 32, 32, 32]          128\n‚îú‚îÄLayerNorm: 1-2                         [16, 32, 32, 32]          65,536\n‚îú‚îÄSequential: 1-3                        [16, 256, 4, 4]           --\n‚îÇ    ‚îî‚îÄConvNextBlock: 2-1                [16, 32, 32, 32]          --\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-1                  [16, 32, 32, 32]          160\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-2               [16, 32, 32, 32]          65,536\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-3                  [16, 128, 32, 32]         4,224\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-4                  [16, 32, 32, 32]          4,128\n‚îÇ    ‚îî‚îÄConvNextBlock: 2-2                [16, 32, 32, 32]          --\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-5                  [16, 32, 32, 32]          160\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-6               [16, 32, 32, 32]          65,536\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-7                  [16, 128, 32, 32]         4,224\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-8                  [16, 32, 32, 32]          4,128\n‚îÇ    ‚îî‚îÄDownsampler: 2-3                  [16, 64, 16, 16]          --\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-9               [16, 32, 32, 32]          65,536\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-10                 [16, 64, 16, 16]          8,256\n‚îÇ    ‚îî‚îÄConvNextBlock: 2-4                [16, 64, 16, 16]          --\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-11                 [16, 64, 16, 16]          320\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-12              [16, 64, 16, 16]          32,768\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-13                 [16, 256, 16, 16]         16,640\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-14                 [16, 64, 16, 16]          16,448\n‚îÇ    ‚îî‚îÄConvNextBlock: 2-5                [16, 64, 16, 16]          --\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-15                 [16, 64, 16, 16]          320\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-16              [16, 64, 16, 16]          32,768\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-17                 [16, 256, 16, 16]         16,640\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-18                 [16, 64, 16, 16]          16,448\n‚îÇ    ‚îî‚îÄDownsampler: 2-6                  [16, 128, 8, 8]           --\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-19              [16, 64, 16, 16]          32,768\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-20                 [16, 128, 8, 8]           32,896\n‚îÇ    ‚îî‚îÄConvNextBlock: 2-7                [16, 128, 8, 8]           --\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-21                 [16, 128, 8, 8]           640\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-22              [16, 128, 8, 8]           16,384\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-23                 [16, 512, 8, 8]           66,048\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-24                 [16, 128, 8, 8]           65,664\n‚îÇ    ‚îî‚îÄConvNextBlock: 2-8                [16, 128, 8, 8]           --\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-25                 [16, 128, 8, 8]           640\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-26              [16, 128, 8, 8]           16,384\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-27                 [16, 512, 8, 8]           66,048\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-28                 [16, 128, 8, 8]           65,664\n‚îÇ    ‚îî‚îÄDownsampler: 2-9                  [16, 256, 4, 4]           --\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-29              [16, 128, 8, 8]           16,384\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-30                 [16, 256, 4, 4]           131,328\n‚îÇ    ‚îî‚îÄConvNextBlock: 2-10               [16, 256, 4, 4]           --\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-31                 [16, 256, 4, 4]           1,280\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-32              [16, 256, 4, 4]           8,192\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-33                 [16, 1024, 4, 4]          263,168\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-34                 [16, 256, 4, 4]           262,400\n‚îÇ    ‚îî‚îÄConvNextBlock: 2-11               [16, 256, 4, 4]           --\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-35                 [16, 256, 4, 4]           1,280\n‚îÇ    ‚îÇ    ‚îî‚îÄLayerNorm: 3-36              [16, 256, 4, 4]           8,192\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-37                 [16, 1024, 4, 4]          263,168\n‚îÇ    ‚îÇ    ‚îî‚îÄConv2d: 3-38                 [16, 256, 4, 4]           262,400\n‚îú‚îÄSequential: 1-4                        [16, 10]                  --\n‚îÇ    ‚îî‚îÄFlatten: 2-12                     [16, 256]                 --\n‚îÇ    ‚îî‚îÄLayerNorm: 2-13                   [16, 256]                 512\n‚îÇ    ‚îî‚îÄLinear: 2-14                      [16, 10]                  2,570\n==========================================================================================\nTotal params: 2,003,914\nTrainable params: 2,003,914\nNon-trainable params: 0\nTotal mult-adds (Units.GIGABYTES): 1.20\n==========================================================================================\nInput size (MB): 0.20\nForward/backward pass size (MB): 129.53\nParams size (MB): 8.02\nEstimated Total Size (MB): 137.75\n==========================================================================================\n\n\n\n\ndef evaluate(dataloader, model, loss_fn, val_bar):\n    # Set the model to evaluation mode - some NN pieces behave differently during training\n    # Unnecessary in this situation but added for best practices\n    model.eval()\n    size = len(dataloader)\n    num_batches = len(dataloader)\n    loss, correct = 0, 0\n\n    # We can save computation and memory by not calculating gradients here - we aren't optimizing\n    with torch.no_grad():\n        # loop over all of the batches\n        for x, y in dataloader:\n            t0 = time.perf_counter()\n            pred = model(x.to(DTYPE))\n            t1 = time.perf_counter()\n            loss += loss_fn(pred, y).item()\n            # how many are correct in this batch? Tracking for accuracy\n            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n            t3 = time.perf_counter()\n            val_bar.update()\n\n    loss /= num_batches\n    correct /= size * batch_size\n\n    accuracy = 100 * correct\n    return accuracy, loss\n\n\nimport time\n\nfrom torch import nn\n\nDTYPE = torch.bfloat16\nDEVICE = ezpz.get_torch_device_type()\n\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.AdamW(model.parameters(), lr=2.5e-4)\n\n\ndef eval_step(x, y):\n    with torch.no_grad():\n        t0 = time.perf_counter()\n        pred = model(x.to(DTYPE))\n        t1 = time.perf_counter()\n        loss = loss_fn(pred, y).item()\n        correct = (pred.argmax(1) == y).type(torch.float).sum().item()\n        t2 = time.perf_counter()\n    return {\n        \"loss\": loss,\n        \"acc\": correct / y.shape[0],\n        \"dtf\": t1 - t0,\n        \"dtm\": t2 - t1,\n    }\n\n\ndef train_step(x, y):\n    t0 = time.perf_counter()\n    # Forward pass\n    with torch.autocast(dtype=DTYPE, device_type=DEVICE):\n        pred = model(x.to(DTYPE))\n    loss = loss_fn(pred, y)\n    t1 = time.perf_counter()\n\n    # Backward pass\n    loss.backward()\n    t2 = time.perf_counter()\n\n    # Update weights\n    optimizer.step()\n    t3 = time.perf_counter()\n\n    # Reset gradients\n    optimizer.zero_grad()\n    t4 = time.perf_counter()\n\n    return loss.item(), {\n        \"dtf\": t1 - t0,\n        \"dtb\": t2 - t1,\n        \"dtu\": t3 - t2,\n        \"dtz\": t4 - t3,\n    }\n\n\ndef train_one_epoch(\n    dataloader, model, loss_fn, optimizer, progress_bar, history: ezpz.History | None\n):\n    model.train()\n    t0 = time.perf_counter()\n    batch_metrics = {}\n    for batch, (X, y) in enumerate(dataloader):\n        loss, metrics = train_step(x, y)\n        progress_bar.update()\n        metrics = {\"bidx\": batch, \"loss\": loss, **metrics}\n        batch_metrics[batch] = metrics\n        if history is not None:\n            print(history.update(metrics))\n    t1 = time.perf_counter()\n    batch_metrics |= {\"dt_batch\": t1 - t0}\n    # if history is not None:\n    #     _ = history.update({\"dt_batch\": t1 - t0})\n    return batch_metrics\n\n\ndef train_one_epoch1(\n    dataloader, model, loss_fn, optimizer, progress_bar, history: ezpz.History | None\n):\n    model.train()\n    t0 = time.perf_counter()\n    batch_metrics = {}\n    for batch, (X, y) in enumerate(dataloader):\n        _t0 = time.perf_counter()\n        # forward pass\n        pred = model(X)\n        _t1 = time.perf_counter()\n        loss = loss_fn(pred, y)\n        _t2 = time.perf_counter()\n        # backward pass calculates gradients\n        loss.backward()\n        _t3 = time.perf_counter()\n        # take one step with these gradients\n        optimizer.step()\n        _t4 = time.perf_counter()\n        # resets the gradients\n        optimizer.zero_grad()\n        _t5 = time.perf_counter()\n        progress_bar.update()\n        metrics = {\n            \"bidx\": batch,\n            \"loss\": loss.item(),\n            \"dtf\": (_t1 - _t0),\n            \"dtl\": (_t2 - _t1),\n            \"dtb\": (_t3 - _t2),\n            \"dto\": (_t4 - _t3),\n            \"dtz\": (_t5 - _t4),\n        }\n        batch_metrics[batch] = metrics\n        if history is not None:\n            summary = history.update(metrics)\n    t1 = time.perf_counter()\n    batch_metrics |= {\n        \"dt_batch\": t1 - t0,\n    }\n    return batch_metrics\n\n\n_ = model.to(DTYPE)\n\n\n_x, _y = next(iter(val_dataloader))\nprint(f\"{eval_step(_x.to(DTYPE), _y)}\")\n\n{'loss': 2.40625, 'acc': 0.125, 'dtf': 0.1633995003066957, 'dtm': 0.0010725418105721474}\n\n\n\n\nprint(f\"{_x.shape=}, {_y.shape=}\")\n_pred = model(_x.to(DTYPE))\n_loss = loss_fn(_pred, _y).item()\n_correct = (_pred.argmax(1) == _y).type(torch.float).sum().item()\nprint(\n    {\n        # \"pred\": _pred,\n        \"loss\": _loss,\n        \"pred.argmax(1)\": _pred.argmax(1),\n        \"pred.argmax(1) == y\": (_pred.argmax(1) == _y),\n        \"correct\": _correct,\n        \"acc\": _correct / _y.shape[0],\n    }\n)\n\n_x.shape=torch.Size([16, 3, 32, 32]), _y.shape=torch.Size([16])\n\n\n\n{\n    'loss': 2.40625,\n    'pred.argmax(1)': tensor([2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 4, 2, 2]),\n    'pred.argmax(1) == y': tensor([False, False, False, False,  True, False,  True, False, False, False,\n        False, False, False, False, False, False]),\n    'correct': 2.0,\n    'acc': 0.125\n}",
    "crumbs": [
      "[01] Neural Networks",
      "[3] Conv. Nets"
    ]
  },
  {
    "objectID": "01-neural-networks/3-conv-nets/index.html#run-training",
    "href": "01-neural-networks/3-conv-nets/index.html#run-training",
    "title": "Convolutional Neural Networks",
    "section": "Run Training",
    "text": "Run Training\n\nimport time\n\nimport ezpz\nfrom tqdm.auto import tqdm, trange\n\nPRINT_EVERY = 50\nTRAIN_ITERS = 500\n\nhistory = ezpz.History()\nmodel.train()\nfor i in trange(TRAIN_ITERS, desc=\"Training\"):\n    t0 = time.perf_counter()\n    x, y = next(iter(train_dataloader))\n    t1 = time.perf_counter()\n    loss, dt = train_step(x, y)\n    summary = history.update(\n        {\n            \"train/iter\": i,\n            \"train/loss\": loss,\n            \"train/dtd\": t1 - t0,\n            **{f\"train/{k}\": v for k, v in dt.items()},\n        },\n    ).replace(\"/\", \".\")\n    if i % PRINT_EVERY == 0:\n        print(summary)\n\n\n\n\ntrain.iter=0 train.loss=2.515625 train.dtd=0.010065 train.dtf=0.171240 train.dtb=0.713570 train.dtu=0.013012 \ntrain.dtz=0.000208\n\n\n\ntrain.iter=50 train.loss=1.953125 train.dtd=0.002513 train.dtf=0.146031 train.dtb=0.657839 train.dtu=0.008844 \ntrain.dtz=0.000213\n\n\n\ntrain.iter=100 train.loss=2.031250 train.dtd=0.002231 train.dtf=0.140829 train.dtb=0.657641 train.dtu=0.008523 \ntrain.dtz=0.000480\n\n\n\ntrain.iter=150 train.loss=2.125000 train.dtd=0.001999 train.dtf=0.145267 train.dtb=0.679628 train.dtu=0.008671 \ntrain.dtz=0.000192\n\n\n\ntrain.iter=200 train.loss=1.890625 train.dtd=0.002067 train.dtf=0.141468 train.dtb=0.656727 train.dtu=0.008663 \ntrain.dtz=0.000650\n\n\n\ntrain.iter=250 train.loss=1.984375 train.dtd=0.002972 train.dtf=0.138405 train.dtb=0.662314 train.dtu=0.008473 \ntrain.dtz=0.000427\n\n\n\ntrain.iter=300 train.loss=2.281250 train.dtd=0.001965 train.dtf=0.149045 train.dtb=0.649204 train.dtu=0.008485 \ntrain.dtz=0.000199\n\n\n\ntrain.iter=350 train.loss=1.851562 train.dtd=0.002693 train.dtf=0.149543 train.dtb=0.677236 train.dtu=0.008860 \ntrain.dtz=0.000135\n\n\n\ntrain.iter=400 train.loss=1.812500 train.dtd=0.002285 train.dtf=0.136938 train.dtb=0.683250 train.dtu=0.008446 \ntrain.dtz=0.000188\n\n\n\ntrain.iter=450 train.loss=2.265625 train.dtd=0.002329 train.dtf=0.149435 train.dtb=0.653462 train.dtu=0.008714 \ntrain.dtz=0.000223",
    "crumbs": [
      "[01] Neural Networks",
      "[3] Conv. Nets"
    ]
  },
  {
    "objectID": "01-neural-networks/3-conv-nets/index.html#run-validation",
    "href": "01-neural-networks/3-conv-nets/index.html#run-validation",
    "title": "Convolutional Neural Networks",
    "section": "Run Validation",
    "text": "Run Validation\n\neval_history = ezpz.History()\nmodel.eval()\nPRINT_EVERY = 50\n# EVAL_ITERS = 50\n\nwith torch.no_grad():\n    for bidx, (x, y) in enumerate(tqdm(val_dataloader)):\n        t0 = time.perf_counter()\n        pred = model(x.to(DTYPE))\n        loss = loss_fn(pred, y).item()\n        correct = (pred.argmax(1) == y).to(torch.float).sum().item()\n        acc = correct / y.shape[0]\n        metrics = {\n            \"val/iter\": bidx,\n            \"val/loss\": loss,\n            \"val/acc\": acc,\n        }\n        summary = eval_history.update(metrics)\n        if bidx % PRINT_EVERY == 0:\n            print(summary)\n\n\n\n\nval/iter=0 val/loss=1.734375 val/acc=0.312500\n\n\n\nval/iter=50 val/loss=1.664062 val/acc=0.437500\n\n\n\nval/iter=100 val/loss=1.882812 val/acc=0.312500\n\n\n\nval/iter=150 val/loss=1.609375 val/acc=0.562500\n\n\n\nval/iter=200 val/loss=1.921875 val/acc=0.250000\n\n\n\nval/iter=250 val/loss=1.609375 val/acc=0.437500\n\n\n\nval/iter=300 val/loss=1.484375 val/acc=0.562500\n\n\n\nval/iter=350 val/loss=1.617188 val/acc=0.437500\n\n\n\nval/iter=400 val/loss=2.218750 val/acc=0.125000\n\n\n\nval/iter=450 val/loss=1.484375 val/acc=0.437500\n\n\n\nval/iter=500 val/loss=1.781250 val/acc=0.250000\n\n\n\nval/iter=550 val/loss=1.687500 val/acc=0.375000\n\n\n\nval/iter=600 val/loss=1.609375 val/acc=0.437500",
    "crumbs": [
      "[01] Neural Networks",
      "[3] Conv. Nets"
    ]
  },
  {
    "objectID": "01-neural-networks/3-conv-nets/index.html#plot-metrics",
    "href": "01-neural-networks/3-conv-nets/index.html#plot-metrics",
    "title": "Convolutional Neural Networks",
    "section": "Plot Metrics",
    "text": "Plot Metrics\n\nTraining Metrics\n\nezpz.plot.plot_dataset((tdset := history.get_dataset()), save_plots=False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nValidation Metrics\n\nezpz.plot.plot_dataset((edset := eval_history.get_dataset()), save_plots=False)",
    "crumbs": [
      "[01] Neural Networks",
      "[3] Conv. Nets"
    ]
  },
  {
    "objectID": "01-neural-networks/3-conv-nets/index.html#homework-1",
    "href": "01-neural-networks/3-conv-nets/index.html#homework-1",
    "title": "Convolutional Neural Networks",
    "section": "Homework 1",
    "text": "Homework 1\nIn this notebook, we‚Äôve learned about some basic convolutional networks and trained one on CIFAR-10 images. It did ‚Ä¶ OK. There is significant overfitting of this model. There are some ways to address that, but we didn‚Äôt have time to get into that in this session.\nMeanwhile, your homework (part 1) for this week is to try to train the model again but with a different architecture. Change one or more of the following: - The number of convolutions between downsampling - The number of filters in each layer - The initial ‚Äúpatchify‚Äù layer - Another hyper-parameter of your choosing\nAnd compare your final validation accuracy to the accuracy shown here. Can you beat the validation accuracy shown?\nFor full credit on the homework, you need to show (via text, or make a plot) the training and validation data sets‚Äô performance (loss and accuracy) for all the epochs you train. You also need to explain, in several sentences, what you changed in the network and why you think it makes a difference.\n\nTraining for Multiple Epochs\nepochs = 1\ntrain_history = ezpz.History()\nfor j in range(epochs):\n    with tqdm(\n        total=len(train_dataloader), position=0, leave=True, desc=f\"Train Epoch {j}\"\n    ) as train_bar:\n        bmetrics = train_one_epoch(\n            train_dataloader,\n            model,\n            loss_fn,\n            optimizer,\n            train_bar,\n            history=train_history,\n        )\n\n    # checking on the training & validation loss & accuracy\n    # for training data - only once every 5 epochs (takes a while)\n    if j % 5 == 0:\n        with tqdm(\n            total=len(train_dataloader),\n            position=0,\n            leave=True,\n            desc=f\"Validate (train) Epoch {j}\",\n        ) as train_eval:\n            acc, loss = evaluate(train_dataloader, model, loss_fn, train_eval)\n            print(f\"Epoch {j}: training loss: {loss:.3f}, accuracy: {acc:.3f}\")\n\n    with tqdm(\n        total=len(val_dataloader), position=0, leave=True, desc=f\"Validate Epoch {j}\"\n    ) as val_bar:\n        acc_val, loss_val = evaluate(val_dataloader, model, loss_fn, val_bar)\n        print(\n            f\"Epoch {j}: validation loss: {loss_val:.3f}, accuracy: {acc_val:.3f}\"\n        )",
    "crumbs": [
      "[01] Neural Networks",
      "[3] Conv. Nets"
    ]
  },
  {
    "objectID": "01-neural-networks/2-advanced/index.html",
    "href": "01-neural-networks/2-advanced/index.html",
    "title": "MNIST handwritten digits classification with CNNs",
    "section": "",
    "text": "Sam Foreman\n2025-08-06\nIn this notebook, we‚Äôll continue the MNIST problem but incorporate convolutional layers.\nFirst, we will import the required library and frameworks.\n%load_ext autoreload\n%autoreload 2\nimport matplotlib_inline.backend_inline\nmatplotlib_inline.backend_inline.set_matplotlib_formats('retina', 'svg', 'png')\nimport matplotlib.pyplot as plt\nimport ambivalent\nplt.style.use(ambivalent.STYLES['ambivalent'])\nplt.rcParams[\"figure.figsize\"] = plt.rcParamsDefault[\"figure.figsize\"]\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n%matplotlib inline\n\nimport torch\nimport torchvision\nfrom torch import nn\n\nimport numpy\nimport matplotlib.pyplot as plt\nimport time",
    "crumbs": [
      "[01] Neural Networks",
      "[2] Advanced"
    ]
  },
  {
    "objectID": "01-neural-networks/2-advanced/index.html#mnist-data-set",
    "href": "01-neural-networks/2-advanced/index.html#mnist-data-set",
    "title": "MNIST handwritten digits classification with CNNs",
    "section": "MNIST data set",
    "text": "MNIST data set\nAgain we‚Äôll load the MNIST handwritten digits data set.\n\ntraining_data = torchvision.datasets.MNIST(\n    root=\"data\", train=True, download=True, transform=torchvision.transforms.ToTensor()\n)\n\ntest_data = torchvision.datasets.MNIST(\n    root=\"data\", train=False, download=True, transform=torchvision.transforms.ToTensor()\n)\n\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 9.91M/9.91M [00:00&lt;00:00, 34.5MB/s]|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè                                                                              | 721k/9.91M [00:00&lt;00:01, 7.14MB/s] 44%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñâ                                               | 4.36M/9.91M [00:00&lt;00:00, 22.0MB/s]|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè                                                                              | 721k/9.91M [00:00&lt;00:01, 7.14MB/s]\n  0%|                                                                                             | 0.00/28.9k [00:00&lt;?, ?B/s]100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 28.9k/28.9k [00:00&lt;00:00, 1.22MB/s]  0%|                                                                                             | 0.00/28.9k [00:00&lt;?, ?B/s]\n  0%|                                                                                             | 0.00/1.65M [00:00&lt;?, ?B/s]44%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè                                               | 721k/1.65M [00:00&lt;00:00, 5.99MB/s]  0%|                                                                                             | 0.00/1.65M [00:00&lt;?, ?B/s]100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 1.65M/1.65M [00:00&lt;00:00, 11.1MB/s]  0%|                                                                                             | 0.00/1.65M [00:00&lt;?, ?B/s]44%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè                                               | 721k/1.65M [00:00&lt;00:00, 5.99MB/s]  0%|                                                                                             | 0.00/1.65M [00:00&lt;?, ?B/s]\n  0%|                                                                                             | 0.00/4.54k [00:00&lt;?, ?B/s]100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 4.54k/4.54k [00:00&lt;00:00, 5.87MB/s]  0%|                                                                                             | 0.00/4.54k [00:00&lt;?, ?B/s]\n\n\n\ntraining_data, validation_data = torch.utils.data.random_split(\n    training_data, [0.8, 0.2], generator=torch.Generator().manual_seed(55)\n)\n\nThis time we won‚Äôt flatten the images.\nThe training data input is a 3rd-order tensor of size (48000, 28, 28), i.e.¬†it consists of 48,000 images of size 28x28 pixels.\nThe labels for the training data are in a 48,000-dimensional vector containing the correct classes (‚Äú0‚Äù, ‚Äú1‚Äù, ‚Ä¶, ‚Äú9‚Äù) for each training sample.",
    "crumbs": [
      "[01] Neural Networks",
      "[2] Advanced"
    ]
  },
  {
    "objectID": "01-neural-networks/2-advanced/index.html#convolutional-neural-network-cnn",
    "href": "01-neural-networks/2-advanced/index.html#convolutional-neural-network-cnn",
    "title": "MNIST handwritten digits classification with CNNs",
    "section": "Convolutional neural network (CNN)",
    "text": "Convolutional neural network (CNN)\nCNN is a type of deep learning model for processing data that has a grid pattern, such as images. They are very similar to any other neural network being built with neurons that have learnable weights and biases. Each neuron receives a input, then a dot product with the weights and bias followed with some non-linear operation. The network still represents a function mapping from raw input (pixels in case of images) to a class score. All is good for small resolution images. What happens when the image is 256x256x3 ? The very first hiddden layer in a fully connected neural network will have 196K parameters! So fully connected neural networks do not scale well for images.\nA typical convolutional neural network architecture consists of : * Convolutional Layer, * Pooling Layer, and * Fully-Connected Layer\n\n\n\n\n\n\nFigure¬†1: Convolutional Layer. Image credit: Sumit Saha\n\n\n\nLet‚Äôs use a small model that includes convolutional layers\n\nThe Conv2d layers operate on 2D matrices so we input the digit images directly to the model.\n\nThe two Conv2d layers below learn 32 and 64 filters respectively.\nThey are learning filters for 3x3 windows.\n\nThe MaxPooling 2D layer reduces the spatial dimensions, that is, makes the image smaller.\n\nIt downsamples by taking the maximum value in the window\nThe pool size of 2 below means the windows are 2x2.\nHelps in extracting important features and reduce computation\n\nThe Flatten layer flattens the 2D matrices into vectors, so we can then switch to Dense layers as in the MLP model.\n\n\nclass MNISTClassifier(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        self.conv_1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3)\n        self.conv_2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3)\n        self.drop_3 = nn.Dropout(p=0.25)\n        self.dense_4 = nn.Linear(in_features=9216, out_features=128)\n        self.drop_5 = nn.Dropout(p=0.5)\n        self.dense_6 = nn.Linear(in_features=128, out_features=10)\n\n    def forward(self, inputs):\n        x = self.conv_1(inputs)\n        x = nn.functional.relu(x)\n\n        x = self.conv_2(x)\n        x = nn.functional.relu(x)\n        x = nn.functional.max_pool2d(x, kernel_size=2)\n\n        x = self.drop_3(x)\n        x = torch.flatten(x, start_dim=1)\n\n        x = self.dense_4(x)\n        x = nn.functional.relu(x)\n\n        x = self.drop_5(x)\n\n        x = self.dense_6(x)\n        x = nn.functional.softmax(x, dim=1)\n\n        return x\n\n\nConvolutional Basics\nA convolution layer is formed by convolving a filter (usually 5x5 or 3x3) repeatedly over the input image to create a feature map, meaning the filter slides over spatially from the top left corner of the image to the bottom right corner of the image. Filters learn different features and detect the patterns in an image.\n\n\n\n\n\n\nFigure¬†2: Image credit: Jason Brownlee\n\n\n\n\n\n\n\n\n\nFigure¬†3\n\n\n\n\n\nPadding\nAdds zeros along the corners of the image to preserve the dimensionality of the input.\n\n\n\n\n\n\nFigure¬†4\n\n\n\n\n\nWhat is the output size ?\n(\\mathrm{N} - \\mathrm{F} + 2\\mathrm{P}) / \\mathrm{S} + 1\n\nwhere\n\nN = dimension of the input image. (ex, for an image of 28x28x1, N=28)\nF = dimension of the filter (F=3 for a filter of 3x3)\nS = Stride value\nP = Size of the zero padding used\n\n\n\n\nMax Pooling\nPooling reduces the dimensionality of the images, with max-pooling being one of the most widely used.\n\n\n\n\n\n\nFigure¬†5\n\n\n\n\n\nMultiple Channels\nUsually colored images have multiple channels with RGB values. What happens to the filter sizes and activation map dimensions in those cases?\n\n\n\n\n\n\nFigure¬†6\n\n\n\n\n\nVisualizing learned features from CNNs\nThe filters from the initial hidden layers tend to learn low level features like edges, corners, shapes, colors etc. Filters from the deeper layers tend to learn high-level features detecting patterns like wheel, car, etc.\n\n\n\n\n\n\nFigure¬†7\n\n\n\nNow we can train the network, similarly to the previous notebook.\n\ndef train_one_epoch(dataloader, model, loss_fn, optimizer):\n    model.train()\n    for batch, (X, y) in enumerate(dataloader):\n        # forward pass\n        pred = model(X)\n        loss = loss_fn(pred, y)\n\n        # backward pass calculates gradients\n        loss.backward()\n\n        # take one step with these gradients\n        optimizer.step()\n\n        # resets the gradients\n        optimizer.zero_grad()\n\n\ndef evaluate(dataloader, model, loss_fn):\n    # Set the model to evaluation mode - some NN pieces behave differently during training\n    model.eval()\n    size = len(dataloader.dataset)\n    num_batches = len(dataloader)\n    loss, correct = 0, 0\n\n    # We can save computation and memory by not calculating gradients here - we aren't optimizing\n    with torch.no_grad():\n        # loop over all of the batches\n        for X, y in dataloader:\n            pred = model(X)\n            loss += loss_fn(pred, y).item()\n            # how many are correct in this batch? Tracking for accuracy\n            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n\n    loss /= num_batches\n    correct /= size\n\n    accuracy = 100 * correct\n    return accuracy, loss\n\n\ndef train_network(batch_size, epochs, lr):\n    cnn_model = MNISTClassifier()\n    train_dataloader = torch.utils.data.DataLoader(training_data, batch_size=batch_size)\n    val_dataloader = torch.utils.data.DataLoader(validation_data, batch_size=batch_size)\n    optimizer = torch.optim.Adam(cnn_model.parameters(), lr=lr)\n    loss_fn = nn.CrossEntropyLoss()\n\n    history = numpy.zeros((epochs, 4))\n\n    for j in range(epochs):\n        train_one_epoch(train_dataloader, cnn_model, loss_fn, optimizer)\n\n        # checking on the training & val loss and accuracy once per epoch\n        acc_train, loss_train = evaluate(train_dataloader, cnn_model, loss_fn)\n        acc_val, loss_val = evaluate(val_dataloader, cnn_model, loss_fn)\n        print(f\"Epoch {j}: val. loss: {loss_val:.4f}, val. accuracy: {acc_val:.4f}\")\n        history[j, :] = [acc_train, loss_train, acc_val, loss_val]\n\n    return history, cnn_model\n\n\n%%time\n\nbatch_size = 512\nepochs = 3\nlr = .01\nhistory, cnn_model = train_network(batch_size, epochs, lr)\n\nEpoch 0: val. loss: 1.4972, val. accuracy: 96.3750\nEpoch 1: val. loss: 1.4928, val. accuracy: 96.8667\n2: val. loss: 1.4946, val. accuracy: 96.6833\n\nCPU times: user 4min 21s, sys: 57.4 s, total: 5min 19s\nWall time: 2min 3s\n\n\nThe model should be better than the non-convolutional model even if you‚Äôre only patient enough for three epochs.\n\nplt.figure(figsize=(5, 3))\nplt.plot(range(epochs), history[:, 1], label=\"training loss\")\nplt.plot(range(epochs), history[:, 3], label=\"val. loss\")\nplt.title(\"loss\")\nplt.xlabel(\"epochs\")\nplt.ylabel(\"loss\")\nplt.legend()\n\nplt.figure(figsize=(5, 3))\nplt.plot(range(epochs), history[:, 0], label=\"training accuracy\")\nplt.plot(range(epochs), history[:, 2], label=\"val. accuracy\")\nplt.title(\"accuracy\")\nplt.xlabel(\"epochs\")\nplt.ylabel(\"accuracy\")\n\nText(0, 0.5, 'accuracy')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can compare your result with the state-of-the art here. Even more results can be found here.",
    "crumbs": [
      "[01] Neural Networks",
      "[2] Advanced"
    ]
  },
  {
    "objectID": "01-neural-networks/2-advanced/index.html#advanced-networks",
    "href": "01-neural-networks/2-advanced/index.html#advanced-networks",
    "title": "MNIST handwritten digits classification with CNNs",
    "section": "Advanced networks",
    "text": "Advanced networks\n\nResNet\nDeeper and deeper networks that stack convolutions end up with smaller and smaller gradients in early layers. ResNets use additional skip connections where the output layer is f(x) + x instead of f(w x + b) or f(x). This avoids vanishing gradient problem and results in smoother loss functions. Refer to the ResNet paper and ResNet loss visualization paper for more information.\n\n\n\n\n\n\nFigure¬†8: ResNet. Image credit: ResNet paper\n\n\n\n\n\nU-Nets\nU-NET is a convolution based neural network architecture orginally developed for biomedical image segmentation tasks. It has an encoder-decoder architecture with skip connections in between them.\n\n\n\n\n\n\nFigure¬†9: Image credit: ResNet paper\n\n\n\n\n\nViTs\nYou‚Äôll learn about language models today, which use ‚Äútransformer‚Äù models. There has been some success applying transformers to images (‚Äúvision transformers‚Äù). To make images sequential, they are split into patches and flattened. Then apply linear embeddings and positional embeddings and feed it to a encoder-based transformer model.\n\n\n\n\n\n\nFigure¬†10: Image credit: Google Blog",
    "crumbs": [
      "[01] Neural Networks",
      "[2] Advanced"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html",
    "href": "02-llms/00-intro-to-llms/index.html",
    "title": "Language models (LMs)",
    "section": "",
    "text": "Inspiration from the blog posts ‚ÄúThe Illustrated Transformer‚Äù and ‚ÄúThe Illustrated GPT2‚Äù by Jay Alammar, highly recommended reading.\nAlthough the name ‚Äúlanguage models‚Äù is derived from Natural Language Processing, the models used in these approaches can be applied to diverse scientific applications as illustrated below.\nThis session is dedicated to setting out the basics of sequential data modeling, and introducing a few key elements required for DL approaches to such modeling‚Äîprincipally Transformers.",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#overview",
    "href": "02-llms/00-intro-to-llms/index.html#overview",
    "title": "Language models (LMs)",
    "section": "Overview",
    "text": "Overview\nDuring this session I will cover:\n\nScientific applications modeling sequential data\nBrief History of Language Models\nTokenization and embedding of sequential data\nElements of a Transformer\nAttention mechanisms\nOutput layers\nTraining loops\nDifferent types of Transformers",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#modeling-sequential-data",
    "href": "02-llms/00-intro-to-llms/index.html#modeling-sequential-data",
    "title": "Language models (LMs)",
    "section": "Modeling Sequential Data",
    "text": "Modeling Sequential Data\nSequences are variable-length lists with data in subsequent iterations that depends on previous iterations (or tokens).\nMathematically: A sequence is a list of tokens:\nT = [t_1, t_2, t_3,...,t_N]\nwhere each token within the list depends on the others with a particular probability:\nP(t_2 | t_1, t_3, t_4, ..., t_N)\nThe purpose of sequential modeling is to learn these probabilities for possible tokens in a distribution to perform various tasks including:\n\nSequence generation based on a prompt\nLanguage translation (e.g.¬†English ‚Äì&gt; French)\nProperty prediction (predicting a property based on an entire sequence)\nIdentifying mistakes or missing elements in sequential data",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#scientific-sequential-data-modeling-examples",
    "href": "02-llms/00-intro-to-llms/index.html#scientific-sequential-data-modeling-examples",
    "title": "Language models (LMs)",
    "section": "Scientific sequential data modeling examples",
    "text": "Scientific sequential data modeling examples\n\nNucleic acid sequences + genomic data\nNucleic acid sequences can be used to predict translation of proteins, mutations, and gene expression levels.\n\n\n\n\n\n\nFigure¬†1: RNA sequences\n\n\n\nHere is an image of GenSLM. This is a language model developed by Argonne researchers that can model genomic information in a single model. It was shown to model the evolution of SARS-COV2 without expensive experiments.\n\n\n\n\n\n\nFigure¬†2: GenSLM. Image credit: Zvyagin et. al 2022. BioRXiv\n\n\n\n\n\nProtein sequences\nProtein sequences can be used to predict folding structure, protein-protein interactions, chemical/binding properties, protein function and many more properties.\n\n\n\n\n\n\nFigure¬†3: Protein sequences\n\n\n\n\n\nOther applications:\n\nBiomedical text\nSMILES strings\nWeather predictions\nInterfacing with simulations such as molecular dynamics simulation",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#overview-of-language-models",
    "href": "02-llms/00-intro-to-llms/index.html#overview-of-language-models",
    "title": "Language models (LMs)",
    "section": "Overview of Language models",
    "text": "Overview of Language models\nWe will now briefly talk about the progression of language models.\n\nRNNs\nRecurrent Neural Newtorks(RNNs) were a traditional model used to determine temporal dependencies within data.\nIn RNNs, the hidden state from the previous time step is fed back into the network, allowing it to maintain a ‚Äúmemory‚Äù of past inputs.\nThey were ideal for tasks with short sequences such as natural language processing and time-series prediction.\n\n\n\n\n\n\nFigure¬†4: RNN\n\n\n\nHowever, these networks had significant challenges.\n\nSlow to train: RNNs process data one element at a time, maintaining an internal hidden state that is updated at each step. They operate recurrently, where each output depends on the previous hidden state and the current input; thus, parallel computation is not possible.\nCannot handle large sequences: Exploding and vanishing gradients limit the RNN modelling of long sequences. Some variants of RNNs such as LSTM and GRU addressed this problem, they cannot engage with very large sequences.\n\n\n\nTransformers\nThe newest LMs referred to as ‚Äúlarge language models‚Äù (since they have large parameter size) were developed to address many of these challenges.\nThese new models base their desin on the Transformer architecture that was introduced in 2017 in the ‚ÄúAttention is all you need‚Äù paper.\nSince then a multitude of LLM architectures have been designed.\n\n\n\n\n\n\nFigure¬†5\n\n\n\nThe power of these models comes from the ‚Äúattention mechanism‚Äù defined in the Vaswani 2017 seminal paper.\n\n\n\n\n\n\nFigure¬†6: Transformer architecture",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#coding-example-of-llms-in-action",
    "href": "02-llms/00-intro-to-llms/index.html#coding-example-of-llms-in-action",
    "title": "Language models (LMs)",
    "section": "Coding example of LLMs in action!",
    "text": "Coding example of LLMs in action!\nLet‚Äôs look at an example of running inference with a LLM as a block box to generate text given a prompt and we will also initiate a training loop for an LLM:\nHere, we will use the transformers library which is as part of HuggingFace, a repository of different models, tokenizers and information on how to apply these models\nWarning: Large Language Models are only as good as their training data. They have no ethics, no judgement, or editing ability. We will be using some pretrained models from Hugging Face which used wide samples of internet hosted text. The datasets have not been strictly filtered to restrict all malign content so the generated text may be surprisingly dark or questionable. They do not reflect our core values and are only used for demonstration purposes.\n\n# !pip install transformers\n# !pip install pandas\n# !pip install torch\n\n\n%load_ext autoreload\n%autoreload 2\n%matplotlib inline\n# settings for jupyter book: svg for html version, high-resolution png for pdf\nimport matplotlib_inline.backend_inline\nmatplotlib_inline.backend_inline.set_matplotlib_formats('retina', 'svg', 'png')\nimport matplotlib as mpl\n# mpl.rcParams['figure.dpi'] = 400\nfrom rich import print\n\n\nfrom transformers import AutoConfig, AutoModelForCausalLM, AutoTokenizer\n\ninput_text = \"I got an A+ in my final exam; I am very\"\nfrom transformers import pipeline\n\ngenerator = pipeline(\"text-generation\", model=\"openai-community/gpt2\")\nprint(\n    [\n        i[\"generated_text\"]\n        for i in generator(input_text, max_length=20, num_return_sequences=5)\n    ]\n)\n\nDevice set to use mps:0\nTruncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=True` to explicitly truncate examples to max length. Defaulting to 'longest_first' truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to `truncation`.\nSetting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\nBoth `max_new_tokens` (=256) and `max_length`(=20) seem to have been set. `max_new_tokens` will take precedence. Please refer to the documentation for more information. (https://huggingface.co/docs/transformers/main/en/main_classes/text_generation)\n\n\n[\n    \"I got an A+ in my final exam; I am very disappointed.\\n\\nI'm not sure if I'll ever get my grades back, but I'm\nsure it's a good thing!\\n\\nI'm still looking for other ways to help, and I hope you'll join in!\\n\\n-Joe\\n\\nUPDATE: \nI got this email from a reader:\\n\\nDear Joe,\\n\\nI was just looking for a way to get my C grades back and I received\nthis email from a reader stating that they are good because they gave me an A+ in my final exam. I was surprised to\nsee that they gave me a B+ in my final exam, as I am a pretty good student.\\n\\nThanks for your email, though. I'm \nglad I have received a letter from you, too.\\n\\nIf you're interested in getting your A+ in your final exam, you can\nget it today by clicking here.\\n\\nThank you for taking the time to send me this email, but please know that you may\nwant to consider making a donation to help me.\\n\\nUntil next time!\\n\\n-Tom\",\n    'I got an A+ in my final exam; I am very happy with my results. I would like to thank the faculty at the \nUniversity of Arkansas for their time and effort.\\n\\nThank you,\\n\\nColleen F.',\n    \"I got an A+ in my final exam; I am very happy with my study as it has allowed me to take the A-level with an \nemphasis on study and teaching.\\n\\nI've also received many positive feedback from my students, and I have been able\nto gain valuable feedback on my writing skills. I have been given a lot of support from my faculty and staff, \nincluding teachers and students, to help me develop my writing techniques and focus and build a better writing \nvocabulary.\\n\\nI am very grateful to all of you for your support and encouragement.\\n\\nSincerely,\\n\\nBarry\",\n    'I got an A+ in my final exam; I am very happy I did. I am very proud of my performance and I hope I am getting\na second chance at the same level I did.\\n\\n(3/17/14: I had a second chance at my second attempt and I am very \nproud of it.)\\n\\n(3/17/14: I am very happy with my second attempt and I am very proud of it.)\\n\\n(3/17/14: I am \nvery happy with my second attempt and I am very proud of it.)\\n\\n(3/17/14: I am very happy with my second attempt \nand I am very proud of it.)\\n\\n(3/17/14: I am extremely happy with my second attempt and I am very proud of \nit.)\\n\\n(3/17/14: I am extremely happy with my second attempt and I am very proud of it.)\\n\\n(3/17/14: I am \nextremely happy with my second attempt and I am very proud of it.)\\n\\n(3/17/14: I am extremely happy with my second\nattempt and I am very proud of it.)\\n\\n(3/17/14: I am extremely happy with my second attempt and I am very proud of\nit.)\\n\\n(',\n    \"I got an A+ in my final exam; I am very pleased with my grades. I think this year is going to be a tough year \nfor me. I could use a few more years of the hard work of getting my mind off the subject. I could also use some \nmore experience in the field of psychology, or even more time with my team. I have never been a good teacher, and I\nhave no way to make my students feel comfortable about that.\\n\\nWhat do you do when you're an outlier?\\n\\nI am very\nexcited to have a great career and to be able to continue to produce at a high level for the next five years. I am \nexcited to have a partner that will be able to help me with the next five years. I have been working on my career \nas a writer, and I hope to be working with other writers soon.\\n\\nWhat's your career plan like?\\n\\nI have been \nworking my way up the ladder for about three years and have been fortunate enough to have an amazing team of people\nwho are amazing at what they do. I am very happy with my situation and very happy to be working with \nthem.\\n\\nYou've been writing for a long time. How did you get started writing for a publisher?\\n\\nI started writing\nafter college. I started\"\n]\n\n\n\nWe can also train a language model given input data:",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#whats-going-on-under-the-hood",
    "href": "02-llms/00-intro-to-llms/index.html#whats-going-on-under-the-hood",
    "title": "Language models (LMs)",
    "section": "What‚Äôs going on under the hood?",
    "text": "What‚Äôs going on under the hood?\nThere are two components that are ‚Äúblack-boxes‚Äù here:\n\nThe method for tokenization\nThe model that generates novel text.\n\nImage credit: https://blog.floydhub.com/tokenization-nlp/\n\nTokenization\n\nfrom transformers import AutoTokenizer\n\n# A utility function to tokenize a sequence and print out some information about it.\n\n\ndef tokenization_summary(tokenizer, sequence):\n    # get the vocabulary\n    vocab = tokenizer.vocab\n    # Number of entries to print\n    n = 10\n\n    # Print subset of the vocabulary\n    print(\"Subset of tokenizer.vocab:\")\n    for i, (token, index) in enumerate(tokenizer.vocab.items()):\n        print(f\"{token}: {index}\")\n        if i &gt;= n - 1:\n            break\n\n    print(\"Vocab size of the tokenizer = \", len(vocab))\n    print(\"------------------------------------------\")\n\n    # .tokenize chunks the existing sequence into different tokens based on the rules and vocab of the tokenizer.\n    tokens = tokenizer.tokenize(sequence)\n    print(\"Tokens : \", tokens)\n    print(\"------------------------------------------\")\n\n    # .convert_tokens_to_ids or .encode or .tokenize converts the tokens to their corresponding numerical representation.\n    #  .convert_tokens_to_ids has a 1-1 mapping between tokens and numerical representation\n    # ids = tokenizer.convert_tokens_to_ids(tokens)\n    # print(\"encoded Ids: \", ids)\n\n    # .encode also adds additional information like Start of sequence tokens and End of sequene\n    print(\"tokenized sequence : \", tokenizer.encode(sequence))\n\n    # .tokenizer has additional information about attention_mask.\n    # encode = tokenizer(sequence)\n    # print(\"Encode sequence : \", encode)\n    # print(\"------------------------------------------\")\n\n    # .decode decodes the ids to raw text\n    ids = tokenizer.convert_tokens_to_ids(tokens)\n    decode = tokenizer.decode(ids)\n    print(\"Decode sequence : \", decode)\n\n\ntokenizer_1 = AutoTokenizer.from_pretrained(\n    \"gpt2\"\n)  # GPT-2 uses \"Byte-Pair Encoding (BPE)\"\n\nsequence = \"I got an A+ in my final exam; I am very\"\n\ntokenization_summary(tokenizer_1, sequence)\n\nSubset of tokenizer.vocab:\n\n\n\nƒ†Sikh: 34629\n\n\n\nwcs: 12712\n\n\n\nforce: 3174\n\n\n\nount: 608\n\n\n\neither: 31336\n\n\n\nƒ†smear: 35180\n\n\n\nƒ†Phoenix: 9643\n\n\n\nƒ†preacher: 39797\n\n\n\nimum: 2847\n\n\n\nSusan: 45842\n\n\n\nVocab size of the tokenizer =  50257\n\n\n\n------------------------------------------\n\n\n\nTokens : \n['I', 'ƒ†got', 'ƒ†an', 'ƒ†A', '+', 'ƒ†in', 'ƒ†my', 'ƒ†final', 'ƒ†exam', ';', 'ƒ†I', 'ƒ†am', 'ƒ†very']\n\n\n\n------------------------------------------\n\n\n\ntokenized sequence : \n[40, 1392, 281, 317, 10, 287, 616, 2457, 2814, 26, 314, 716, 845]\n\n\n\nDecode sequence :  I got an A+ in my final exam; I am very\n\n\n\n\n\nToken embedding:\nWords are turned into vectors based on their location within a vocabulary.\nThe strategy of choice for learning language structure from tokenized text is to find a clever way to map each token into a moderate-dimension vector space, adjusting the mapping so that\nSimilar, or associated tokens take up residence nearby each other, and different regions of the space correspond to different position in the sequence. Such a mapping from token ID to a point in a vector space is called a token embedding. The dimension of the vector space is often high (e.g.¬†1024-dimensional), but much smaller than the vocabulary size (30,000‚Äì500,000).\nVarious approaches have been attempted for generating such embeddings, including static algorithms that operate on a corpus of tokenized data as preprocessors for NLP tasks. Transformers, however, adjust their embeddings during training.\n\n\nWe can visualize these embeddings of the popular BERT model using PCA!\n\n# !pip install umap\n# !pip install plotly\n# !pip install scikit-learn\n# !pip install nltk\n\n\nimport nltk\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport umap\nfrom nltk.corpus import stopwords\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom transformers import BertModel, BertTokenizer\n\nnltk.download(\"stopwords\")\nimport torch\n\n# Load BERT model and tokenizer\nmodel_name = \"bert-base-uncased\"\ntokenizer = BertTokenizer.from_pretrained(model_name)\nmodel = BertModel.from_pretrained(model_name)\n\nif True:\n    text = \"The diligent student diligently studied hard for his upcoming exams He was incredibly conscientious in his efforts and committed himself to mastering every subject\"\n\n    # Tokenize and get BERT embeddings\n    tokens = tokenizer(text, return_tensors=\"pt\", padding=True, truncation=True)\n    with torch.no_grad():\n        outputs = model(**tokens)\n        embeddings = outputs.last_hidden_state.squeeze(\n            0\n        ).numpy()  # Shape: (num_tokens, 768) for BERT-base\n\n    # Get the list of token labels without special tokens and subword tokens\n    labels = [\n        tokenizer.convert_ids_to_tokens(id) for id in tokens.input_ids[0].tolist()\n    ]\n    filtered_labels = [\n        label\n        for label in labels\n        if not (label.startswith(\"[\") and label.endswith(\"]\")) and \"##\" not in label\n    ]\n\n    # Remove stopwords from labels and embeddings\n    stop_words = set(stopwords.words(\"english\"))\n    filtered_labels = [\n        label for label in filtered_labels if label.lower() not in stop_words\n    ]\n    filtered_embeddings = embeddings[: len(filtered_labels)]\n\n    # Perform PCA for dimensionality reduction (3D)\n    pca = PCA(n_components=3)\n    embeddings_pca = pca.fit_transform(filtered_embeddings)\n\n    # Convert embeddings and labels to DataFrame for Plotly\n    data_pca = {\n        \"x\": embeddings_pca[:, 0],\n        \"y\": embeddings_pca[:, 1],\n        \"z\": embeddings_pca[:, 2],\n        \"label\": filtered_labels,\n    }\n    df_pca = pd.DataFrame(data_pca)\n\n    # Plot PCA in 3D with Plotly (interactive)\n    fig_pca = px.scatter_3d(\n        df_pca,\n        x=\"x\",\n        y=\"y\",\n        z=\"z\",\n        text=\"label\",\n        title=\"PCA 3D Visualization of Token Embeddings\",\n        labels={\"x\": \"Dimension 1\", \"y\": \"Dimension 2\", \"z\": \"Dimension 3\"},\n        hover_name=\"label\",\n    )\n    fig_pca.update_traces(marker=dict(size=5), textfont=dict(size=8))\n    fig_pca.show()\n\n[nltk_data] Downloading package stopwords to\n[nltk_data]     /Users/samforeman/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n\n\n                            \n                                            \n\n\nYou should see common words grouped together!",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#elements-of-a-transformer",
    "href": "02-llms/00-intro-to-llms/index.html#elements-of-a-transformer",
    "title": "Language models (LMs)",
    "section": "Elements of a Transformer",
    "text": "Elements of a Transformer\nNow let‚Äôs look at the base elements that make up a Transformer by dissecting the popular GPT2 model\n\nfrom transformers import GPT2LMHeadModel, GPT2Tokenizer\n\nmodel = GPT2LMHeadModel.from_pretrained(\"gpt2\")\nprint(model)\n\nGPT2LMHeadModel(\n  (transformer): GPT2Model(\n    (wte): Embedding(50257, 768)\n    (wpe): Embedding(1024, 768)\n    (drop): Dropout(p=0.1, inplace=False)\n    (h): ModuleList(\n      (0-11): 12 x GPT2Block(\n        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n        (attn): GPT2Attention(\n          (c_attn): Conv1D(nf=2304, nx=768)\n          (c_proj): Conv1D(nf=768, nx=768)\n          (attn_dropout): Dropout(p=0.1, inplace=False)\n          (resid_dropout): Dropout(p=0.1, inplace=False)\n        )\n        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n        (mlp): GPT2MLP(\n          (c_fc): Conv1D(nf=3072, nx=768)\n          (c_proj): Conv1D(nf=768, nx=3072)\n          (act): NewGELUActivation()\n          (dropout): Dropout(p=0.1, inplace=False)\n        )\n      )\n    )\n    (ln_f): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n  )\n  (lm_head): Linear(in_features=768, out_features=50257, bias=False)\n)\n\n\n\nGPT2 is an example of a Transformer Decoder which is used to generate novel text.\nDecoder models use only the decoder of a Transformer model. At each stage, for a given word the attention layers can only access the words positioned before it in the sentence. These models are often called auto-regressive models.\nThe pretraining of decoder models usually revolves around predicting the next word in the sentence.\nThese models are best suited for tasks involving text generation.\nExamples of these include: * CTRL * GPT * GPT-2 * Transformer XL\nLet‚Äôs discuss one of the most popular models, GPT-2 in a little more detail.\nThe architecture of GPT-2 is inspired by the paper: ‚ÄúGenerating Wikipedia by Summarizing Long Sequences‚Äù which is another arrangement of the transformer block that can do language modeling. This model threw away the encoder and thus is known as the ‚ÄúTransformer-Decoder‚Äù.\n\n\n\ntransformer-decoder-intro.png\n\n\nImage credit: https://jalammar.github.io/illustrated-gpt2/\nThe Transformer-Decoder is composed of Decoder blocks stacked ontop of each other where each contains two types of layers: 1. Masked Self-Attention and 2. Feed Forward Neural Networks.\nIn this lecture, we will * First, discuss attention mechanisms at length as this is arguably the greatest contribution by Transformers. * Second, extend the discussion from last week (https://github.com/argonne-lcf/ai-science-training-series/blob/main/04_intro_to_llms/Sequential_Data_Models.ipynb) on embedding input data while taking into account position. * Third, discuss outputting real text/sequences from the models. * Fourth, build a training loop for a mini-LLM.\n\n## IMPORTS\n\nimport torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\ntorch.manual_seed(1337)\n# hyperparameters\nbatch_size = 16  # how many independent sequences will we process in parallel?\nblock_size = 32  # what is the maximum context length for predictions?\nmax_iters = 5000\neval_interval = 100\nlearning_rate = 1e-3\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\neval_iters = 200\nn_embd = 64\nn_head = 4  ## so head_size = 16\nn_layer = 4\ndropout = 0.0\n# ------------\n\ntorch.manual_seed(1337)\n\n&lt;torch._C.Generator at 0x11d729970&gt;",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#attention-mechanisms",
    "href": "02-llms/00-intro-to-llms/index.html#attention-mechanisms",
    "title": "Language models (LMs)",
    "section": "Attention mechanisms",
    "text": "Attention mechanisms\nSuppose the following sentence is an input sentence we want to translate using an LLM:\n‚ÄùThe animal didn't cross the street because it was too tired‚Äù\nEarlier, we mentioned that the Transformer learns an embedding of all words allowing interpretation of meanings of words.\n\nSo, if the model did a good job in token embedding, it will ‚Äúknow‚Äù what all the words in this sentence mean.\nBut to understand a full sentence, the model also need to understand what each word means in relation to other words.\nFor example, when we read the sentence: ‚ÄùThe animal didn't cross the street because it was too tired‚Äù we know intuitively that the word \"it\" refers to \"animal\", the state for \"it\" is \"tired\", and the associated action is \"didn't cross\".\nHowever, the model needs a way to learn all of this information in a simple yet generalizable way. What makes Transformers particularly powerful compared to earlier sequential architectures is how it encodes context with the self-attention mechanism.\nAs the model processes each word in the input sequence, attention looks at other positions in the input sequence for clues to a better understanding for this word.\n\nImage credit: https://jalammar.github.io/illustrated-transformer/\nSelf-attention mechanisms use 3 vectors to encode the context of a word in a sequence with another word: 1. Query: the word representation we score other words against using the other word‚Äôs keys 2. Key: labels for the words in a sequence that we match against the query 3. Value: actual word representation. We will use the queries and keys to score the word‚Äôs relevance to the query, and multiply this by the value.\nAn analogy provided by Jay Alammar is thinking about attention as choosing a file from a file cabinet according to information on a post-it note. You can use the post-it note (query) to identify the folder (key) that most matches the topic you are looking up. Then you access the contents of the file (value) according to its relevance to your query.\n Image credit: https://jalammar.github.io/illustrated-gpt2/\nIn our models, we can encode queries, keys, and values using simple linear layers with the same size (sequence length, head_size). During the training process, these layers will be updated to best encode context.\n\nC = 32  # channels\nhead_size = 16\n\nkey = nn.Linear(C, head_size, bias=False)\nquery = nn.Linear(C, head_size, bias=False)\nvalue = nn.Linear(C, head_size, bias=False)\n\nThe algorithm for self-attention is as follows:\n\nGenerate query, key and value vectors for each word\nCalculate a score for each word in the input sentence against each other.\nDivide the scores by the square root of the dimension of the key vectors to stabilize the gradients. This is then passed through a softmax operation.\nMultiply each value vector by the softmax score.\nSum up the weighted value vectors to produce the output.\n\n\nImage credit: https://jalammar.github.io/illustrated-transformer/\nLet‚Äôs see how attention is performed in the code.\n\nimport torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\ntorch.manual_seed(1337)\nB, T, C = 4, 8, 32  # batch, time, channels\nx = torch.randn(B, T, C)\n\n# Here we want the wei to be data dependent - ie gather info from the past but in a data dependant way\n\nhead_size = 16\nkey = nn.Linear(C, head_size, bias=False)\nquery = nn.Linear(C, head_size, bias=False)\nvalue = nn.Linear(C, head_size, bias=False)\nk = key(\n    x\n)  # (B, T, 16) # each token here (totally B*T) produce a key and query in parallel and independently\nq = query(x)  # (B, T, 16)\nv = value(x)\n\nwei = (\n    q @ k.transpose(-2, -1) * head_size**-0.5\n)  # (B, T, 16) @ (B, 16, T) ---&gt; (B, T, T). #\nwei = F.softmax(\n    wei, dim=-1\n)  # exponentiate and normalize giving a nice distibution that sums to 1 and\n# now it tells us that in a data dependent manner how much of info to aggregate from\n\nout = wei @ v  # aggregate the attention scores and value vector.\n\n\nprint(out[0])\n\ntensor([[ 0.0618, -0.0091, -0.3488,  0.3208,  0.2971, -0.1573, -0.0561,  0.1068,\n          0.0368,  0.0139, -0.0017,  0.3110,  0.1404, -0.0158,  0.1853,  0.4290],\n        [ 0.1578, -0.0971, -0.4256,  0.3538,  0.3621, -0.2392, -0.0536,  0.1759,\n          0.1115,  0.0282, -0.0649,  0.3641,  0.1928,  0.0261,  0.2162,  0.3758],\n        [ 0.1293,  0.0759, -0.2946,  0.2292,  0.2215, -0.0710, -0.0107,  0.1616,\n         -0.0930, -0.0877,  0.0567,  0.1899,  0.0311, -0.0894,  0.0309,  0.5471],\n        [ 0.1247,  0.1400, -0.2436,  0.1819,  0.1976,  0.0338, -0.0028,  0.1124,\n         -0.1477, -0.0748,  0.0650,  0.1392, -0.0314, -0.0989,  0.0613,  0.5433],\n        [ 0.0667,  0.1845, -0.2135,  0.2813,  0.2064,  0.0873,  0.0084,  0.2055,\n         -0.1130, -0.1466,  0.0459,  0.1923, -0.0275, -0.1107,  0.0065,  0.4674],\n        [ 0.1924,  0.1693, -0.1568,  0.2284,  0.1620,  0.0737,  0.0443,  0.2519,\n         -0.1912, -0.1979,  0.0832,  0.0713, -0.0826, -0.0848, -0.1047,  0.6089],\n        [ 0.1184,  0.0884, -0.2652,  0.2560,  0.1840,  0.0284, -0.0621,  0.1181,\n         -0.0880,  0.0104,  0.1123,  0.1850,  0.0369, -0.0730,  0.0663,  0.5242],\n        [ 0.1243,  0.0453, -0.3412,  0.2709,  0.2335, -0.0948, -0.0421,  0.2143,\n         -0.0330, -0.0313,  0.0520,  0.2378,  0.1084, -0.0959,  0.0300,  0.4707]],\n       grad_fn=&lt;SelectBackward0&gt;)\n\n\n\n\nMulti-head attention\nIn practice, multiple attention heads are used which 1. Expands the model‚Äôs ability to focus on different positions and prevent the attention to be dominated by the word itself. 2. Have multiple ‚Äúrepresentation subspaces‚Äù. Have multiple sets of Query/Key/Value weight matrices\n\nImage credit: https://jalammar.github.io/illustrated-transformer/\n\n\nLet‚Äôs see attention mechanisms in action!\nWe are going to use the powerful visualization tool bertviz, which allows an interactive experience of the attention mechanisms. Normally these mechanisms are abstracted away but this will allow us to inspect our model in more detail.\n\n!pip install bertviz\n\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n    - Avoid using `tokenizers` before the fork if possible\n    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n\n\nRequirement already satisfied: bertviz in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (1.4.1)\nRequirement already satisfied: transformers&gt;=2.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from bertviz) (4.53.3)\nRequirement already satisfied: torch&gt;=1.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from bertviz) (2.7.1)\nRequirement already satisfied: tqdm in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from bertviz) (4.67.1)\nRequirement already satisfied: boto3 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from bertviz) (1.39.11)\nRequirement already satisfied: requests in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from bertviz) (2.32.4)\nRequirement already satisfied: regex in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from bertviz) (2024.11.6)\nRequirement already satisfied: sentencepiece in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from bertviz) (0.2.0)\nRequirement already satisfied: IPython&gt;=7.14 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from bertviz) (9.4.0)\nRequirement already satisfied: decorator in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (5.2.1)\nRequirement already satisfied: ipython-pygments-lexers in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (1.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (0.19.2)\nRequirement already satisfied: matplotlib-inline in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (0.1.7)\nRequirement already satisfied: pexpect&gt;4.3 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (4.9.0)\nRequirement already satisfied: prompt_toolkit&lt;3.1.0,&gt;=3.0.41 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (3.0.51)\nRequirement already satisfied: pygments&gt;=2.4.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (2.19.2)\nRequirement already satisfied: stack_data in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (0.6.3)\nRequirement already satisfied: traitlets&gt;=5.13.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from IPython&gt;=7.14-&gt;bertviz) (5.14.3)\nRequirement already satisfied: wcwidth in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from prompt_toolkit&lt;3.1.0,&gt;=3.0.41-&gt;IPython&gt;=7.14-&gt;bertviz) (0.2.13)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.4 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from jedi&gt;=0.16-&gt;IPython&gt;=7.14-&gt;bertviz) (0.8.4)\nRequirement already satisfied: ptyprocess&gt;=0.5 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from pexpect&gt;4.3-&gt;IPython&gt;=7.14-&gt;bertviz) (0.7.0)\nRequirement already satisfied: filelock in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from torch&gt;=1.0-&gt;bertviz) (3.18.0)\nRequirement already satisfied: typing-extensions&gt;=4.10.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from torch&gt;=1.0-&gt;bertviz) (4.14.1)\nRequirement already satisfied: setuptools in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from torch&gt;=1.0-&gt;bertviz) (80.9.0)\nRequirement already satisfied: sympy&gt;=1.13.3 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from torch&gt;=1.0-&gt;bertviz) (1.14.0)\nRequirement already satisfied: networkx in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from torch&gt;=1.0-&gt;bertviz) (3.5)\nRequirement already satisfied: jinja2 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from torch&gt;=1.0-&gt;bertviz) (3.1.6)\nRequirement already satisfied: fsspec in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from torch&gt;=1.0-&gt;bertviz) (2025.7.0)\nRequirement already satisfied: mpmath&lt;1.4,&gt;=1.1.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from sympy&gt;=1.13.3-&gt;torch&gt;=1.0-&gt;bertviz) (1.3.0)\nRequirement already satisfied: huggingface-hub&lt;1.0,&gt;=0.30.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from transformers&gt;=2.0-&gt;bertviz) (0.33.4)\nRequirement already satisfied: numpy&gt;=1.17 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from transformers&gt;=2.0-&gt;bertviz) (2.3.1)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from transformers&gt;=2.0-&gt;bertviz) (25.0)\nRequirement already satisfied: pyyaml&gt;=5.1 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from transformers&gt;=2.0-&gt;bertviz) (6.0.2)\nRequirement already satisfied: tokenizers&lt;0.22,&gt;=0.21 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from transformers&gt;=2.0-&gt;bertviz) (0.21.2)\nRequirement already satisfied: safetensors&gt;=0.4.3 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from transformers&gt;=2.0-&gt;bertviz) (0.5.3)\nRequirement already satisfied: hf-xet&lt;2.0.0,&gt;=1.1.2 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from huggingface-hub&lt;1.0,&gt;=0.30.0-&gt;transformers&gt;=2.0-&gt;bertviz) (1.1.5)\nRequirement already satisfied: botocore&lt;1.40.0,&gt;=1.39.11 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from boto3-&gt;bertviz) (1.39.11)\nRequirement already satisfied: jmespath&lt;2.0.0,&gt;=0.7.1 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from boto3-&gt;bertviz) (1.0.1)\nRequirement already satisfied: s3transfer&lt;0.14.0,&gt;=0.13.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from boto3-&gt;bertviz) (0.13.1)\nRequirement already satisfied: python-dateutil&lt;3.0.0,&gt;=2.1 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from botocore&lt;1.40.0,&gt;=1.39.11-&gt;boto3-&gt;bertviz) (2.9.0.post0)\nRequirement already satisfied: urllib3!=2.2.0,&lt;3,&gt;=1.25.4 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from botocore&lt;1.40.0,&gt;=1.39.11-&gt;boto3-&gt;bertviz) (2.5.0)\nRequirement already satisfied: six&gt;=1.5 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from python-dateutil&lt;3.0.0,&gt;=2.1-&gt;botocore&lt;1.40.0,&gt;=1.39.11-&gt;boto3-&gt;bertviz) (1.17.0)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from jinja2-&gt;torch&gt;=1.0-&gt;bertviz) (3.0.2)\nRequirement already satisfied: charset_normalizer&lt;4,&gt;=2 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from requests-&gt;bertviz) (3.4.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from requests-&gt;bertviz) (3.10)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from requests-&gt;bertviz) (2025.8.3)\nRequirement already satisfied: executing&gt;=1.2.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from stack_data-&gt;IPython&gt;=7.14-&gt;bertviz) (2.2.0)\nRequirement already satisfied: asttokens&gt;=2.1.0 in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from stack_data-&gt;IPython&gt;=7.14-&gt;bertviz) (3.0.0)\nRequirement already satisfied: pure-eval in /Users/samforeman/projects/saforem2/intro-hpc-bootcamp-2025/.venv/lib/python3.13/site-packages (from stack_data-&gt;IPython&gt;=7.14-&gt;bertviz) (0.2.3)\n\n\nLet‚Äôs load in the model, GPT2 and look at the attention mechanisms.\nHint‚Ä¶ click on the different blocks in the visualization to see the attention\n\nfrom bertviz import model_view\nfrom transformers import AutoModel, AutoModelForCausalLM, AutoTokenizer, utils\n\nutils.logging.set_verbosity_error()  # Suppress standard warnings\n\nmodel_name = \"openai-community/gpt2\"\ninput_text = \"The animal didn't cross the street because it was too tired\"\nmodel = AutoModelForCausalLM.from_pretrained(model_name, output_attentions=True)\ntokenizer = AutoTokenizer.from_pretrained(model_name)\ninputs = tokenizer.encode(input_text, return_tensors=\"pt\")  # Tokenize input text\noutputs = model(inputs)  # Run model\nattention = outputs[-1]  # Retrieve attention from model outputs\ntokens = tokenizer.convert_ids_to_tokens(\n    inputs[0]\n)  # Convert input ids to token strings\nmodel_view(attention, tokens)  # Display model view",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#positional-encoding",
    "href": "02-llms/00-intro-to-llms/index.html#positional-encoding",
    "title": "Language models (LMs)",
    "section": "Positional encoding",
    "text": "Positional encoding\nWe just discussed attention mechanisms which account for context between words. Another question we should ask is how do we account for the order of words in an input sentence\nConsider the following two sentences to see why this is important:\nThe man ate the sandwich.\nThe sandwich ate the man.\nClearly, these are two vastly different situations even though they have the same words. The Transformer can\nTransformers differentiate between these situations by adding a Positional encoding vector to each input embedding. These vectors follow a specific pattern that the model learns, which helps it determine the position of each word.\n\n\n\n\n\n\nFigure¬†7: Positional encoding\n\n\n\nImage credit: https://medium.com/@xuer.chen.human/llm-study-notes-positional-encoding-0639a1002ec0\nWe set up positional encoding similarly as token embedding using the nn.Embedding tool. We use a simple embedding here but there are more complex positional encodings used such as sinusoidal.\nFor an explanation of different positional encodings, refer to this post: https://machinelearningmastery.com/a-gentle-introduction-to-positional-encoding-in-transformer-models-part-1/\n\nvocab_size = 65\nn_embd = 64\n\ntoken_embedding_table = nn.Embedding(vocab_size, n_embd)\nblock_size = 32  # what is the maximum context length for predictions?\nposition_embedding_table = nn.Embedding(block_size, n_embd)\n\nYou will notice the positional encoding size is (block_size, n_embed) because it encodes for the postion of a token within the sequence of size block_size\nThen, the position embedding used is simply added to the token embedding to apply positional embedding.\nLet‚Äôs look at token embedding alone:\n\nx = torch.tensor([1, 3, 15, 4, 7, 1, 4, 9])\nx = token_embedding_table(x)\nprint(x[0])\n\ntensor([ 0.7221, -0.9629, -2.0578,  1.9740,  0.7434,  1.1139,  0.6926,  0.0296,\n         0.6405, -1.6464,  0.4935,  0.7485,  0.9238, -0.4940,  0.4814, -0.3859,\n        -0.3094,  1.1066, -0.2891,  0.1891,  2.0440, -0.7945, -0.4331,  0.3007,\n         1.4317,  0.2881, -0.4343,  0.4280,  1.2469,  1.4047, -0.3404, -2.2190,\n         0.4893,  0.0398, -0.2717, -2.2400, -0.0029, -1.4251,  0.7330,  0.3551,\n         0.1472, -1.1895, -0.8407,  0.3134, -0.6709, -0.8176,  0.6929, -0.6374,\n         0.3174,  0.4837, -0.0073, -1.5924,  1.8606, -1.2910, -0.1594,  0.3111,\n        -0.1536, -0.3414, -0.0170, -0.1633,  0.2794,  0.6755,  0.7066, -1.6665],\n       grad_fn=&lt;SelectBackward0&gt;)\n\n\n\nAnd token + positional embeddings:\n\nx = torch.tensor([1, 3, 15, 4, 7, 1, 4, 9])\nx = position_embedding_table(x) + token_embedding_table(x)\nprint(x[0])\n\ntensor([ 0.4326, -1.6287, -0.8684,  3.0704,  0.3646,  1.9826,  0.7582, -0.1918,\n         1.0491, -2.2562, -0.4931, -0.7808,  1.7206, -1.0297,  2.0798, -1.3427,\n        -0.7896, -0.1746,  0.0926,  0.0543,  2.3831, -0.6208,  0.3902,  0.1097,\n         1.0455, -1.4557,  0.3402,  2.6717,  1.8380,  1.2628, -0.4831, -4.6023,\n         0.6959,  1.0347,  0.5903, -0.7541,  0.4682, -0.3895,  2.1526,  0.6272,\n        -0.8558, -0.8434,  0.1311, -1.0272, -2.0580,  0.0584,  0.3442, -0.3464,\n        -0.3444,  2.3134, -1.1142, -1.4629,  3.3503, -2.0594,  1.4105,  0.4558,\n        -1.3366,  1.9283,  1.5187,  0.3906,  1.1448, -0.8422,  2.2692, -0.7949],\n       grad_fn=&lt;SelectBackward0&gt;)\n\n\n\nYou can see a clear offset between these two embeddings.\nDuring the training process, these embeddings will be learned to best encode the token and positional embeddings of the sequences.",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#output-layers",
    "href": "02-llms/00-intro-to-llms/index.html#output-layers",
    "title": "Language models (LMs)",
    "section": "Output layers",
    "text": "Output layers\nAt the end of our Transformer model, we are left with a vector, so how do we turn this into a word?\n\nUsing a final Linear layer and a Softmax Layer. The Linear layer projects the vector produced by the stack of decoders, into a larger vector called a logits vector.\nIf our model knows 10,000 unique English words learned from its training dataset the logits vector is 10,000 cells wide ‚Äì each cell corresponds to the score of a unique word.\nThe softmax layer turns those scores into probabilities. The cell with the highest probability is chosen, and the word associated with it is produced as the output for this time step.\n\n\n\n\n\n\nFigure¬†8: Transformer decoder output softmax\n\n\n\nImage credit: https://jalammar.github.io/illustrated-transformer/",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#training",
    "href": "02-llms/00-intro-to-llms/index.html#training",
    "title": "Language models (LMs)",
    "section": "Training",
    "text": "Training\nHow does an LLM improve over time? We want to compare the probabilitiy distribution for each token generated by our model to the ground truths. Our model produces a probability distribution for each token. We want to compare these probability distributions to the ground truths. For example, when translating the sentence: ‚Äúje suis √©tudiant‚Äù into ‚Äúi am a student‚Äù as can be seen in the example:\n\n\n\n\n\n\nFigure¬†9: Output target probability distributions\n\n\n\nImage credit: https://jalammar.github.io/illustrated-transformer/\nThe model can calculate the loss between the vector it generates and the ground truth vector seen in this example. A commonly used loss function is cross entropy loss:\nCE = -\\sum_{x \\in X} p(x) log q(x)\nwhere p(x) represents the true distribution and q(x) represents the predicted distribution.\n\nfrom torch.nn import functional as F\n\nlogits = torch.tensor([0.5, 0.1, 0.3])\ntargets = torch.tensor([1.0, 0.0, 0.0])\nloss = F.cross_entropy(logits, targets)\nprint(loss)\n\ntensor(0.9119)\n\n\n\nAnother important metric commonly used in LLMs is perplexity.\nIntuitively, perplexity means to be surprised. We measure how much the model is surprised by seeing new data. The lower the perplexity, the better the training is.\nMathematically, perplexity is just the exponent of the negative cross entropy loss:\n\\text{perplexity} = exp(\\text{CE})\n\nperplexity = torch.exp(loss)\nprint(perplexity)\n\ntensor(2.4891)",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#lets-train-a-mini-llm-from-scratch",
    "href": "02-llms/00-intro-to-llms/index.html#lets-train-a-mini-llm-from-scratch",
    "title": "Language models (LMs)",
    "section": "Let‚Äôs train a mini-LLM from scratch",
    "text": "Let‚Äôs train a mini-LLM from scratch\n\nSet up hyperparameters:\n\n# hyperparameters\nbatch_size = 4  # how many independent sequences will we process in parallel?\nblock_size = 32  # what is the maximum context length for predictions?\nmax_iters = 500\neval_interval = 50\nlearning_rate = 1e-3\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\neval_iters = 200\nn_embd = 64\nn_head = 4  ## so head_size = 16\nn_layer = 4\ndropout = 0.0\n# ------------\n\n\n\nLoad in data and create train and test datasets\nWe‚Äôre going to be using the tiny Shakespeare dataset. Data is tokenized according to a simple character based tokenizer. Data is split into a train and test set so we have something to test after performing training (9:1 split).\n\n! [ ! -f \"input.txt\" ] && wget https://raw.githubusercontent.com/argonne-lcf/ATPESC_MachineLearning/refs/heads/master/02_intro_to_LLMs/dataset/input.txt\n\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n    - Avoid using `tokenizers` before the fork if possible\n    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n\n\n\nwith open(\"input.txt\", \"r\", encoding=\"utf-8\") as f:\n    text = f.read()\n\n# here are all the unique characters that occur in this text\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\n# create a mapping from characters to integers\nstoi = {ch: i for i, ch in enumerate(chars)}\nitos = {i: ch for i, ch in enumerate(chars)}\nencode = lambda s: [\n    stoi[c] for c in s\n]  # encoder: take a string, output a list of integers\ndecode = lambda l: \"\".join(\n    [itos[i] for i in l]\n)  # decoder: take a list of integers, output a string\n\n# Train and test splits\ndata = torch.tensor(encode(text), dtype=torch.long)\nn = int(0.9 * len(data))  # first 90% will be train, rest val\ntrain_data = data[:n]\nval_data = data[n:]\n\n\n# data loading\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data = train_data if split == \"train\" else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i : i + block_size] for i in ix])\n    y = torch.stack([data[i + 1 : i + block_size + 1] for i in ix])\n    x, y = x.to(device), y.to(device)\n    return x, y\n\n\nprint(text[:1000])\n\nFirst Citizen:\nBefore we proceed any further, hear me speak.\n\nAll:\nSpeak, speak.\n\nFirst Citizen:\nYou are all resolved rather to die than to famish?\n\nAll:\nResolved. resolved.\n\nFirst Citizen:\nFirst, you know Caius Marcius is chief enemy to the people.\n\nAll:\nWe know't, we know't.\n\nFirst Citizen:\nLet us kill him, and we'll have corn at our own price.\nIs't a verdict?\n\nAll:\nNo more talking on't; let it be done: away, away!\n\nSecond Citizen:\nOne word, good citizens.\n\nFirst Citizen:\nWe are accounted poor citizens, the patricians good.\nWhat authority surfeits on would relieve us: if they\nwould yield us but the superfluity, while it were\nwholesome, we might guess they relieved us humanely;\nbut they think we are too dear: the leanness that\nafflicts us, the object of our misery, is as an\ninventory to particularise their abundance; our\nsufferance is a gain to them Let us revenge this with\nour pikes, ere we become rakes: for the gods know I\nspeak this in hunger for bread, not in thirst for revenge.\n\n\n\n\n\n\n\nSet up the components of the Decoder block:\n\nMultiHeadAttention\nFeedForward Network\n\n\nclass Head(nn.Module):\n    \"\"\"one head of self-attention\"\"\"\n\n    def __init__(self, head_size):\n        super().__init__()\n        self.key = nn.Linear(n_embd, head_size, bias=False)\n        self.query = nn.Linear(n_embd, head_size, bias=False)\n        self.value = nn.Linear(n_embd, head_size, bias=False)\n        self.register_buffer(\"tril\", torch.tril(torch.ones(block_size, block_size)))\n\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        B, T, C = x.shape\n        k = self.key(x)  # (B,T,C) 16,32,16\n        q = self.query(x)  # (B,T,C)\n        # compute attention scores (\"affinities\")\n        wei = q @ k.transpose(-2, -1) * C**-0.5  # (B, T, C) @ (B, C, T) -&gt; (B, T, T)\n        wei = wei.masked_fill(self.tril[:T, :T] == 0, float(\"-inf\"))  # (B, T, T)\n        wei = F.softmax(wei, dim=-1)  # (B, T, T)\n        wei = self.dropout(wei)\n        # perform the weighted aggregation of the values\n        v = self.value(x)  # (B,T,C)\n        out = wei @ v  # (B, T, T) @ (B, T, C) -&gt; (B, T, C)\n        return out\n\n\nclass MultiHeadAttention(nn.Module):\n    \"\"\"multiple heads of self-attention in parallel\"\"\"\n\n    def __init__(self, num_heads, head_size):\n        super().__init__()\n        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])\n        self.proj = nn.Linear(n_embd, n_embd)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x):\n        out = torch.cat([h(x) for h in self.heads], dim=-1)\n        out = self.dropout(self.proj(out))\n        return out\n\n\nclass FeedFoward(nn.Module):\n    \"\"\"a simple linear layer followed by a non-linearity\"\"\"\n\n    def __init__(self, n_embd):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Linear(n_embd, 4 * n_embd),\n            nn.ReLU(),\n            nn.Linear(\n                4 * n_embd, n_embd\n            ),  # Projection layer going back into the residual pathway\n            nn.Dropout(dropout),\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\n\n\nCombine components into the Decoder block\n\nclass Block(nn.Module):\n    \"\"\"Transformer block: communication followed by computation\"\"\"\n\n    def __init__(self, n_embd, n_head):\n        # n_embd: embedding dimension, n_head: the number of heads we'd like\n        super().__init__()\n        head_size = n_embd // n_head\n        self.sa = MultiHeadAttention(n_head, head_size)\n        self.ffwd = FeedFoward(n_embd)\n        self.ln1 = nn.LayerNorm(n_embd)\n        self.ln2 = nn.LayerNorm(n_embd)\n\n    def forward(self, x):\n        x = x + self.sa(self.ln1(x))  # Communication\n        x = x + self.ffwd(self.ln2(x))  # Computation\n        return x\n\n\n\nSet up the full Transformer model\nThis is a combination of the Token embeddings, Positional embeddings, a stack of Transformer blocks and an output block.\n\n# super simple language model\nclass LanguageModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # each token directly reads off the logits for the next token from a lookup table\n        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n        self.position_embedding_table = nn.Embedding(block_size, n_embd)\n        self.blocks = nn.Sequential(\n            *[Block(n_embd, n_head=n_head) for _ in range(n_layer)]\n        )\n        self.ln_f = nn.LayerNorm(n_embd)  # final layer norm\n        self.lm_head = nn.Linear(n_embd, vocab_size)\n\n    def forward(self, idx, targets=None):\n        B, T = idx.shape\n\n        # idx and targets are both (B,T) tensor of integers\n        tok_emb = self.token_embedding_table(idx)  # (B,T,C)\n        pos_emb = self.position_embedding_table(torch.arange(T, device=device))  # (T,C)\n        x = tok_emb + pos_emb  # (B,T,C)\n        x = self.blocks(x)  # (B,T,C)\n        x = self.ln_f(x)  # (B,T,C)\n        logits = self.lm_head(x)  # (B,T,vocab_size)\n\n        if targets is None:\n            loss = None\n        else:\n            B, T, C = logits.shape\n            logits = logits.view(B * T, C)\n            targets = targets.view(B * T)\n            loss = F.cross_entropy(logits, targets)\n\n        return logits, loss\n\n    def generate(self, idx, max_new_tokens):\n        # idx is (B, T) array of indices in the current context\n        for _ in range(max_new_tokens):\n            # crop idx to the last block_size tokens\n            idx_cond = idx[:, -block_size:]\n            # get the predictions\n            logits, loss = self(idx_cond)\n            # focus only on the last time step\n            logits = logits[:, -1, :]  # becomes (B, C)\n            # apply softmax to get probabilities\n            probs = F.softmax(logits, dim=-1)  # (B, C)\n            # sample from the distribution\n            idx_next = torch.multinomial(probs, num_samples=1)  # (B, 1)\n            # append sampled index to the running sequence\n            idx = torch.cat((idx, idx_next), dim=1)  # (B, T+1)\n        return idx",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#homework",
    "href": "02-llms/00-intro-to-llms/index.html#homework",
    "title": "Language models (LMs)",
    "section": "Homework",
    "text": "Homework\n\nIn this notebook, we learned the various components of an LLM.\nTake the mini LLM we created from scratch and run your own training loop. Show how the training and validation perplexity change over the steps.\nHint: this function might be useful for you:\n\n\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in [\"train\", \"val\"]:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X, Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\n\nRun the same training loop but modify one of the hyperparameters from the below list. Run this at least 4 times with a different value and plot each perplexity over training step.\n\n\n# hyperparameters\nn_embd = 64\nn_head = 4  ## so head_size = 16\nn_layer = 4\n\n\nOutput some generated text from each model you trained. Did the output make more sense with some hyperparameters than others?\nWe saw a cool visualization of attention mechanisms with BertViz. Take a more complicated model than GPT2 such as ‚Äúmeta-llama/Llama-2-7b-chat-hf‚Äù and see how the attention mechanisms are different",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#different-types-of-transformers",
    "href": "02-llms/00-intro-to-llms/index.html#different-types-of-transformers",
    "title": "Language models (LMs)",
    "section": "Different types of Transformers",
    "text": "Different types of Transformers\n\nEncoder-Decoder architecture\nIncorporates both an encoder + decoder architecture\nThe output of the top encoder is then transformed into a set of attention vectors K and V. These are to be used by each decoder in its ‚Äúencoder-decoder attention‚Äù layer which helps the decoder focus on appropriate places in the input sequence.\nIn the decoder, the self-attention layer only attends to earlier positions in the output sequence. The future positions are masked (setting them to -inf) before the softmax step in the self-attention calculation.\nThe ‚ÄúEncoder-Decoder Attention‚Äù layer creates its Queries matrix from the layer below it, and takes the Keys and Values matrix from the output of the encoder stack.\nThe following steps repeat the process until a special symbol is reached indicating the transformer decoder has completed its output.\nThe output of each step is fed to the bottom decoder in the next time step, and the decoders bubble up their decoding results just like the encoders did.\nAnd just like we did with the encoder inputs, we embed and add positional encoding to those decoder inputs to indicate the position of each word.\n\n\n\n\n\n\nFigure¬†10: Illustration of the Encoder-Decoder architecture\n\n\n\nImage credit: https://jalammar.github.io/illustrated-transformer/\n\n\nEncoder-only Transformers\nIn addition to the encoder-decoder architecture shown here there various other architectures which are either only encoder or decoder models.\n\n\nBidirectional Encoder Representations from Transformers (BERT) model\nEncoder-only models only use the encoder layer of the Transformer.\nThese models are usually used for ‚Äúunderstanding‚Äù natural language; however, they typically are not used for text generation. Examples of uses for these models are:\n\nDetermining how positive or negative a movie‚Äôs reviews are. (Sentiment Analysis)\nSummarizing long legal contracts. (Summarization)\nDifferentiating words that have multiple meanings (like ‚Äòbank‚Äô) based on the surrounding text. (Polysemy resolution)\n\nThese models are often characterized as having ‚Äúbi-directional‚Äù attention, and are often called auto-encoding models. The attention mechanisms of these models can access all the words in the initial sentence.\nThe most common encoder only architectures are:\n\nALBERT\nBERT\nDistilBERT\nELECTRA\nRoBERTa\n\nAs example, let‚Äôs consider BERT model in a little more detail.\n\n\n\n\n\n\nFigure¬†11: BERT Explanation\n\n\n\nImage credit: https://towardsdatascience.com/bert-explained-state-of-the-art-language-model-for-nlp-f8b21a9b6270\nThe BERT model is bidirectionally trained to have a deeper sense of language context and flow than single-direction language models.\nThe Transformer encoder reads the entire sequence of words at once. Therefore it is considered bidirectional. This characteristic allows the model to learn the context of a word based on all of its surroundings (left and right of the word).\nIn the BERT training process, the model receives pairs of sentences as input and learns to predict if the second sentence in the pair is the subsequent sentence in the original document. During training, 50% of the inputs are a pair in which the second sentence is the subsequent sentence in the original document, while in the other 50% a random sentence from the corpus is chosen as the second sentence.\nTo help the model distinguish between the two sentences in training, the input is processed in the following way before entering the model:\n\nA [CLS] token is inserted at the beginning of the first sentence and a [SEP] token is inserted at the end of each sentence.\nA sentence embedding indicating Sentence A or Sentence B is added to each token. Sentence embeddings are similar in concept to token embeddings with a vocabulary of 2.\nA positional embedding is added to each token to indicate its position in the sequence. The concept and implementation of positional embedding are presented in the Transformer paper.\n\n\n\n\n\n\n\nFigure¬†12: Illustration of BERT input\n\n\n\nImage credit: https://towardsdatascience.com/bert-explained-state-of-the-art-language-model-for-nlp-f8b21a9b6270\nTo predict if the second sentence is indeed connected to the first, the following steps are performed:\n\nThe entire input sequence goes through the Transformer model.\nThe output of the [CLS] token is transformed into a 2√ó1 shaped vector, using a simple classification layer (learned matrices of weights and biases).\nCalculating the probability of IsNextSequence with softmax.\n\n\nAdvantages and disadvantages:\nAdvantages:\n\nContextualized embeddings: Good for tasks where contextualized embeddings of input tokens are crucial, such as natural language understanding.\nParallel processing: Allows for parallel processing of input tokens, making it computationally efficient.\n\nDisadvantages:\n\nNot designed for sequence generation: Might not perform well on tasks that require sequential generation of output, as there is no inherent mechanism for auto-regressive decoding.\n\nHere is an example of a BERT code that can be used to\n\n\n\nDecoder-only models\nAn important difference of the GPT-2 architecture compared to the encoder-Transformer architecture has to do with the type of attention mechanism used.\nIn models such as BERT, the self-attention mechanism has access to tokens to the left and right of the query token. However, in decoder-based models such as GPT-2, masked self-attention is used instead which allows access only to tokens to the left of the query.\nThe masked self-attention mechanism is important for GPT-2 since it allows the model to be trained for token-by-token generation without simply ‚Äúmemorizing‚Äù the future tokens.\n\n\n\n\n\n\nFigure¬†13\n\n\n\nImage credit: https://jalammar.github.io/illustrated-gpt2/\nThe masked self-attention adds understanding of associated words to explain contexts of certain words before passing it through a neural network. It assigns scores to how relevant each word in the segment is, and then adds up the vector representation. This is then passed through the feed-forward network resulting in an output vector.\n\n\n\n\n\n\nFigure¬†14\n\n\n\nImage credit: https://jalammar.github.io/illustrated-gpt2/\nThe resulting vector then needs to be converted to an output token. A common method of obtaining this output token is known as top-k.\nHere, the output vector is multiplied by the token embeddings which results in probabilities for each token in the vocabulary. Then the output token is sampled according to this probability.\n\n\n\n\n\n\nFigure¬†15\n\n\n\nImage credit: https://jalammar.github.io/illustrated-gpt2/\n\n\nAdvantages and disadvantages\nAdvantages:\n\nAuto-regressive generation: Well-suited for tasks that require sequential generation, as the model can generate one token at a time based on the previous tokens.\nVariable-length output: Can handle tasks where the output sequence length is not fixed.\n\nDisadvantages:\n\nNo direct access to input context: The decoder doesn‚Äôt directly consider the input context during decoding, which might be a limitation for certain tasks.\nPotential for inefficiency: Decoding token by token can be less computationally efficient compared to parallel processing.",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#additional-architectures",
    "href": "02-llms/00-intro-to-llms/index.html#additional-architectures",
    "title": "Language models (LMs)",
    "section": "Additional architectures",
    "text": "Additional architectures\nIn addition to text, LLMs have also been applied on other data sources such as images and graphs. Here I will describe two particular architectures: 1. Vision Transformers 2. Graph Transformers\n\nVision Transformers\nVision Transformers (ViT) is an architecture that uses self-attention mechanisms to process images.\nThe way this works is:\n\nSplit image into patches (size is fixed)\nFlatten the image patches\nCreate lower-dimensional linear embeddings from these flattened image patches and include positional embeddings\nFeed the sequence as an input to a transformer encoder\nPre-train the ViT model with image labels, which is then fully supervised on a big dataset Fine-tune the downstream dataset for image classification\n\n\n\n\nvision-transformer-vit.png\n\n\nImage credit: Dosovitskiy, Alexey, et al.¬†‚ÄúAn image is worth 16x16 words: Transformers for image recognition at scale.‚Äù arXiv preprint arXiv:2010.11929 (2020).\n\n\nGraph Transformers\n\n\n\nGraphformer.png",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/00-intro-to-llms/index.html#references",
    "href": "02-llms/00-intro-to-llms/index.html#references",
    "title": "Language models (LMs)",
    "section": "References",
    "text": "References\nHere are some recommendations for further reading and additional code for review.\n\n‚ÄúThe Illustrated Transformer‚Äù by Jay Alammar\n‚ÄúVisualizing A Neural Machine Translation Model (Mechanics of Seq2seq Models With Attention)‚Äù\n‚ÄúThe Illustrated GPT-2 (Visualizing Transformer Language Models)‚Äù\n‚ÄúA gentle introduction to positional encoding‚Äù\n‚ÄúLLM Tutorial Workshop (Argonne National Laboratory)‚Äù\n‚ÄúLLM Tutorial Workshop Part 2 (Argonne National Laboratory)‚Äù",
    "crumbs": [
      "[02] Large Language Models",
      "[0] Intro to LLMs"
    ]
  },
  {
    "objectID": "02-llms/06-parallel-training/index.html#hands-on",
    "href": "02-llms/06-parallel-training/index.html#hands-on",
    "title": "Intro to HPC Bootcamp 2025",
    "section": "üëã Hands On",
    "text": "üëã Hands On\n\nSubmit interactive job:\nqsub -A ALCFAITP -q by-node -l select=1 -l walltime=01:00:00,filesystems=eagle:home -I\nOn Sophia:\nexport HTTP_PROXY=\"http://proxy.alcf.anl.gov:3128\"\nexport HTTPS_PROXY=\"http://proxy.alcf.anl.gov:3128\"\nexport http_proxy=\"http://proxy.alcf.anl.gov:3128\"\nexport https_proxy=\"http://proxy.alcf.anl.gov:3128\"\nexport ftp_proxy=\"http://proxy.alcf.anl.gov:3128\"\nClone repos:\n\nsaforem2/wordplay:\ngit clone https://github.com/saforem2/wordplay\ncd wordplay\nsaforem2/ezpz:\ngit clone https://github.com/saforem2/ezpz deps/ezpz\n\nSetup python:\nexport PBS_O_WORKDIR=$(pwd) && source deps/ezpz/src/ezpz/bin/utils.sh\nezpz_setup_python\nezpz_setup_job\nInstall {ezpz, wordplay}:\npython3 -m pip install -e deps/ezpz --require-virtualenv\npython3 -m pip install -e . --require-virtualenv\nSetup (or disable) wandb:\n# to setup:\nwandb login\n# to disable:\nexport WANDB_DISABLED=1\nTest Distributed Setup:\nmpirun -n \"${NGPUS}\" python3 -m ezpz.test_dist\nSee: ezpz/test_dist.py\nPrepare Data:\npython3 data/shakespeare_char/prepare.py\nLaunch Training:\nmpirun -n \"${NGPUS}\" python3 -m wordplay \\\n    train.backend=DDP \\\n    train.eval_interval=100 \\\n    data=shakespeare \\\n    train.dtype=bf16 \\\n    model.batch_size=64 \\\n    model.block_size=1024 \\\n    train.max_iters=1000 \\\n    train.log_interval=10 \\\n    train.compile=false",
    "crumbs": [
      "[02] Large Language Models",
      "[6] Parallel Training"
    ]
  },
  {
    "objectID": "02-llms/06-parallel-training/index.html#homework",
    "href": "02-llms/06-parallel-training/index.html#homework",
    "title": "Intro to HPC Bootcamp 2025",
    "section": "üéí Homework",
    "text": "üéí Homework\nSubmit proof that you were able to successfully follow the above instructions and launch a distributed data parallel training run.\nWhere proof can be any of:\n\nThe contents printed out to your terminal during the run\nA path to a logfile containing the output from a run on the ALCF filesystems\nA screenshot of:\n\nthe text printed out from the run\na graph from the W&B Run\nanything that shows that you clearly were able to run the example\n\nurl to a W&B Run or W&B Report\netc.",
    "crumbs": [
      "[02] Large Language Models",
      "[6] Parallel Training"
    ]
  }
]